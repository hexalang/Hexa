// The Hexa Compiler
// Copyright (C) 2018-2020 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Types used by typer and as input to normalizer
// All expressions have assigned type on them
// When you write `SomeClass.method()` it works like that:
// `SomeClass` is `Type.Class`
// so `.method` operates on static fields, cause *not* `Type.ClassInstance`
// `.method` will have `Type.Function`
// and `()` will check their arguments and have a `returns` as it's type
// taken from `Type.Function`
enum Type {
	Constant(value: String) // TODO rethink & also make typed (for integers)
	Generic(index: Int, name: String)

	// Nullability
	/// Type not known at all
	Unknown(handle: { value: Type? })
	/// For situations like `var a = null` where no `T` known yet
	UnknownNullable(handle: { value: Type? })
	/// Non-void
	// TODO `private` disallows direct instantiation
	Nullable(type: Type)

	// Classes
	Class(type: ClassType) // Type of `class` node itself
	// TODO `generic: [Type]?` or is late allocation is useless with new allocator?
	// TODO ^ only if arrays a conjoined too or lazy-allocated internally
	// TODO `private` disallows direct instantiation
	ClassInstance(type: ClassType, generic: [Type]) // Instance of class (constructed with `new`)
	SuperOf(type: ClassType) // `super` of current class (not parent)

	// Enums
	/// Type of `enum` node itself
	// TODO generic enums
	Enum(type: EnumType)
	/// Instance of enum value
	EnumInstance(type: EnumType, tag: Int)
	/// EnumType.EnumConstructor without call (...)
	EnumConstructor(type: EnumType, tag: Int)

	// Modularity
	/// Type of `declare T = A` node itself
	Alias(alias: AliasType)
	// TODO temporarely class FunctionType { throws : [] } etc
	// \/ , type: FunctionType as class like ClassType etc do
	// TODO preserve argument names
	Function(args: [Type], returns: Type)
	// TODO Rest(value: Type) because ...rest != Array (i.e. should be implemented natively in js and ...vaarg C)
	// TODO Function(args: [Type], returns: Type, lazyTypeCheck: Node?, argNames: [String])
	// TODO ArgumentsArray, cause (...rest) in JS rest!=Array, it is pseudo-array

	Struct(names: [String], types: [Type])

	static fun stringify(type: Type): String {
		switch type {
			case ClassInstance(type, generic):
				if let gen = generic {
					return DataHelper.nameOf(type.parent) + '<' + [for g in gen Type.stringify(g)].join(', ') + '>'
				}
				return DataHelper.nameOf(type.parent)
			case Generic(index, name):
				return '<' + name + ' at ' + index + '>'
			case Class(type):
				return DataHelper.nameOf(type.parent)
			case Function(args, returns):
				return '(' + [for arg in args Type.stringify(arg)].join(', ') + ') => ' + Type.stringify(returns)
			case UnknownNullable(handle):
				if let value = handle.value {
					return Type.stringify(value) + '?'
				}
				return 'Unknown?'
			case Nullable(type):
				return Type.stringify(type) + '?'
			case Enum(type):
				return DataHelper.nameOf(type.parent)
			case EnumInstance(type, tag):
				// TODO return DataHelper.nameOf(type.parent) + '.' + tag
				// TODO print tag name `Token.OpNot`
				let tagName = type.fieldNames[tag]
				return DataHelper.nameOf(type.parent) + '.' + tagName
			case Unknown(handle):
				if let value = handle.value {
					return Type.stringify(value)
				}
				return 'Unknown'
			case Alias(alias):
				return NodeType.stringify(alias.value)
			case Constant(value): {
				return value
			}
			case Struct(names, types):
				return '{ ' + [
					for i in names.length names[i] + Type.stringify(types[i])
				].join(', ') + ' }'
			case null:
				return 'could not infer type, try to set type manually'
			case _:
				return '~?' + type + '?~' // TODO `@allCases`
		}
	}

	/// For `T<A, B>` returns just `T`
	static fun primaryName(type: Type): String {
		switch type {
			case Class(type): return type.name
			case ClassInstance(type): return type.name
			case _: return '~?' + type + '?~'
		}
	}

	static fun unwrapNullable(t: Type): Type {
		switch t {
			case UnknownNullable(handle): return handle.value
			case Nullable(t): return t
		}
		return t
	}
}

/// `class T {}`
class ClassType {
	new () {}
	var name: String
	/// Node of this class within syntax tree
	var parent: Node
	/// Non-null if in a module, not in a block
	var owner: ModuleType? = null
	let fieldNames: [String] = []
	/// `@rename('rename')`
	let fieldRenames: [String] = []
	let fieldStatic: [Bool] = []
	let fieldInitialized: [Bool] = [] // Debug typer race conditions
	let protected: [Bool] = [] // `private`
	let immutable: [Bool] = [] // `let` or `function`
	var constructor = -1
	var indexKeyType = null
	var indexValueType = null
	let fields: [String : ClassTypeField] = [:]
	let genericParams: [String] = [] // `<GenericParameter>`
	var useless: Bool = true // No reason to generate
	var external: Bool = false
	var extend: Type? = null
	var kind: ClassKind
	var implement: [Type] = []

	/// The more - the earlier in code gen
	/// Fixes forward declaration incomplete type error for by-value structures
	var usedByValueDepth: Int = 0

	/// Is itself instanced from another `ClassType`
	var instanceOf: ClassType? = null
	var instanceParams: [Type]? = null

	/// Fully typed instances, viable for code generation
	var instances: [ClassType] = []

	// Non-generic `Type.ClassInstance`
	let instanceCache = Type.ClassInstance(this, null)
	fun instantiate(): Type {
		return instanceCache
	}

	// Generic `Type.ClassInstance`
	let genericCache: [[Type]] = []
	fun instantiateGeneric(params: [Type]): Type {
		/* So, how it works:
			genericCache is array of [type, param1, param2, ...]
			i.e. [0] element is a resulting cached Type to be returned
			[1...n] are parameters to compare
			Just storage optimization, basically
		*/

		for cached in genericCache {
			if cached.length != (params.length + 1) {
				continue
			}
			var found = true
			for i in cached.length - 1 {
				if params[i] != cached[i + 1] {
					found = false
					break
				}
			}
			if found {
				let result = cached[0]
				return result
			}
		}

		let result = Type.ClassInstance(this, params)
		// Save self instance for reuse
		// TODO also save `new ClassType` for accessing instance fields and methods
		let cache = [result]
		for param in params {
			// Save instance parameters
			cache.push(param)
		}
		genericCache.push(cache)
		return result
	}
}

/// `enum T {}`
class EnumType {
	var parent: Node
	var name: String

	// All fields
	let fieldNames: [String] = []
	let tagBindVars: [[NodeType]] = []
	let tagBindVarsNames: [[String]] = []
	let fieldStatic: [Bool] = []

	// Is field of name `fieldNames` is `TitleCase`
	let fieldEnumConstructor: [Bool] = []
	let fieldType: [Type] = []
	var fieldsTypeSimple: Type? = null

	new () {
	}
}

enum ClassTypeField : Int {
	Method
	Variable
}

class ModuleType {
}

/// `declare T = A`
class AliasType {
	// TODO let value: NodeType
	var value: NodeType

	new (value: NodeType) {
		this.value = value
	}
}
