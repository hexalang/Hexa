// The Hexa Compiler
// Copyright (C) 2018-2020  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

module
	// List of all available lexemes and tokens
	// See: `/docs/lexer.md`
	enum Token: Int {
		// Default
		Eof          = 0
		Default      = 123 // Simplifies some parsing

		// Keywords
		// Order makes no sense
		KBreak       = 3
		KCase        = 4
		KCatch       = 6
		KClass       = 7
		KContinue    = 8
		KDo          = 9
		KElse        = 10
		KEnum        = 11
		KExtends     = 12
		KExport      = 19
		KDeclare     = 13
		KFalse       = 14
		KFor         = 15
		KFunction    = 16
		KFrom        = 5
		KIf          = 17
		KImplements  = 18
		KImport      = 2
		KIn          = 20
		KInterface   = 22
		KLet         = 23
		KNew         = 25
		KNull        = 26
		KModule      = 28
		KPrivate     = 29
		KReturn      = 31
		KStatic      = 32
		KSwitch      = 33
		KThis        = 34
		KThrow       = 35
		KTrue        = 36
		KTry         = 37
		KUsing       = 39
		KVar         = 40
		KWhile       = 41
		KIs			 = 57
		KAs          = 58
		KSuper       = 59

		// Literals
		LFloat       = 60 // 0.123
		LUpper       = 61 // Word
		LLower       = 62 // word
		LInt         = 63 // 123
		LString      = 64 // "", ''
		LDoc         = 65 // /** doc **/
		LBacktick    = 66 // ``

		// Symbols
		Underscore   = 1
		At           = 70 // @
		BkClose      = 71 // ]
		BkOpen       = 72 // [
		BrClose      = 73 // }
		BrOpen       = 74 // {
		Comma        = 75 // ,
		Colon        = 76 // :
		Dot          = 77 // .
		Sharp        = 78 // #
		PClose       = 79 // )
		POpen        = 80 // (
		Question     = 81 // ?
		Semicolon    = 82 // ;
		Query        = 83 // $
		Interval     = 98 // ...

		// Unop
		OpDecrement  = 86 // --
		OpIncrement  = 87 // ++
		OpNegBits    = 88 // ~
		OpNot        = 89 // !

		// Binop
		OpArrow      = 90 // =>
		OpAssign     = 91 // =
		OpBoolAnd    = 92 // &&
		OpBoolOr     = 93 // ||
		OpDiv        = 94 // /
		OpEq         = 95 // ==
		OpGt         = 96 // >
		OpGte        = 97 // >=
		OpLt         = 99 // <
		OpLte       = 100 // <=
		OpMod       = 101 // %
		OpMult      = 102 // *
		OpNotEq     = 103 // !=
		OpOr        = 104 // |
		OpShl       = 105 // <<
		OpShr       = 106 // >>
		OpSub       = 107 // -
		OpUShr      = 108 // >>>
		OpXor       = 109 // ^
		OpIntDiv    = 110 // \
		OpAdd       = 111 // +
		OpAnd       = 112 // &
		OpChain     = 113 // ?.

		static function stringify(token: Token, param: String? = null): String {
			switch (token) {
			case Token.At: return "@"
			case Token.Query: return "$"
			case Token.Sharp: return "#"
			case Token.BkClose: return "]"
			case Token.BkOpen: return "["
			case Token.BrClose: return "}"
			case Token.BrOpen: return "{"
			case Token.Colon: return ":"
			case Token.Comma: return ","
			case Token.Default: return "<!--default-->"
			case Token.Dot: return "."
			case Token.Eof: return "<!--eof-->"
			case Token.Interval: return "..."
			case Token.KAs: return "as"
			case Token.KBreak: return "break"
			case Token.KCase: return "case"
			case Token.KCatch: return "catch"
			case Token.KClass: return "class"
			case Token.KContinue: return "continue"
			case Token.KDo: return "do"
			case Token.KElse: return "else"
			case Token.KEnum: return "enum"
			case Token.KExtends: return "extends"
			case Token.KExport: return "export"
			case Token.KDeclare: return "declare"
			case Token.KFalse: return "false"
			case Token.KFor: return "for"
			case Token.KFunction: return "function"
			case Token.KFrom: return "from"
			case Token.KIf: return "if"
			case Token.KImplements: return "implements"
			case Token.KImport: return "import"
			case Token.KIn: return "in"
			case Token.KInterface: return "interface"
			case Token.KLet: return "let"
			case Token.KNew: return "new"
			case Token.KNull: return "null"
			case Token.KModule: return "module"
			case Token.KPrivate: return "private"
			case Token.KReturn: return "return"
			case Token.KStatic: return "static"
			case Token.KSuper: return "super"
			case Token.KSwitch: return "switch"
			case Token.KThis: return "this"
			case Token.KThrow: return "throw"
			case Token.KTrue: return "true"
			case Token.KTry: return "try"
			case Token.KUsing: return "using"
			case Token.KVar: return "var"
			case Token.KWhile: return "while"
			case Token.OpAdd: return "+"
			case Token.OpAnd: return "&"
			case Token.OpArrow: return "=>"
			case Token.OpAssign: return "="
			case Token.OpBoolAnd: return "&&"
			case Token.OpBoolOr: return "||"
			case Token.OpDecrement: return "--"
			case Token.OpDiv: return "/"
			case Token.OpEq: return "=="
			case Token.OpGt: return ">"
			case Token.OpGte: return ">="
			case Token.OpIncrement: return "++"
			case Token.OpIntDiv: return "\\"
			case Token.OpLt: return "<"
			case Token.OpLte: return "<="
			case Token.OpMod: return "%"
			case Token.OpMult: return "*"
			case Token.OpNegBits: return "~"
			case Token.OpNot: return "!"
			case Token.OpNotEq: return "!="
			case Token.OpOr: return "|"
			case Token.OpShl: return "<<"
			case Token.OpShr: return ">>"
			case Token.OpSub: return "-"
			case Token.OpUShr: return ">>>"
			case Token.OpXor: return "^"
			case Token.OpChain: return "?."
			case Token.PClose: return ")"
			case Token.POpen: return "("
			case Token.Question: return "?"
			case Token.Semicolon: return ";"
			case Token.Underscore: return "_"
			case Token.LUpper: return (param == null)? 'TitleCase' : param
			case Token.LString: return (param == null)? 'string' : '\'\(param)\''
			case Token.LBacktick: return (param == null)? 'backtick' : '`\(param)`'
			case Token.LLower: return (param == null)? 'identifier' : param
			case Token.LInt: return (param == null)? 'integer' : param
			case Token.LFloat: return (param == null)? 'float' : param
			case Token.LDoc: return '///\(param)'
			case Token.KIs: return "is"
			}
		}
	}
