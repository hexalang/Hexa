// The Hexa Compiler
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

enum ServerCommandKind : String {
	// Only syntax check
	GetWholeFileSyntaxErrors

	// This has higher priority than on-disk copy
	SyncFileContents
	DiscardFileContents

	// Search for `hexa.json` relatively to `.hexa` file
	// and return directory path to it
	FindProjectFile

	// Uses `FindProjectFile` internally
	AutocheckProject
}

declare class ServerCommand {
	let kind: ServerCommandKind
	let payload: Any
}

let fileContents: [String : Buffer] = [:]

fun findProjectFile(fsPath: String) {
	var lastPath = '*'
	var dir = Path.dirname(fsPath)
	var found = false

	while lastPath != dir {
		if Fs.existsSync(Path.join(dir, 'hexa.json')) {
			found = true
			break
		}

		lastPath = dir
		dir = Path.dirname(dir)
	}

	return {
		found: found,
		dir: dir
	}
}

class Server {
	var port: Int

	new (port: String?) {
		this.port = port == null? 3978 : parseInt(port)
		let port = this.port
		console.log('Requested language server at localhost:' + port)

		// Initialize compiler
		Lexer.init()

		let http = require('http')
		let fs = require('fs')
		let path = require('path')
		let url = require('url')

		let project = new Project()
		let empty = '[]'

		let handleRequest = fun (project, req, res) {
			let chunks = []

			req.on('data', (chunk) => {
				chunks.push(chunk)
			})

			req.on('end', fun () {
				let data = Buffer.concat(chunks)
				let text = data.toString().trim()
				if (text.length > 0) {
					let json = JSON.parse(data.toString())

					let commands: [ServerCommand] = json

					if (commands.length == 0) {
						res.writeHead(404, {})
						res.write(empty)
						res.end()
					} else {
						let responseToAll: [[Any]] = []
						for command in commands {
							let response: [Any] = []
							switch (command.kind) {
								case GetWholeFileSyntaxErrors:
									let file = 'hexa.hexa'
									let content = Buffer.fromString(command.payload)
									try {
										let tokens = Lexer.tokenize(content, file)
										try {
											let parser = Parser.parseNodes(tokens, new Project(), true)
										} catch (e: CompilerErrors) {
											let errors: [CompilerError] = e.errors
											for error in errors {
												response.push(error)
											}
										}
									} catch (e: CompilerErrors) { // TODO catch () here?
										let errors: [CompilerError] = e.errors
										for error in errors {
											response.push(error)
										}
									}

								case SyncFileContents:
									let fsPath: String = command.payload.fsPath
									let content: String = command.payload.content

									fileContents.set(Path.resolve(fsPath), Buffer.fromString(content))

								case DiscardFileContents:
									let fsPath: String = command.payload.fsPath

									fileContents.delete(Path.resolve(fsPath))

								case AutocheckProject:
									let fsPath: String = command.payload.fsPath
									let project = findProjectFile(fsPath)

									if project.found == true {
										// TODO try-catch `typecheck`
										let e: CompilerErrors = new Main().typecheck(project.dir)

										let errors: [CompilerError] = e.errors
										for error in errors {
											response.push(error)
										}
									} else {
										// TODO syntax check only
										console.log('Not found project for', fsPath)
									}

								case FindProjectFile:
									let fsPath: String = command.payload

									response.push(findProjectFile(fsPath))

								case _:
									console.log('Unknown command kind', command.kind, command)
							}
							responseToAll.push(response)
						}

						res.writeHead(200, {})
						res.write(JSON.stringify(responseToAll))
						res.end()
					}
				} else {
					res.writeHead(400, {})
					res.write(empty)
					res.end()
				}
			})
		}

		let server = http.createServer((req, res) => handleRequest(project, req, res))

		server.listen(port, () => {
			// TODO handle fail
			console.log('Compiler version:', version)
			console.log('Ready to Hexa!')
		})
	}
}
