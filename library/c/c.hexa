// The MIT License
//
// Copyright (C) 2021 Oleg Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Basic
@final
//@native('void')
@nativeBasicType
declare class Void {}

@final
//@native('void*')
@unsupported
declare class Any {}

//@final
//@nativeArrayIndexRead(T)
////@nativeMapIndexRead(T)
//@nativeArrayIndexWrite(T)
//declare class PointerArray<T> {}

@keep class AnyRef {
	//var meta: UInt64
	//var ref: UInt32
	//var xxx: (()=>Void)? // TODO Expected `=>` before `?`
}
@keep fun ref(object: AnyRef) {}
@keep fun unref(object: AnyRef) {}

@final
//@native('int32_t')
@nativeBasicType // @keepFieldsOrder
@orderingSizeOf(32)
declare class Int {
}

@final
//@native('int32_t')
@nativeBasicType
declare	class Bool {}

/// Stored as `Int32` on native platforms
@nativeConvertibleTo(Bool)
@nativeConvertibleFrom(Bool)
declare	class CBool {}

//enum CBool32: Int32 {
//	False = 0
//	True = 1
//}

@final
//@native('double')
@nativeBasicType
declare	class Float {}

@final
@nativeConvertibleTo(String)
@nativeConvertibleFrom(String)
declare class CString8 {}
declare class StackAsciiString {}
declare class HeapAsciiString {}

@final
@nativeFrom(String)
@nativeTo(String)
declare class CString16 {}

/*
	#if external_std_dll // or attach different string.hexa/stringdll.hexa|stringlib.hexa
		declare private class ExtrenalBuiltinStringPointer {}
		declare private fun ExtrenalBuiltinStringPointer_toUpperCase(...)
		@inline class String {
			let me: ExtrenalBuiltinStringPointer
			@inline new () {
			}
			@inline fun toUpperCase(): String
				return ExtrenalBuiltinStringPointer_toUpperCase(me)
			...
		}
	#else
		class String { ...
	#end

	TODO syntax `markdonw` in multiline comments?
*/

@final // TODO optimize into non-virtual calls
class String {
	let length: Int
	/// Used for runtime purposes
	@keep private var next: String? = null
	@keep private var bytesLength: Int = 0
	@keep private var bytesHash: Int = 0
	@keep private var bytes: Int? = null
	fun getBytesPointer(): Int {return 0}

	//function toUpperCase(): String TODO typer not errors here!
	fun toUpperCase(): String {return''}
	fun toLowerCase(): String {return''}
	fun charAt(index: Int): String {return''}
	fun indexOf(str: String, startIndex: Int?): Int {return 0}
	fun lastIndexOf(str: String, startIndex: Int?): Int {return 0}
	fun split(delimiter: String): [String] {return []}
	fun toString(): String {return this}
	fun substring(startIndex: Int, endIndex: Int?): String {return''}
	static fun fromCharCode(code: Int): String {return''}
	fun charCodeAt(index: Int): Int? {return 0}
	fun trim(): String {return''}
	fun substr(pos: Int, len: Int?): String {return''}
	fun endsWith(str: String): Bool {return false}
	fun startsWith(str: String): Bool {return false}

	// Runtime functions
	private fun fromInt() {}
}
//private
@keep
let rootString: String = ''

class Math {
	static fun abs(v: Float): Float {return 0}
	static fun acos(v: Float): Float {return 0}
	static fun asin(v: Float): Float {return 0}
	static fun atan(v: Float): Float {return 0}
	static fun atan2(y: Float, x: Float): Float {return 0}
	static fun ceil(v: Float): Int {return 0}
	static fun cos(v: Float): Float {return 0}
	static fun exp(v: Float): Float {return 0}
	static fun floor(v: Float): Int {return 0}
	static fun log(v: Float): Float {return 0}
	static fun max(a: Float, b: Float): Float {return 0}
	static fun min(a: Float, b: Float): Float {return 0}
	static fun pow(v: Float, exp: Float): Float {return 0}
	static fun random(): Float {return 0}
	static fun round(v: Float): Int {return 0}
	static fun sin(v: Float): Float {return 0}
	static fun sqrt(v: Float): Float {return 0}
	static fun tan(v: Float): Float {return 0}
}

class JSON {
	static fun parse(text: String): Any {return null}
	static fun stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String {return ''}
}

class Map<K, V> {
	//function get(k: K): V {}
	function get(k: K): V {return null}
	fun set(k: K, v: V): Void {}
	fun has(k: K): Bool {return false}
	fun keys(): [K] {return [null]} // TODO what with [null]?
	new(/*...values:T*/) {} // TODO fix ... in parser
}

declare function ffflush(port: Int): Void
@native('printf') declare function printf(text: CString8): Void
@native('fflush') declare fun fflush(port: Int): Void

/*
	#if linux
	@include('#include <stdio.h>', '#include <stdlib.h>')
	@link('-lc')
	#elseif windows
	@importDLL('ntdll.dll')
	#end
	module stdio {

	}

	or...

	/linux/stdio.hexa
	module stdio {}
*/

class Console {
	new() {}
	function log(str: Any): Void {
		//fflush(0)
	}
	fun error(data: Any, message: String?): Void {}
}

let console: Console = new Console()

class Array<T> {
	// TODO do not store "capacity" - it can be always(?) calculated from length
	var length: Int
	//function get(index: Int): Int {} // TODO T?
	//function set(index: Int, value: T): Void {}
	fun concat(a: [T]): [T] {return[]}
	fun join(sep: String): String {return''}
	//function pop(): T? {}
	function pop(): T {return null}
	fun push(x: T): Int {return 0}
	fun reverse(): Void {}
	//function shift(): T? {}
	fun shift(): T? {return null}
	fun slice(pos: Int, end: Int?): [T] {return[]}
	fun sort(f: (T, T)=>Int): Void {}
	fun splice(pos: Int, len: Int): [T] {return[]}
	fun toString(): String {return ''}
	fun unshift(x: T): Void {}
	fun includes(x: T): Bool {return false}
	fun indexOf(x: T, fromIndex: Int?): Int {return 0}
	fun lastIndexOf(x: T, fromIndex: Int?): Int {return 0}
	fun filter(f: T=>Bool): [T] {return[]}
	fun map(f: T=>T): [T] {return[]}
	//new(...values:T) {} // TODO fix ... in parser
	new(size: Int) {} // TODO fix ... in parser
	private function get(index: Int): T {return null}
	private function set(index: Int, value: T): T {return null}
	@operator('[]++') function incrementPost(index: Int): Float {return 0}
	@operator('++[]') function incrementPre(index: Int): Float {return 0}
}

class Date {
	static fun now(): Float {return 0}
}

declare class Reflect { // TODO non-declare!!!
	static fun has(object: Any, name: String): Bool
	static fun get(object: Any, name: String): Any?
	static fun set(object: Any, name: String, value: Any?): Bool
	static fun ownKeys(object: Any): [String]
}

declare fun require(package: String): Any
let __dirname: String = '.'
declare let __filename: String

class Buffer<T> /*implements ArrayAccess<T>*/ {
	static fun alloc/*<T>*/(size: Int): Buffer<T> {return null as! Buffer<T>} // TODO handle `as!` in gen/typer
	var length: Int
	private new (bufsize: Int) {}//{return null} // TODO `new` cannot return value
	static function from/*<T>*/(string: String, encoding: String?): Buffer<T> {return null as! Buffer<T>}
	fun readUInt16LE(offset: Int): Int {return 0}
	fun writeUInt16LE(value: Int, offset: Int): Int {return 0}
	fun readUInt32LE(offset: Int): Int {return 0}
	fun toString(encoding: String): String {return 'null'}//: String, start: Int?, end: Int?): String {}
}

class ProcessStd {
	fun write(text: String): Void {}
	fun once(name: String, callback: ()=>Void): Void {}
	let fd: Any
}

class Process {
	static let stdin: ProcessStd
	static let stdout: ProcessStd
	static let stderr: ProcessStd
	static let argv: [String]
	static fun exit(errorCode: Int): Void {}
	static let versions: { node: String }
	fun cwd(): String {return 'null'}
	let env: Any
}

class ProcessT {
	let stdin: ProcessStd
	let stdout: ProcessStd
	let stderr: ProcessStd
	let argv: [String]
	fun exit(errorCode: Int): Void {}
	fun cwd(): String {return 'null'}
	let versions: { node: String } // todo not require value = for lets in declare
	let env: Any // todo not require value = for lets in declare
}

declare let process: ProcessT

class ParsedPath {
	var root: String
	var dir: String
	var base: String
	var ext: String
	var name: String
}

class Path {
	static let sep: String
	static fun resolve(path: String): String {return 'null'}
	static fun parse(path: String): ParsedPath {return null as! ParsedPath}
	static fun join(...path: String): String {return 'null'}
}

class Fs {
	static fun writeFileSync(path: String, data: String): Void {}
	static fun readdirSync(path: String): [String] {return [null]}
	static fun readFileSync(path: String): Buffer {return null as! Buffer}
	static fun lstatSync(path: String): Any {return null}
	static fun existsSync(path: String): Bool {return false}
	static fun mkdirSync(path: String): Void {}
	static fun readSync(fd: Int, buffer: Buffer, offset: Int, length: Int, position: Int): Int {return 0}
	static fun openSync(path: String, flags: String): Int {return 0}
	static fun renameSync(oldPath: String, newPath: String): Void {}
}

@require("fs")
declare let fssss: ProcessT

// Global
@native('undefined') declare let undefined: Any?
declare fun encodeURIComponent(s: String): String
declare fun decodeURIComponent(s: String): String
declare fun typeof(v: Any): String
declare fun __js__(code: String): Any
declare fun eval(code: String): Any
// Special-case, returns `null` instead of `NaN`
declare fun parseInt(text: String): Int
declare fun parseFloat(text: String): Float

function btoa(text: String) {
	return Buffer.from(text, 'binary').toString('base64')
}

function atob(base64: String) {
	return Buffer.from(base64, 'base64').toString('binary')
}

// TODO decorator of module parsing @native('global')
module js
// Just native built-in `parseInt`, without special cases
declare fun parseInt(text: String): Int
declare fun parseFloat(text: String): Float
