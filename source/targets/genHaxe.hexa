// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Generates Haxe https://haxe.org
// TODO haxe4 mode
class GenHaxe {
	new () {}

	var project: NiceProject
	let extension = '.hx'
	let nativeEnums = true

	static fun spawn() {
		return new GenHaxe()
	}

	fun perform(normalizer): String {
		project = normalizer
		return stringify()
	}

	fun stringify() {
		var out = 'package hexa;\n\nusing StringTools;\n'

		// Types
		for (e in project.enumsSimple) {
			// TODO (Dynamic) to type
			out += '\n' + '@:enum abstract ' + e.name + '(Dynamic) {'
			for (v in e.names.length) {
				// TODO auto-fill empty values in normalizer
				out += '\n\tvar ' + e.names[v] + ' = ' + printExpression(e.values[v] ?? NiceExpression.Int(v)) + ';'
			}
			for (v in e.staticVars) switch (v) {
				case NiceStatement.Var(name, expr, type):
					out += '\n\t' + e.name + '.' + name
					if (expr != null) out += ' = ' + printExpression(expr)
				case NiceStatement.Const(name, expr, type):
					out += '\n\t' + e.name + '.' + name
					out += ' = ' + printExpression(expr)
			}
			for (v in e.staticMethods) switch (v) {
				// TODO
				//case NiceStatement.Function(name, expr, args, defaults, types, returns):
				//	out += '\n\tpublic static function ' + name
				//	out += printFunctionArguments(args, defaults, types) + printType(returns)
				//	out += ' ' + printBlock(expr) + ';'
			}
			out += '\n}\n'
		}

		for (e in project.enumsComplex) {
			out += '\n' + 'enum ' + e.name + ' {'
			var i = 0
			for (name in e.names) {
				out += '\n\t' + name
				if (e.constructors[i] != null) {
					out += '('
					out += [for (k in e.constructors[i].length) {
						e.constructors[i][k] + printNodeAsType(e.types[i][k], ': ')
					}].join(', ')
					out += ');'
				} else out += ';'
				i++
			}
			out += '\n}\n'
		}

		for (i in project.interfaces) {
			throw i
		}

		for (c in project.classes) {
			if (c.external) {
				if (c.jsRequire != null) {
					continue
				}
				continue
			}

			out += '\n' + 'class ' + c.name
			if (let params = c.genericParams) out += '<' + params.join(', ') + '>'
			if (let implement = c.implement) out += ' implements ' + implement
			if (let params = c.implementParams) out += '<' + params.join(', ') + '>'
			out += ' {'
			for (v in c.vars) switch (v) {
				case NiceStatement.Var(name, expr, type):
				out += '\n\tpublic var ' + name + printType(type)
				if (expr != null) out += ' = ' + printExpression(expr)
				out += ';'
				case NiceStatement.Const(name, expr, type):
				out += '\n\tpublic var ' + name + printType(type) + ' = ' + printExpression(expr) + ';'
			}

			// TODO hint `switch (v) {}` switch does nothing
			for (v in c.methods) switch (v) {
				// TODO
				//case NiceStatement.Function(name, expr, args, defaults, types, returns):
				//if (name == null || name == 'new') out += '\n\tpublic function new'
				//else out += '\n\tpublic function ' + name
				//out += printFunctionArguments(args, defaults, types)
					//if (name != null && name != 'new') out += printType(returns)
				//out += ' ' + printBlock(expr) + ';'
			}

			for (v in c.staticVars) switch (v) {
				case NiceStatement.Var(name, expr, type):
					out += '\n\tpublic static var ' + name + printType(type)
					if (expr != null) out += ' = ' + printExpression(expr)
					out += ';'
				case NiceStatement.Const(name, expr, type):
					out += '\n\tpublic static var ' + name + printType(type)
					out += ' = ' + printExpression(expr) + ';'
			}

			for (v in c.staticMethods) switch (v) {
				// TODO
				//case NiceStatement.Function(name, expr, args, defaults, types, returns):
				//	out += '\n\tpublic static function ' + name
				//	out += printFunctionArguments(args, defaults, types) + printType(returns)
				//	out += ' ' + printBlock(expr) + ';'
			}

			out += '\n}\n'
		}

		let globals: [String] = []

		for (g in project.globalFuncs) switch (g) {
			// TODO
			//case NiceStatement.Function(name, expr, args, defaults, types, returns):
			//	globals.push('\n\tpublic static function ' + name)
			//	globals.push(printFunctionArguments(args, defaults, types) + printType(returns))
			//	globals.push(' ' + printBlock(expr) + ';')
		}

		for (g in project.globalVars) switch (g) {
			case NiceStatement.Var(name, expr, type):
				globals.push('\n\tpublic static var ' + name + printType(type))
				if (expr != null)
					globals.push(' = ' + printExpression(expr))
				globals.push(';')
			case NiceStatement.Const(name, expr, type):
				globals.push('\n\tpublic static var ' + name + printType(type))
				globals.push(' = ' + printExpression(expr) + ';')
		}

		// Init
		out += 'class HexaHaxe {\n\tpublic static function main() {'
		tabs = '\t\t\t'
		for (init in project.init) {
			out += '\n\t\t{\n\t\t\t'
			out += printStatement(init)
			out += '\n\t\t}'
		}

		out += '\n\t}'

		for g in globals {
			out += g
		}

		return out + '\n}'
	}

	var tabs = '\t'
	@inline fun pushTab() tabs += '\t'
	@inline fun popTab() tabs = tabs.substring(0, tabs.length - 1)

	let reserved = ['with', 'var', 'instanceof', 'typeof', 'delete', 'undefined', 'package']
	let reservedGlobals = ['HexaHaxe']
	let globalAccessor = 'HexaHaxe.'

	// Surrounds with { brackets } single statement
	fun printBlock(s: NiceStatement): String {
		switch (s) {
			case NiceStatement.Block(el):
			if (el.length == 1) return '{ ' + printStatement(el[0]) + '; }'
			if (el.length == 0) return '{}'
			return printStatement(s)
			case _: return '{ ' + printStatement(s) + '; }'
		}
	}

	fun printStatement(s: NiceStatement) {
		switch (s) {
			case NiceStatement.Statements(els):
				var r = ''
				for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
				return r

			case NiceStatement.Break: return 'break'
			case NiceStatement.Continue: return 'continue'
			case NiceStatement.Block(el):
				pushTab()
				var r = '{'

				for (e in el) switch (e) {
					case null:
					case NiceStatement.Statements(els):
						for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
					case _:
						r += '\n' + tabs + printStatement(e) + ';'
				}

				popTab()
				return r + '\n' + tabs + '}'
			case NiceStatement.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
			case NiceStatement.Const(name, expr, type): return 'var ' + name + printType(type) + (expr == null? '' : ' = ' + printExpression(expr))
			case NiceStatement.Var(name, expr, type): return 'var ' + name + printType(type) + (expr == null? '' : ' = ' + printExpression(expr))
			//case NiceStatement.Function(name, expr, args, defaults, types, returns):
			//	return 'function ' + name + printFunctionArguments(args, defaults, types) + printType(returns) + ' ' + printBlock(expr)
			case NiceStatement.Return(e):
				if (e == null) return 'return'
				return 'return ' + printExpression(e)
			case NiceStatement.If(econd, eif, eelse):
				var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
				if (eelse != null) r += ' else ' + printStatement(eelse)
				return r
			case NiceStatement.Call(e, args): return printExpression(e) + printCallArguments(args)
			case NiceStatement.Try(expr, t, v, catches):
				var r = 'try '
				r += printStatement(expr)
				r += ' catch (' + v[0] + (printType(t[0]) || ': Dynamic') + ') '
				r += printStatement(catches[0])
				return r
			case NiceStatement.Assign(a, v):
				return printExpression(a) + ' = ' + printExpression(v)
			case NiceStatement.Throw(e):
				return 'throw ' + printExpression(e)
			case NiceStatement.For(name, over, by):
				return 'for (' + name + ' in ' + printExpression(over) + ') ' + printStatement(by)
			case NiceStatement.Increment(e): return printExpression(e) + '++'
			case NiceStatement.Decrement(e): return printExpression(e) + '--'
			case NiceStatement.While(econd, e, pre):
				if (pre) return 'while (' + printExpression(econd) + ') ' + printStatement(e)
				return 'do ' + printStatement(e) + ' while (' + printExpression(econd) + ')'
			case NiceStatement.Assignop(a, op, value):
				return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
			case NiceStatement.Dot(expr, name): return printExpression(expr) + '.' + name

			case NiceStatement.Switch(expr, cases, statements):
				var r = 'switch (' + printExpression(expr) + ') {'
				var hasDefault = false

				// case 1: case 2: case 3:
				for (i in cases.length) if (cases[i].length > 0) {
					r += '\n' + tabs + 'case '
					r += [for (cc in cases[i]) printExpression(cc)].join(', ')
					r += ': ' + printStatement(statements[i]) + ';\n' + tabs
				}

				for (i in cases.length) for (cc in cases[i]) switch (cc) {
					case NiceExpression.Underscore(_): hasDefault = true
				}

				// default:
				if (!hasDefault) for (i in cases.length) if (cases[i].length == 0) {
					r += '\n' + tabs + 'default: ' + printStatement(statements[i]) + ';'
					r += '\n' + tabs
					hasDefault = true
				}

				if (!hasDefault) {
					r += '\n' + tabs + 'default: {};'
					r += '\n' + tabs
				}

				return r + '}'

			case _: console.error("Unknown statement kind:", (s??[])[0])
		}

		return '{/*<!-- undefined -->*/}'
	}

	fun printCallArguments(args: [NiceExpression]) {
		return '(' + [for (a in args) printExpression(a)].join(', ') + ')'
	}

	fun printFunctionArguments(args: [String], defaults: [NiceExpression], types) {
		return '(' + [for (a in args.length)
			args[a] + printType(types[a]) + ((defaults != null && defaults[a] != null)? ' = ' + printExpression(defaults[a]) : '')
		].join(', ') + ')'
	}

	fun stringType(t: NodeType, prefix: Bool) {
		let prefix = prefix? ': ' : ''
		if (t == null) return ''
		if (t == null) return prefix + 'Dynamic'

		switch (t) {
			case NodeType.ParametricType(name, params):
				if (name == 'Buffer') return prefix + name
				return prefix + name + '<' + [for (param in (params ?? [])) stringType(param, false)].join(', ') + '>'
			case NodeType.Type(name):
				if (name == 'Any') return prefix + 'Dynamic'
				return prefix + name
			case NodeType.Object(_):
				return prefix + '{}'
			case NodeType.Optional(t):
				return prefix + 'Null<' + stringType(t, false) + '>'
		}

		return prefix + 'Dynamic'
	}

	fun printType(t: NodeType) {
		let type = stringType(t, true)
		if (type == ': Array<Dynamic>') return ''
		return type
	}

	fun printNodeAsType(t: Node, prefix: String) {
		switch (t) {
			case Node.Ident(name): return prefix + name
			case Node.Array(el): return prefix + 'Array<' + printNodeAsType(el[0], '') + '>'

			case null: return prefix + 'Dynamic'
			case _: return prefix + 'Dynamic'
		}
	}

	fun printExpression(e: NiceExpression) {
		switch (e) {
			case NiceExpression.Null: return 'null'
			case NiceExpression.This: return 'this'
			case NiceExpression.Ident(name): return name
			case NiceExpression.Int(v): return '' + v
			case NiceExpression.Float(v): return '' + v
			case NiceExpression.String(s):

				let s = s.split('')
				let charsOut = []
				while (s.length > 0)
				{
					switch (s[0]) {
						case "$":
						charsOut.push("$")
						charsOut.push("$")
						s.shift()
						case "'":
						charsOut.push("\\")
						charsOut.push("'")
						s.shift()
						case "\n":
						charsOut.push("\\n")
						s.shift()
						case "\r":
						charsOut.push("\\r")
						s.shift()
						case "\\":
						s.shift()
						if (s[0] == "'") {
							charsOut.push("\\")
							charsOut.push("'")
							s.shift()
						} else {
							charsOut.push('\\')
						}
						case _:
						charsOut.push(s[0])
						s.shift()
					}
				}

				return "'" + charsOut.join('') + "'"
			case NiceExpression.True: return 'true'
			case NiceExpression.False: return 'false'
			case NiceExpression.Dot(expr, name): return printExpression(expr) + '.' + name
			case NiceExpression.Call(e, args): return printExpression(e) + printCallArguments(args)
			case NiceExpression.Function(name, expr, args, defaults, funcType):
				let name = name ?? ''
				let returns = project.typer.typeVoid // TODO
				let types = [] // TODO
				return 'function ' + name + printFunctionArguments(args, defaults, types) + printType(returns) + ' ' + printBlock(expr)
			case NiceExpression.Arrow(expr, args, defaults, types, returns):
				return 'function ' + printFunctionArguments(args, defaults, types) + printType(returns) + ' return ' + printExpression(expr)
			case NiceExpression.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
			case NiceExpression.Array(el): return '[' + [for (a in el) printExpression(a)].join(', ') + ']'
			case NiceExpression.Unop(op, postfix, e):
				if (postfix) return printExpression(e) + Token.stringify(op)
				return Token.stringify(op) + printExpression(e)
			case NiceExpression.Elvis(nullable, othewise):
				return '(function(){var _ = ' + printExpression(nullable) + '; if (_ != null) return _; return ' + printExpression(othewise) + ';}())'
			case NiceExpression.Parenthesis(e): return '(' + printExpression(e) + ')'
			case NiceExpression.Binop(a, op, b):
				return printExpression(a) + ' ' + Token.stringify(op) + ' ' + printExpression(b)
			case NiceExpression.Index(expr, index):
				return printExpression(expr) + '[' + printExpression(index) + ']'
			case NiceExpression.If(econd, eif, eelse):
				var r = ''
				r += '(' + printExpression(econd) + ')?'
				r += ' (' + printExpression(eif) + ')'
				r += ' : ' + printExpression(eelse)
				return r
			case NiceExpression.Object(names, el):
				return '{' + [for (i in el.length) ((names[i]) + ':' + printExpression(el[i]))].join(', ') + '}'
			case NiceExpression.Map(keys, values):
				if (keys.length == 0) return 'new Map()'
				return '[' +
				[for (i in keys.length) printExpression(keys[i]) + ' => ' + printExpression(values[i])].join(', ')
				+ ']'
			case NiceExpression.Assignop(a, op, value):
				return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
			case NiceExpression.NativeOperator(kind, args, s): switch (kind) {
				case NativeOperatorKind.Infix: return '((' + printExpression(args[0]) + ') ' + s + ' (' + printExpression(args[1]) + '))'
				case NativeOperatorKind.Function: return s + printCallArguments(args)
				case NativeOperatorKind.Prefix: return '(' + s + '(' + printExpression(args[0]) + '))'
				case NativeOperatorKind.Postfix: return '((' + printExpression(args[1]) + ')' + s + ')'
			}
			case NiceExpression.Underscore: return '_'
			case _:
				console.error("Unknown expression kind:", (e??[])[0], e)
		}

		return '{/*<!-- undefined -->*/}'
	}
}
