console.log("Thank you for choosing Hexa")

// Constants `+`
console.log("abc" + "dce")
console.log("abc" + "dce" + "fff")
console.log("abc" + 123)
console.log("" + (1 + 2))
console.log("" + ("" + 2))
console.log("" + (0.5 + 0.2))

// Propagation
let value = 'hello'
console.log(value)
console.log('x' + value + "y")
let another = value
console.log('x' + another + "y")

{
	let nested = 'hi'
	{
		console.log('x' + nested + "y")
	}
}

// Booleans
let boolean = true
{
	let bool = boolean
	let bool = bool
	let bool = not bool
	let bool = bool or bool
	let bool = bool or true
	let bool = bool and bool
	console.log(('x' + bool) + "y")
	console.log('x' + bool + "y") // TODO
	let bool = bool == bool // TODO
	console.log('x' + bool)

	let bool = false
	let bool = bool or bool and bool
	console.log('false == ' + bool)

	let bool = true
	let bool = bool or bool and bool
	console.log('true == ' + bool)

	let bool = false
	let bool = bool and bool or bool
	console.log('false == ' + bool)

	let bool = true
	let bool = bool and bool or bool
	console.log('true == ' + bool)

	console.log('true == ' + (true || false && true))
	console.log('true == ' + (true || false && false))
	// console.log('true == ' + true || false && true) // TODO

	// Eliminated
	if true {}
	if false {}
	if true {} else {}
	if false {} else {}

	// Propagated
	let t = not false
	let f = not true

	if t {}
	if f {}
	if t {} else {}
	if f {} else {}

	if t { console.log('keep') }
	if f { console.log('remove') }
	if t { console.log('keep') } else { console.log('remove') }
	if f { console.log('remove') } else { console.log('keep') }

	// TODO same for expressions

	// Remove `if (())`
	if ((Math.random() > 0)) { Math.random() }
	if (Math.random() > 0) { Math.random() }
	if Math.random() > 0 { Math.random() }
}

// Blocks
{
	// TODO eliminate
	try {} catch e: Any {}

	try {
		console.log('keep')
		throw 123
		console.log('remove')
	} catch e: Any {}

	for i in [1,2,3] {
		{
			console.log('keep')
			break
			console.log('remove')
		}
		// TODO propagate `break` to remove this block too
		// same for `return` and `throw`
		console.log('keep')
		continue
		console.log('remove')
	}

	fun test() {
		console.log('keep')
		return 123
		console.log('remove')
	}
}

// Unop
{
	var i = 0
	i++
	{ ++i }
	i--
	{ --i }
	{ -i }
	not true

	//fun int() { return 123 }
	//int()++

	// let v = { x : 123 }
	// v.x++ TODO

	fun bool() { return false }
	not bool() // TODO `bool()` must be kept
}

// Expressions as statements
class EasE { new (value: Int) {} }
{
	// TODO bug must require 123
	new EasE()
	new EasE(123)
}

// Cases
{
	switch 123 {
		case _: console.log("hi")
	}

	switch 123 {
		case _: console.log("case _: is ok at any position")
		case 123: console.log("123")
	}

	switch 123 {
		case 123: console.log("123")
		case _: console.log("case _: is ok at any position")
		// case _: console.log("case _: is ok at any position") // TODO case_ twice
	}
}

// Unused classes TODO
class Unused {}
@keep class Keep {}
class AutoKeep { new () {} }
{
	new AutoKeep()
}

// Renaming
@rename('$Renamed')
class Renamed {
	new () {}
	@rename('$renames')
	var renames: String = '123'
	@rename('$ren')
	fun ren(): String {
		return '123'
	}
	@rename('$rename')
	static var rename: String = '123'
	@rename('$renamed')
	static fun renamed() {
		return '123'
	}
}

@rename('$rename')
var rename: Int = 123
@rename('$renamed')
fun renamed() {
	return '123'
}

{
	let r = new Renamed()
	console.log(r.renames)
	console.log(r.ren())
	console.log(Renamed.rename)
	console.log(Renamed.renamed())
	console.log(rename)
	console.log(renamed())
	// TODO { local } renaming
	// TODO module-level renaming

	@rename('$local')
	fun local() {
		return '123'
	}
	console.log(local())
}

// String optimizations
{
	let x = '123'.length
	let x = '123'.charCodeAt(1) == 50
}

// Bug with nullable enums
enum NiceExpression {
	Other
}

{
	let expression: NiceExpression? = NiceExpression.Other
	switch expression {
		case Other:
			console.log('Other')
	}

	switch expression as! NiceExpression {
		case Other:
			console.log('Other')
	}
}
