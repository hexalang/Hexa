// The MIT License
//
// Copyright (C) 2021 Oleg Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

declare fun require(package: String): Any
declare let __dirname: String
declare let __filename: String

	@rename("Buffer")
	@native("Buffer")
	declare class Buffer {
		static fun alloc(size: Int): Buffer
		let length: Int
		let buffer: ArrayBuffer
		new (bufsize: Int)
		fun slice(offset: Int): Buffer
		fun writeUInt8(value: Int, offset: Int): Int
		fun writeUInt16LE(value: Int, offset: Int): Int
		fun writeUInt32LE(value: Int, offset: Int): Int
		fun writeDoubleLE(value: Float, offset: Int): Int
		fun write(string: String, offset: Int, encoding: String): Int
		fun readUInt8(offset: Int): Int
		fun readUInt16LE(offset: Int): Int
		fun readUInt32LE(offset: Int): Int
		fun toString(encoding: String, start: Int?, end: Int?): String
		@rename("from")
		@native("from")
		static fun fromString(string: String, encoding: String?): Buffer
		static fun concat(buffers: [Buffer]): Buffer
	}

declare class ArrayBuffer {}

declare class ProcessStd {
	fun write(text: String): Void
	fun once(name: String, callback: ()=>Void): Void
	let fd: Any
}

	@rename("process")
	@native("process")
	declare class Process {
		static let stdin: ProcessStd
		static let stdout: ProcessStd
		static let stderr: ProcessStd
		static let argv: [String]
		static fun exit(errorCode: Int): Void
		static let versions: { node: String }
		fun cwd(): String
		let env: Any
	}

	@native("process")
	@require("process")
	declare class ProcessModule {
		let stdin: ProcessStd
		let stdout: ProcessStd
		let stderr: ProcessStd
		let argv: [String]
		fun exit(errorCode: Int): Void
		fun cwd(): String
		let versions: { node: String } // todo not require value = for lets in declare
		let env: Any // todo not require value = for lets in declare
		let platform: String
	}

declare let process: ProcessModule

declare class ParsedPath {
	var root: String
	var dir: String
	var base: String
	var ext: String
	var name: String
}

	@native("path")
	@require("path")
	declare class Path {
		static let sep: String
		static fun dirname(path: String): String
		static fun resolve(path: String): String
		static fun relative(from: String, to: String): String
		static fun parse(path: String): ParsedPath
		static fun join(...path: String): String
	}

	@require("fs")
	declare class Fs {
		static fun writeFileSync(path: String, data: String): Void
		static fun readdirSync(path: String): [String]
		static fun readFileSync(path: String): Buffer
		static fun lstatSync(path: String): Any
		static fun existsSync(path: String): Bool
		static fun mkdirSync(path: String): Void
		static fun readSync(fd: Int, buffer: Buffer, offset: Int, length: Int, position: Int): Int
		static fun openSync(path: String, flags: String): Int
		static fun renameSync(oldPath: String, newPath: String): Void
	}

fun btoa(text: String) {
	return new Buffer(text, 'binary').toString('base64')
}

fun atob(base64: String) {
	return new Buffer(base64, 'base64').toString('binary')
}
