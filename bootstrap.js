// Generated by Hexa https://hexalang.github.io
// The Hexa Compiler
// LICENSE LGPL-3.0-only
;(function() {
    "use strict"
    const $global = typeof(window) === "undefined"? global : window
    if (typeof($global.require) === "undefined") { $global.require = function () {} };
    function $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };
    const Fs = require("fs")
    const path = require("path")
    var Token = {
        stringify: (token_2363, param = null) => { {
            const temp_2364 = token_2363;
            switch (temp_2364) {
            case 70: {
                return '@'
            } break;

            case 83: {
                return '$'
            } break;

            case 78: {
                return '#'
            } break;

            case 71: {
                return ']'
            } break;

            case 72: {
                return '['
            } break;

            case 73: {
                return '}'
            } break;

            case 74: {
                return '{'
            } break;

            case 75: {
                return ','
            } break;

            case 76: {
                return ':'
            } break;

            case 123: {
                return '<!--default-->'
            } break;

            case 77: {
                return '.'
            } break;

            case 0: {
                return '<!--eof-->'
            } break;

            case 98: {
                return '...'
            } break;

            case 58: {
                return 'as'
            } break;

            case 3: {
                return 'break'
            } break;

            case 4: {
                return 'case'
            } break;

            case 6: {
                return 'catch'
            } break;

            case 7: {
                return 'class'
            } break;

            case 8: {
                return 'continue'
            } break;

            case 9: {
                return 'do'
            } break;

            case 10: {
                return 'else'
            } break;

            case 11: {
                return 'enum'
            } break;

            case 12: {
                return 'extends'
            } break;

            case 13: {
                return 'declare'
            } break;

            case 14: {
                return 'false'
            } break;

            case 15: {
                return 'for'
            } break;

            case 16: {
                return 'function'
            } break;

            case 17: {
                return 'if'
            } break;

            case 18: {
                return 'implements'
            } break;

            case 20: {
                return 'in'
            } break;

            case 22: {
                return 'interface'
            } break;

            case 23: {
                return 'let'
            } break;

            case 25: {
                return 'new'
            } break;

            case 26: {
                return 'null'
            } break;

            case 28: {
                return 'module'
            } break;

            case 29: {
                return 'private'
            } break;

            case 31: {
                return 'return'
            } break;

            case 32: {
                return 'static'
            } break;

            case 59: {
                return 'super'
            } break;

            case 33: {
                return 'switch'
            } break;

            case 34: {
                return 'this'
            } break;

            case 35: {
                return 'throw'
            } break;

            case 36: {
                return 'true'
            } break;

            case 37: {
                return 'try'
            } break;

            case 39: {
                return 'using'
            } break;

            case 40: {
                return 'var'
            } break;

            case 41: {
                return 'while'
            } break;

            case 111: {
                return '+'
            } break;

            case 112: {
                return '&'
            } break;

            case 90: {
                return '=>'
            } break;

            case 91: {
                return '='
            } break;

            case 92: {
                return '&&'
            } break;

            case 93: {
                return '||'
            } break;

            case 86: {
                return '--'
            } break;

            case 94: {
                return '/'
            } break;

            case 95: {
                return '=='
            } break;

            case 96: {
                return '>'
            } break;

            case 97: {
                return '>='
            } break;

            case 87: {
                return '++'
            } break;

            case 110: {
                return '\\'
            } break;

            case 99: {
                return '<'
            } break;

            case 100: {
                return '<='
            } break;

            case 101: {
                return '%'
            } break;

            case 102: {
                return '*'
            } break;

            case 88: {
                return '~'
            } break;

            case 89: {
                return '!'
            } break;

            case 103: {
                return '!='
            } break;

            case 104: {
                return '|'
            } break;

            case 105: {
                return '<<'
            } break;

            case 106: {
                return '>>'
            } break;

            case 107: {
                return '-'
            } break;

            case 108: {
                return '>>>'
            } break;

            case 109: {
                return '^'
            } break;

            case 113: {
                return '?.'
            } break;

            case 79: {
                return ')'
            } break;

            case 80: {
                return '('
            } break;

            case 81: {
                return '?'
            } break;

            case 82: {
                return ';'
            } break;

            case 1: {
                return '_'
            } break;

            case 61: {
                return ((param == null))? ('<UpperCase>') : param
            } break;

            case 64: {
                return ((param == null))? ('<string>') : ('\'' + (param) + '\'')
            } break;

            case 66: {
                return ((param == null))? ('<backtick>') : ('`' + (param) + '`')
            } break;

            case 62: {
                return ((param == null))? ('identifier') : param
            } break;

            case 63: {
                return ((param == null))? ('<integer>') : param
            } break;

            case 60: {
                return ((param == null))? ('<float>') : param
            } break;

            case 65: {
                return ('///' + (param) + '')
            } break;

            case 57: {
                return 'is'
            } break;
            };
        } },
    }
    var NiceExpression = {
        IndentClass: (type_2366)=>[0,type_2366],
        String: (s_2367)=>[2,s_2367],
        Int: (s_2368)=>[3,s_2368],
        Float: (s_2369)=>[4,s_2369],
        Ident: (s_2370,type_2371)=>[7,s_2370,type_2371],
        Dot: (expr_2372,name_2373,result_2374)=>[10,expr_2372,name_2373,result_2374],
        Call: (e_2375,args_2376,result_2377)=>[11,e_2375,args_2376,result_2377],
        New: (e_2378,args_2379)=>[12,e_2378,args_2379],
        Binop: (a_2380,op_2381,b_2382,result_2383)=>[13,a_2380,op_2381,b_2382,result_2383],
        Function: (name_2384,expr_2385,args_2386,defaults_2387,funcType_2388)=>[14,name_2384,expr_2385,args_2386,defaults_2387,funcType_2388],
        Arrow: (expr_2389,args_2390,defaults_2391,types_2392,returns_2393)=>[15,expr_2389,args_2390,defaults_2391,types_2392,returns_2393],
        Parenthesis: (inner_2394)=>[16,inner_2394],
        Object: (names_2395,el_2396,types_2397)=>[17,names_2395,el_2396,types_2397],
        Array: (values_2398,valueType)=>[18,values_2398,valueType],
        Map: (keys_2399,values_2400,keyType,valueType_2401)=>[19,keys_2399,values_2400,keyType,valueType_2401],
        Unop: (op_2402,postfix_2403,e_2404)=>[20,op_2402,postfix_2403,e_2404],
        Elvis: (nullable_2405,othewise_2406)=>[21,nullable_2405,othewise_2406],
        If: (econd_2407,eif_2408,eelse_2409)=>[22,econd_2407,eif_2408,eelse_2409],
        Index: (expr_2410,index_2411)=>[23,expr_2410,index_2411],
        UnsafeBitCast: (expr_2412,to_2413)=>[24,expr_2412,to_2413],
        CastForceUnsafeBit: (expr_2414,to_2415)=>[25,expr_2414,to_2415],
        CastToString: (value_2416)=>[29,value_2416],
        Is: (expr_2417,of)=>[30,expr_2417,of],
        Assignop: (name_2418,op_2419,value_2420)=>[31,name_2418,op_2419,value_2420],
        NativeOperator: (kind_2421,args_2422,name_2423)=>[32,kind_2421,args_2422,name_2423],
        EnumTag: (expr_2424)=>[33,expr_2424],
        Enum: (type_2425,tagName_2426,tag_2427,args_2428)=>[34,type_2425,tagName_2426,tag_2427,args_2428],
        EnumParameter: (expr_2429,index_2430)=>[35,expr_2429,index_2430],
    }
    Object.defineProperty(NiceExpression, "IdentVar", { get: function() { return [1] }})
    Object.defineProperty(NiceExpression, "True", { get: function() { return [5] }})
    Object.defineProperty(NiceExpression, "False", { get: function() { return [6] }})
    Object.defineProperty(NiceExpression, "Null", { get: function() { return [8] }})
    Object.defineProperty(NiceExpression, "This", { get: function() { return [9] }})
    Object.defineProperty(NiceExpression, "CastOrNull", { get: function() { return [26] }})
    Object.defineProperty(NiceExpression, "CastOrThrow", { get: function() { return [27] }})
    Object.defineProperty(NiceExpression, "CastNatively", { get: function() { return [28] }})
    Object.defineProperty(NiceExpression, "Underscore", { get: function() { return [36] }})
    var NiceStatement = {
        Statements: (el_2431)=>[0,el_2431],
        Block: (el_2432)=>[1,el_2432],
        Call: (e_2433,args_2434,expects_2435)=>[2,e_2433,args_2434,expects_2435],
        New: (e_2436,args_2437)=>[3,e_2436,args_2437],
        UnusedExpression: (e_2438)=>[4,e_2438],
        Var: (name_2439,expr_2440,type_2441)=>[5,name_2439,expr_2440,type_2441],
        Const: (name_2442,expr_2443,type_2444)=>[6,name_2442,expr_2443,type_2444],
        Function: (name_2445,expr_2446,args_2447,defaults_2448,funcType_2449)=>[7,name_2445,expr_2446,args_2447,defaults_2448,funcType_2449],
        Return: (e_2450)=>[8,e_2450],
        If: (econd_2451,eif_2452,eelse_2453)=>[9,econd_2451,eif_2452,eelse_2453],
        If_: (econd_2454,eif_2455)=>[10,econd_2454,eif_2455],
        IfElse: (econd_2456,eif_2457,eelse_2458)=>[11,econd_2456,eif_2457,eelse_2458],
        Try: (expr_2459,t_2460,v_2461,catches_2462,temp_2463)=>[12,expr_2459,t_2460,v_2461,catches_2462,temp_2463],
        Throw: (value_2464)=>[13,value_2464],
        Assign: (name_2465,value_2466,to_2467)=>[14,name_2465,value_2466,to_2467],
        Assignop: (name_2468,op_2469,value_2470)=>[15,name_2468,op_2469,value_2470],
        Dot: (expr_2471,name_2472)=>[16,expr_2471,name_2472],
        DotStatic: (expr_2473,fieldIndex)=>[17,expr_2473,fieldIndex],
        For: (name_2474,over_2475,by_2476)=>[20,name_2474,over_2475,by_2476],
        While: (econd_2477,e_2478,pre_2479)=>[21,econd_2477,e_2478,pre_2479],
        Increment: (e_2480)=>[22,e_2480],
        Decrement: (e_2481)=>[23,e_2481],
        Switch: (expr_2482,cases_2483,statements_2484)=>[24,expr_2482,cases_2483,statements_2484],
        SuperConstructor: (args_2485)=>[27,args_2485],
    }
    Object.defineProperty(NiceStatement, "DotReflectSet", { get: function() { return [18] }})
    Object.defineProperty(NiceStatement, "DotReflectGet", { get: function() { return [19] }})
    Object.defineProperty(NiceStatement, "Continue", { get: function() { return [25] }})
    Object.defineProperty(NiceStatement, "Break", { get: function() { return [26] }})
    var NodeType = {
        stringify: (nodeType_2496) => { return DataHelper.extractTypeName(nodeType_2496) },
        Optional: (type_2486)=>[0,type_2486],
        Type: (name_2487)=>[1,name_2487],
        ParametricType: (name_2488,params_2489)=>[2,name_2488,params_2489],
        Function: (args_2490,ret_2491)=>[3,args_2490,ret_2491],
        FunctionArg: (name_2492,type_2493,defaultValue)=>[4,name_2492,type_2493,defaultValue],
        Object: (names_2494,types_2495)=>[5,names_2494,types_2495],
    }
    var Node = {
        stringify: (node_2635) => { {
            let x_2636 = /*TString*/[0,'s'];
            {
                const temp_2637 = node_2635;
                switch (temp_2637&&temp_2637[0]) {
                case 0: {
                    {
                        const s_2638 = temp_2637[1];
                        return ('\'' + (s_2638) + '\'');
                    }
                } break;

                case 1: {
                    {
                        const name_2639 = temp_2637[1];
                        return name_2639;
                    }
                } break;

                case 2: {
                    {
                        const b_2640 = temp_2637[1];
                        return (b_2640)? ('true') : 'false';
                    }
                } break;

                case 5: {
                    {
                        const s_2641 = temp_2637[1];
                        return s_2641;
                    }
                } break;

                case 6: {
                    {
                        const s_2642 = temp_2637[1];
                        return s_2642;
                    }
                } break;

                case 7: {
                    return 'null'
                } break;

                case 3: {
                    return 'this'
                } break;

                case 33: {
                    {
                        const expr_2643 = temp_2637[1];
                        const index_2644 = temp_2637[2];
                        return Node.stringify(expr_2643) + '[' + Node.stringify(index_2644) + ']';
                    }
                } break;

                case 28: {
                    {
                        const expr_2645 = temp_2637[1];
                        const name_2646 = temp_2637[2];
                        return Node.stringify(expr_2645) + '.' + name_2646;
                    }
                } break;

                case 29: {
                    {
                        const expr_2647 = temp_2637[1];
                        const name_2648 = temp_2637[2];
                        return Node.stringify(expr_2647) + '.' + name_2648;
                    }
                } break;

                case 12: {
                    {
                        const e_2649 = temp_2637[1];
                        const args_2650 = temp_2637[2];
                        const argNames_2651 = temp_2637[3];
                        {
                            const arg_2652 = [];
                            {
                                let i_2653 = 0;
                                let it_2654 = 0;
                                let at_2655 = args_2650.length;
                                while (it_2654 < at_2655) {
                                    i_2653 = it_2654;
                                    it_2654++;
                                    {
                                        let step_2656 = 0;
                                        const name_2657 = argNames_2651[i_2653];
                                        if (step_2656 == 0 && name_2657 != null) { step_2656 = 1 };
                                        if (step_2656 == 1) { arg_2652.push(name_2657 + ': ' + Node.stringify(args_2650[i_2653])) } else arg_2652.push(Node.stringify(args_2650[i_2653]));
                                    };
                                };
                            };
                            return Node.stringify(e_2649) + '(' + arg_2652.join(', ') + ')';
                        };
                    }
                } break;

                case 31: {
                    {
                        const elements_2658 = temp_2637[1];
                        return '[' + (() => {
                            const result_2659 = [];
                            const value_2660 = elements_2658;
                            for (const el of $toIterator(value_2660)) result_2659.push(Node.stringify(el));
                            return result_2659;
                        })().join(', ') + ']';
                    }
                } break;

                case 9: {
                    {
                        const a_2661 = temp_2637[1];
                        const op_2662 = temp_2637[2];
                        const b_2663 = temp_2637[3];
                        return Node.stringify(a_2661) + ' ' + Token.stringify(op_2662) + ' ' + Node.stringify(b_2663);
                    }
                } break;

                case 36: {
                    {
                        const names_2664 = temp_2637[1];
                        const el_2665 = temp_2637[2];
                        return '{' + (() => {
                            const result_2666 = [];
                            const value_2667 = el_2665.length;
                            for (const i of $toIterator(value_2667)) result_2666.push(names_2664[i] + ': ' + Node.stringify(el_2665[i]));
                            return result_2666;
                        })().join(', ') + '}';
                    }
                } break;

                case 48: {
                    {
                        const t_2668 = temp_2637[1];
                        {
                            if (false) { DataHelper.extractTypeName(t_2668) };
                            return DataHelper.extractTypeName(t_2668);
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_2669 = temp_2637[1];
                        const t_2670 = temp_2637[2];
                        const expr_2671 = temp_2637[3];
                        const const_2672 = temp_2637[4];
                        const external_2673 = temp_2637[5];
                        return ((external_2673)? ('declare ') : '') + ((const_2672)? ('let ') : 'var ') + name_2669;
                    }
                } break;

                case 21: {
                    {
                        const name_2674 = temp_2637[1];
                        return 'function ' + name_2674 + '() {...}';
                    }
                } break;

                case 43: {
                    {
                        const f_2675 = temp_2637[1];
                        return 'static ' + Node.stringify(f_2675);
                    }
                } break;

                case 46: {
                    {
                        const name_2676 = temp_2637[1];
                        const over_2677 = temp_2637[2];
                        const by_2678 = temp_2637[3];
                        const range_2679 = temp_2637[4];
                        return ('for (' + (name_2676) + ' in ') + Node.stringify(over_2677) + ') {...}';
                    }
                } break;

                default:
                return '...' + node_2635
                };
            };
        } },
        TString: (s_2536)=>[0,s_2536],
        TIdent: (name_2537)=>[1,name_2537],
        TBool: (b_2538)=>[2,b_2538],
        TInt: (s_2539)=>[5,s_2539],
        TFloat: (s_2540)=>[6,s_2540],
        TTypeAlias: (alias_2541,value_2542)=>[8,alias_2541,value_2542],
        TBinop: (a_2543,op_2544,b_2545)=>[9,a_2543,op_2544,b_2545],
        TAssignop: (a_2546,op_2547,b_2548)=>[10,a_2546,op_2547,b_2548],
        TBlock: (el_2549)=>[11,el_2549],
        TCall: (e_2550,args_2551,argNames_2552)=>[12,e_2550,args_2551,argNames_2552],
        TIf: (econd_2553,eif_2554,eelse_2555)=>[13,econd_2553,eif_2554,eelse_2555],
        TParenthesis: (inner_2556)=>[14,inner_2556],
        TReturn: (e_2557)=>[15,e_2557],
        TThrow: (e_2558)=>[16,e_2558],
        TUnop: (op_2559,postfix_2560,e_2561)=>[19,op_2559,postfix_2560,e_2561],
        TWhile: (econd_2562,e_2563,pre_2564)=>[20,econd_2562,e_2563,pre_2564],
        TFunction: (name_2565,expr_2566,vars_2567,retType,external_2568)=>[21,name_2565,expr_2566,vars_2567,retType,external_2568],
        TArrow: (expr_2569,vars_2570,retType_2571)=>[22,expr_2569,vars_2570,retType_2571],
        TVar: (name_2572,t_2573,expr_2574,const_2575,external_2576)=>[23,name_2572,t_2573,expr_2574,const_2575,external_2576],
        TVars: (vars_2577)=>[24,vars_2577],
        TClass: (t_2578,extend_2579,implement_2580,fields_2581,external_2582,kind_2583)=>[25,t_2578,extend_2579,implement_2580,fields_2581,external_2582,kind_2583],
        TProperty: (v_2584,g,s_2585)=>[26,v_2584,g,s_2585],
        TTry: (expr_2586,t_2587,v_2588,catches_2589)=>[27,expr_2586,t_2587,v_2588,catches_2589],
        TDot: (expr_2590,name_2591)=>[28,expr_2590,name_2591],
        TDotUpper: (expr_2592,name_2593)=>[29,expr_2592,name_2593],
        TNew: (path_2594,t_2595,args_2596,fields_2597,el_2598,argNames_2599)=>[30,path_2594,t_2595,args_2596,fields_2597,el_2598,argNames_2599],
        TArray: (elements)=>[31,elements],
        TMap: (keys_2600,values_2601)=>[32,keys_2600,values_2601],
        TIndex: (expr_2602,index_2603)=>[33,expr_2602,index_2603],
        TSwitch: (exprs_2604,conds_2605,guards_2606,cases_2607)=>[34,exprs_2604,conds_2605,guards_2606,cases_2607],
        TModule: (path_2608,el_2609)=>[35,path_2608,el_2609],
        TObject: (names_2610,el_2611)=>[36,names_2610,el_2611],
        TEnum: (t_2612,fields_2613,valuesType_2614,extend_2615)=>[37,t_2612,fields_2613,valuesType_2614,extend_2615],
        TEnumExtract: (path_2616,bind_2617,expr_2618)=>[38,path_2616,bind_2617,expr_2618],
        TUsing: (path_2619)=>[39,path_2619],
        TIs: (expr_2620,t_2621)=>[40,expr_2620,t_2621],
        TAs: (expr_2622,kind_2623,t_2624)=>[41,expr_2622,kind_2623,t_2624],
        TStatic: (field_2625)=>[43,field_2625],
        TPrivate: (field_2626)=>[44,field_2626],
        TExport: (field_2627)=>[45,field_2627],
        TFor: (name_2628,over_2629,by_2630,range_2631)=>[46,name_2628,over_2629,by_2630,range_2631],
        TElvis: (nullable_2632,othewise_2633)=>[47,nullable_2632,othewise_2633],
        NodeTypeValue: (type_2634)=>[48,type_2634],
    }
    Object.defineProperty(Node, "TThis", { get: function() { return [3] }})
    Object.defineProperty(Node, "TSuper", { get: function() { return [4] }})
    Object.defineProperty(Node, "TNull", { get: function() { return [7] }})
    Object.defineProperty(Node, "TBreak", { get: function() { return [17] }})
    Object.defineProperty(Node, "TContinue", { get: function() { return [18] }})
    Object.defineProperty(Node, "TUnderscore", { get: function() { return [42] }})
    var Type = {
        stringify: (type_2714) => { {
            const temp_2715 = type_2714;
            switch (temp_2715&&temp_2715[0]) {
            case 4: {
                {
                    const type_2716 = temp_2715[1];
                    const generic_2717 = temp_2715[2];
                    {
                        {
                            let step_2718 = 0;
                            const gen = generic_2717;
                            if (step_2718 == 0 && gen != null) { step_2718 = 1 };
                            if (step_2718 == 1) { return DataHelper.nameOf(type_2716.parent) + '<' + (() => {
                                const result_2719 = [];
                                const value_2720 = gen;
                                for (const g of $toIterator(value_2720)) result_2719.push(Type.stringify(g));
                                return result_2719;
                            })().join(', ') + '>' };
                        };
                        return DataHelper.nameOf(type_2716.parent);
                    };
                }
            } break;

            case 3: {
                {
                    const type_2721 = temp_2715[1];
                    return DataHelper.nameOf(type_2721.parent);
                }
            } break;

            case 12: {
                {
                    const args_2722 = temp_2715[1];
                    const returns_2723 = temp_2715[2];
                    return '(' + (() => {
                        const result_2724 = [];
                        const value_2725 = args_2722;
                        for (const arg of $toIterator(value_2725)) result_2724.push(Type.stringify(arg));
                        return result_2724;
                    })().join(', ') + ') => ' + Type.stringify(returns_2723);
                }
            } break;

            case 1: {
                {
                    const handle_2726 = temp_2715[1];
                    {
                        {
                            let step_2727 = 0;
                            const value_2728 = handle_2726.value;
                            if (step_2727 == 0 && value_2728 != null) { step_2727 = 1 };
                            if (step_2727 == 1) { return Type.stringify(value_2728) + '?' };
                        };
                        return 'Unknown?';
                    };
                }
            } break;

            case 2: {
                {
                    const type_2729 = temp_2715[1];
                    return Type.stringify(type_2729) + '?';
                }
            } break;

            case 6: {
                {
                    const type_2730 = temp_2715[1];
                    return DataHelper.nameOf(type_2730.parent);
                }
            } break;

            case 0: {
                {
                    const handle_2731 = temp_2715[1];
                    {
                        {
                            let step_2732 = 0;
                            const value_2733 = handle_2731.value;
                            if (step_2732 == 0 && value_2733 != null) { step_2732 = 1 };
                            if (step_2732 == 1) { return Type.stringify(value_2733) };
                        };
                        return 'Unknown';
                    };
                }
            } break;

            case 7: {
                {
                    const type_2734 = temp_2715[1];
                    const tag_2735 = temp_2715[2];
                    return type_2734.name;
                }
            } break;

            case 19: {
                {
                    const names_2736 = temp_2715[1];
                    const types_2737 = temp_2715[2];
                    return '{' + (() => {
                        const result_2738 = [];
                        const value_2739 = names_2736.length;
                        for (const i of $toIterator(value_2739)) result_2738.push('' + names_2736[i] + ': ' + Type.stringify(types_2737[i]));
                        return result_2738;
                    })().join(', ') + '}';
                }
            } break;

            default:
            return '~?' + type_2714 + '?~'
            };
        } },
        Unknown: (handle_2694)=>[0,handle_2694],
        UnknownNullable: (handle_2695)=>[1,handle_2695],
        Nullable: (type_2696)=>[2,type_2696],
        Class: (type_2697)=>[3,type_2697],
        ClassInstance: (type_2698,generic_2699)=>[4,type_2698,generic_2699],
        SuperOf: (type_2700)=>[5,type_2700],
        Enum: (type_2701)=>[6,type_2701],
        EnumInstance: (type_2702,tag_2703)=>[7,type_2702,tag_2703],
        EnumConstructor: (type_2704,tag_2705)=>[8,type_2704,tag_2705],
        Alias: (value_2706)=>[9,value_2706],
        Function: (args_2707,returns_2708,lazyTypeCheck)=>[12,args_2707,returns_2708,lazyTypeCheck],
        FunctionType: (type_2709)=>[13,type_2709],
        FunctionInstance: (type_2710)=>[14,type_2710],
        VarLocal: (v_2711)=>[15,v_2711],
        Struct: (names_2712,types_2713)=>[19,names_2712,types_2713],
    }
    Object.defineProperty(Type, "Module", { get: function() { return [10] }})
    Object.defineProperty(Type, "Package", { get: function() { return [11] }})
    Object.defineProperty(Type, "VarClass", { get: function() { return [16] }})
    Object.defineProperty(Type, "VarFor", { get: function() { return [17] }})
    Object.defineProperty(Type, "VarArgument", { get: function() { return [18] }})
    Object.defineProperty(Type, "Halts", { get: function() { return [20] }})
    Object.defineProperty(Type, "Throws", { get: function() { return [21] }})
    Object.defineProperty(Type, "Returns", { get: function() { return [22] }})
    Object.defineProperty(Type, "ExitsProgram", { get: function() { return [23] }})
    Object.defineProperty(Type, "BreaksLoop", { get: function() { return [24] }})
    var Fail = {
    }
    Object.defineProperty(Fail, "ParserError", { get: function() { return [0] }})
    Object.defineProperty(Fail, "ParserInternalError", { get: function() { return [1] }})
    Object.defineProperty(Fail, "LexerError", { get: function() { return [2] }})
    Object.defineProperty(Fail, "TyperError", { get: function() { return [3] }})
    Object.defineProperty(Fail, "InfererError", { get: function() { return [4] }})
    var process_22 = $global.process
    var Typer = class {
        constructor() {
            this.scopes = [new Map()]
            this.parents = new Map()
            this.types = new Map()
            this.typeString = null
            this.typeInt = null
            this.typeFloat = null
            this.typeBool = null
            this.typeArray = null
            this.typeMap = (null)
            this.typeAny = null
            this.typeVoid = null
            this.namespaces = new Map()
            this.functionAllowedToThrow = false
            this.functionThrows = false
            this.insideTry = false
            this.insideFunction = false
            this.insideArrow = false
            this.allowBreakAndContinue = false
            this.functionReturnsAType = null
            this.functionActuallyReturns = false
            this.insideClassMethod = false
            this.allowSuper = false
            this.thisType = (null)
        {
        } };
        fillFiles(collected) {
            const fillModuleNamespace = (m) => {
                let el_747 = (null);
                let root = null;
                {
                    const temp_748 = m;
                    switch (temp_748&&temp_748[0]) {
                    case 35: {
                        {
                            const path_749 = temp_748[1];
                            const els_750 = temp_748[2];
                            {
                                el_747 = els_750;
                                root = path_749.join('.');
                            };
                        }
                    } break;

                    default:
                    throw 'Unreachable #2'
                    };
                };
                if (this.namespaces.get(root) == null) { this.namespaces.set(root, m) } else {
                    let els_751 = (null);
                    {
                        const temp_752 = this.namespaces.get(root);
                        switch (temp_752&&temp_752[0]) {
                        case 35: {
                            {
                                const el_753 = temp_752[2];
                                els_751 = el_753;
                            }
                        } break;

                        default:
                        throw 'Unreachable #1'
                        };
                    };
                    while (el_747.length > 0) els_751.push(el_747.pop());
                };
                {
                    let els_754 = (null);
                    {
                        const temp_755 = this.namespaces.get(root);
                        switch (temp_755&&temp_755[0]) {
                        case 35: {
                            {
                                const el_756 = temp_755[2];
                                els_754 = el_756;
                            }
                        } break;

                        default:
                        throw 'Unreachable #4'
                        };
                    };
                    for (const e of $toIterator(els_754)) {
                        let name_757 = this.nameOfModuleItem(e);
                        let found = false;
                        for (const el of $toIterator(els_754)) {
                            if (this.nameOfModuleItem(el) == name_757) {
                                if (found) { Typer.fail(('The `' + (name_757) + '` already exists in module\n') + Typer.positionOf(el) + ('`' + (name_757) + '` is defined here'), e) };
                                if (!found) { found = true };
                            };
                        };
                    };
                };
            };
            for (const file of $toIterator(collected)) {
                let didInit = false;
                let lastOne = file[0];
                for (const e of $toIterator(file)) {
                    const temp_758 = e;
                    switch (temp_758&&temp_758[0]) {
                    case 35: {
                        {
                            const path_759 = temp_758[1];
                            const el_760 = temp_758[2];
                            {
                                if (didInit) { Typer.fail('Modules should follow before expressions\n' + Typer.positionOf(lastOne) + 'Expression is here', e) };
                                fillModuleNamespace(e);
                            };
                        }
                    } break;

                    default:
                    {
                        lastOne = e;
                        didInit = true;
                    }
                    };
                };
            };
            let intermediate = [];
            {
                let intermediateSubs = [];
                for (const ns of $toIterator(this.namespaces.keys())) {
                    let path_761 = ns.split('.');
                    let namespace = path_761.shift();
                    const check = (namespace_762) => { if (this.namespaces.get(namespace_762) == null && intermediate.indexOf(namespace_762) == -1) { intermediate.push(namespace_762) } };
                    check(namespace);
                    while (path_761.length > 0) {
                        namespace += '.' + path_761.shift();
                        check(namespace);
                    };
                };
                for (const path of $toIterator(intermediate)) {
                    let m_763 = /*TModule*/[35,path.split('.'),[]];
                    this.namespaces.set(path, m_763);
                };
            };
            const findBasicType = (name_764, callback_765) => {
                const subj = this.findInNamespaceRoots(name_764);
                if (subj == null) { console.log('#467>', collected, '\n\n', JSON.stringify(collected), '<#467\n\n\n\n') };
                if (subj == null) { Typer.fail(('Cannot find basic type `' + (name_764) + '`. This type should be a part of standard library of the compilation target.')) };
                return this.registerClassType(subj, callback_765);
            };
            findBasicType('Int', (type_766) => { this.typeInt = type_766.instantiate() });
            findBasicType('Bool', (type_767) => { this.typeBool = type_767.instantiate() });
            findBasicType('Float', (type_768) => { this.typeFloat = type_768.instantiate() });
            findBasicType('String', (type_769) => { this.typeString = type_769.instantiate() });
            findBasicType('Array', (type_770) => { this.typeArray = type_770 });
            findBasicType('Map', (type_771) => { this.typeMap = type_771 });
            findBasicType('Any', (type_772) => { this.typeAny = type_772.instantiate() });
            findBasicType('Void', (type_773) => { this.typeVoid = type_773.instantiate() });
            this.pushScope();
            for (const file of $toIterator(collected)) for (const e of $toIterator(file)) {
                const temp_774 = e;
                switch (temp_774&&temp_774[0]) {
                case 35: {
                    {
                        const path_775 = temp_774[1];
                        const el_776 = temp_774[2];
                        {
                            for (const node of $toIterator(el_776)) {
                                const temp_777 = node;
                                switch (temp_777&&temp_777[0]) {
                                case 25: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                case 37: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                }
                                };
                            };
                            for (const node of $toIterator(el_776)) {
                                const temp_778 = node;
                                switch (temp_778&&temp_778[0]) {
                                case 25: {
                                    {
                                    }
                                } break;

                                case 37: {
                                    {
                                    }
                                } break;

                                case 21: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                    this.parents.set(node, e);
                                    this.fill(node);
                                }
                                };
                            };
                        };
                    }
                } break;

                default:
                {
                }
                };
            };
            this.popScope();
            for (const file of $toIterator(collected)) {
                this.pushScope();
                for (const e of $toIterator(file)) {
                    const temp_779 = e;
                    switch (temp_779&&temp_779[0]) {
                    case 35: {
                        {
                            const path_780 = temp_779[1];
                            const el_781 = temp_779[2];
                            {
                            };
                        }
                    } break;

                    default:
                    this.fill(e)
                    };
                };
                this.popScope();
            };
        };
        find(name_782) {
            {
                let i_783 = 0;
                let it_784 = 0;
                let at_785 = this.scopes.length;
                while (it_784 < at_785) {
                    i_783 = it_784;
                    it_784++;
                    {
                        let step_786 = 0;
                        const subj_787 = this.scopes[this.scopes.length - i_783 - 1].get(name_782);
                        if (step_786 == 0 && subj_787 != null) { step_786 = 1 };
                        if (step_786 == 1) { return subj_787 };
                    };
                };
            };
            return this.findInNamespaceRoots(name_782);
        };
        registerClassType(node_788, callback_789) {
            let step_790 = 0;
            const type_791 = this.types.get(node_788);
            if (step_790 == 0 && type_791 != null) { step_790 = 1 };
            if (step_790 == 1) {
                const temp_792 = type_791;
                switch (temp_792&&temp_792[0]) {
                case 3: {
                    {
                        const t_793 = temp_792[1];
                        {
                            {
                                let step_794 = 0;
                                const setup = callback_789;
                                if (step_794 == 0 && setup != null) { step_794 = 1 };
                                if (step_794 == 1) { setup(t_793) };
                            };
                            return t_793;
                        };
                    }
                } break;

                default:
                Typer.fail('registerClassType called again for? ' + DataHelper.nameOf(node_788), node_788)
                };
            } else {
                const type_795 = new ClassType();
                const _thisType = this.thisType;
                this.thisType = /*ClassInstance*/[4,type_795];
                type_795.parent = node_788;
                type_795.name = DataHelper.nameOf(node_788);
                this.types.set(node_788, /*Class*/[3,type_795]);
                {
                    let step_796 = 0;
                    const setup_797 = callback_789;
                    if (step_796 == 0 && setup_797 != null) { step_796 = 1 };
                    if (step_796 == 1) { setup_797(type_795) };
                };
                {
                    const temp_798 = type_795.name;
                    switch (temp_798) {
                    case 'Int': {
                        this.typeInt = type_795.instantiate()
                    } break;

                    case 'Bool': {
                        this.typeBool = type_795.instantiate()
                    } break;

                    case 'Float': {
                        this.typeFloat = type_795.instantiate()
                    } break;

                    case 'String': {
                        this.typeString = type_795.instantiate()
                    } break;

                    case 'Array': {
                        this.typeArray = type_795
                    } break;

                    case 'Map': {
                        this.typeMap = type_795
                    } break;

                    case 'Any': {
                        this.typeAny = type_795.instantiate()
                    } break;

                    case 'Void': {
                        this.typeVoid = type_795.instantiate()
                    } break;
                    };
                };
                const getRename = (f_799) => {
                    const atts_800 = Project.mapAttributes.get(f_799);
                    {
                        let step_801 = 0;
                        const native_802 = DataHelper.getAttribute(atts_800, 'native');
                        if (step_801 == 0 && native_802 != null) { step_801 = 1 };
                        if (step_801 == 1) {
                            if (native_802.values.length != 1) { throw '@native takes one string argument' };
                            if (native_802 != null) {
                                const temp_803 = native_802.values[0];
                                switch (temp_803&&temp_803[0]) {
                                case 0: {
                                    {
                                        const s_804 = temp_803[1];
                                        return s_804;
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            };
                        };
                    };
                    return null;
                };
                {
                    const temp_805 = node_788;
                    switch (temp_805&&temp_805[0]) {
                    case 25: {
                        {
                            const t_806 = temp_805[1];
                            const extend_807 = temp_805[2];
                            const implement = temp_805[3];
                            const f_808 = temp_805[4];
                            const external_809 = temp_805[5];
                            const kind_810 = temp_805[6];
                            {
                                {
                                    const temp_811 = t_806;
                                    switch (temp_811&&temp_811[0]) {
                                    case 2: {
                                        {
                                            const name_812 = temp_811[1];
                                            const params_813 = temp_811[2];
                                            {
                                                const names_814 = [DataHelper.extractTypeName(params_813[0])];
                                                {
                                                    let i_815 = 0;
                                                    let it_816 = 1;
                                                    let at_817 = params_813.length;
                                                    while (it_816 < at_817) {
                                                        i_815 = it_816;
                                                        it_816++;
                                                        {
                                                            const name_818 = DataHelper.extractTypeName(params_813[i_815]);
                                                            if (names_814.includes(name_818)) { Typer.fail(('Parametric type `' + (name_818) + '` already exists in `<T, ...>`'), node_788) };
                                                            names_814.push(name_818);
                                                        };
                                                    };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                                {
                                    const temp_819 = kind_810;
                                    switch (temp_819) {
                                    case 1: {
                                        type_795.isInterface = true
                                    } break;

                                    case 0: {
                                        {
                                        }
                                    } break;
                                    };
                                };
                                {
                                    let step_820 = 0;
                                    const ext_821 = extend_807;
                                    if (step_820 == 0 && ext_821 != null) { step_820 = 1 };
                                    if (step_820 == 1) { type_795.extend = this.toType(ext_821, node_788) };
                                };
                                for (const impl of $toIterator(implement)) type_795.implement.push(this.toType(impl, node_788));
                                this.pushScope();
                                for (const field of $toIterator(f_808)) {
                                    {
                                        const temp_822 = field;
                                        switch (temp_822&&temp_822[0]) {
                                        case 21: {
                                            {
                                                const name_823 = temp_822[1];
                                                {
                                                    if (type_795.fieldNames.includes(name_823)) { Typer.fail(('Field `' + (name_823) + '` already exists'), field) };
                                                    type_795.fieldNames.push(name_823);
                                                    if (name_823 == 'new') { type_795.constructor = type_795.fieldNames.length - 1 } else type_795.fieldRenames[type_795.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_823, field);
                                                };
                                            }
                                        } break;

                                        case 23: {
                                            {
                                                const name_824 = temp_822[1];
                                                const t_825 = temp_822[2];
                                                const e_826 = temp_822[3];
                                                {
                                                    if (type_795.fieldNames.includes(name_824)) { Typer.fail(('Field `' + (name_824) + '` already exists'), field) };
                                                    type_795.fieldNames.push(name_824);
                                                    type_795.fieldInitialized[type_795.fieldNames.length - 1] = false;
                                                    type_795.lateAssignRequired[type_795.fieldNames.length - 1] = e_826 == null && type_795.isInterface == false;
                                                    type_795.fieldRenames[type_795.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_824, field);
                                                };
                                            }
                                        } break;

                                        case 26: {
                                            {
                                                const field_827 = temp_822[1];
                                                {
                                                    const temp_828 = field_827;
                                                    switch (temp_828&&temp_828[0]) {
                                                    case 23: {
                                                        {
                                                            const name_829 = temp_828[1];
                                                            {
                                                                if (type_795.fieldNames.includes(name_829)) { Typer.fail(('Field `' + (name_829) + '` already exists'), field_827) };
                                                                type_795.fieldNames.push(name_829);
                                                                this.addScope(name_829, field_827);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_830 = temp_822[1];
                                                {
                                                    const temp_831 = f_830;
                                                    switch (temp_831&&temp_831[0]) {
                                                    case 21: {
                                                        {
                                                            const name_832 = temp_831[1];
                                                            {
                                                                if (type_795.fieldNames.includes(name_832)) { Typer.fail(('Field `' + (name_832) + '` already exists'), field) };
                                                                type_795.fieldNames.push(name_832);
                                                                type_795.fieldStatic[type_795.fieldNames.length - 1] = true;
                                                                this.addScope(name_832, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_833 = temp_831[1];
                                                            {
                                                                if (type_795.fieldNames.includes(name_833)) { Typer.fail(('Field `' + (name_833) + '` already exists'), field) };
                                                                type_795.fieldNames.push(name_833);
                                                                type_795.fieldStatic[type_795.fieldNames.length - 1] = true;
                                                                this.addScope(name_833, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong class field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_788);
                                };
                                for (const field of $toIterator(f_808)) {
                                    const temp_834 = field;
                                    switch (temp_834&&temp_834[0]) {
                                    case 23: {
                                        {
                                            const name_835 = temp_834[1];
                                            const t_836 = temp_834[2];
                                            const e_837 = temp_834[3];
                                            const const_838 = temp_834[4];
                                            {
                                                let step_839 = 0;
                                                const t_840 = t_836;
                                                if (step_839 == 0 && t_840 != null) { step_839 = 1 };
                                                if (step_839 == 1) { this.types.set(field, this.toType(t_840, field)) };
                                            };
                                        }
                                    } break;

                                    case 21: {
                                        {
                                            const name_841 = temp_834[1];
                                            const expr_842 = temp_834[2];
                                            const vars_843 = temp_834[3];
                                            const rettype_844 = temp_834[4];
                                            {
                                                let step_845 = 0;
                                                const rettype_846 = rettype_844;
                                                let temp_847 = null;
                                                if (step_845 == 0 && rettype_846 != null) {
                                                    temp_847 = vars_843.length == 0;
                                                    step_845 = 1;
                                                };
                                                if (step_845 == 1 && temp_847 != false) { step_845 = 2 };
                                                if (step_845 == 2) { this.types.set(field, /*Function*/[12,[],this.toType(rettype_846, field)]) } else {
                                                    let step_848 = 0;
                                                    const rettype_849 = rettype_844;
                                                    if (step_848 == 0 && rettype_849 != null) { step_848 = 1 };
                                                    if (step_848 == 1) {
                                                        let typed_850 = true;
                                                        const typez = [];
                                                        for (const v of $toIterator(vars_843)) {
                                                            const temp_851 = v;
                                                            switch (temp_851&&temp_851[0]) {
                                                            case 23: {
                                                                {
                                                                    const name_852 = temp_851[1];
                                                                    const t_853 = temp_851[2];
                                                                    const e_854 = temp_851[3];
                                                                    const const_855 = temp_851[4];
                                                                    {
                                                                        let step_856 = 0;
                                                                        const type_857 = t_853;
                                                                        if (step_856 == 0 && type_857 != null) { step_856 = 1 };
                                                                        if (step_856 == 1) { typez.push(this.toType(type_857, v)) } else typed_850 = false;
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        };
                                                        if (typed_850) { this.types.set(field, /*Function*/[12,typez,this.toType(rettype_849, field)]) };
                                                    };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                                for (const field of $toIterator(f_808)) {
                                    const temp_858 = field;
                                    switch (temp_858&&temp_858[0]) {
                                    case 21: {
                                        {
                                            const name_859 = temp_858[1];
                                            const expr_860 = temp_858[2];
                                            const vars_861 = temp_858[3];
                                            const rettype_862 = temp_858[4];
                                            {
                                                if (name_859 == 'new') { type_795.constructor = type_795.fieldNames.length - 1 };
                                                if ((external_809) && (expr_860 != null)) { if (name_859 == 'new') { Typer.fail('External class constructor `new()` cannot have a body `{}`', field) } else Typer.fail(('External class method `function ' + (name_859) + '` cannot have a body `{}`'), field) };
                                                if ((!external_809) && (expr_860 == null)) { if (name_859 == 'new') { Typer.fail('Non-external class constructor `new()` should have a body `{}`', field) } else Typer.fail(('Non-external class method `function ' + (name_859) + '` should have a body `{}`'), field) };
                                                const _insideClassMethod = this.insideClassMethod;
                                                const _allowSuper = this.allowSuper;
                                                this.insideClassMethod = true;
                                                this.allowSuper = (extend_807 != null);
                                                if (!external_809) { this.fillFunction(field, expr_860, vars_861, rettype_862) };
                                                if ((external_809) && (this.types.get(field) == null)) { this.types.set(field, /*Function*/[12,[],rettype_862 != (null)? (this.toType(rettype_862, field)) : this.typeVoid]) };
                                                this.insideClassMethod = _insideClassMethod;
                                                this.allowSuper = _allowSuper;
                                            };
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_863 = temp_858[1];
                                            const t_864 = temp_858[2];
                                            const e_865 = temp_858[3];
                                            const const_866 = temp_858[4];
                                            {
                                                if ((external_809) && (e_865 != null)) { Typer.fail(('External class field `var ' + (name_863) + '` cannot have `= value`'), field) };
                                                const _insideClassMethod_867 = this.insideClassMethod;
                                                this.insideClassMethod = true;
                                                if (e_865 != null) { this.fillExpression(e_865) };
                                                this.insideClassMethod = _insideClassMethod_867;
                                                this.mixVarTypes(t_864, e_865, field);
                                                type_795.fieldInitialized[type_795.fieldNames.indexOf(name_863)] = true;
                                                if (this.types.get(field) == null) { Typer.fail(('Field `var ' + (name_863) + '` initialized, but got no type ') + e_865, field) };
                                            };
                                        }
                                    } break;

                                    case 26: {
                                        {
                                            const f_868 = temp_858[1];
                                            {
                                                const temp_869 = f_868;
                                                switch (temp_869&&temp_869[0]) {
                                                case 23: {
                                                    {
                                                        const name_870 = temp_869[1];
                                                        const t_871 = temp_869[2];
                                                        const e_872 = temp_869[3];
                                                        const const_873 = temp_869[4];
                                                        {
                                                            if ((external_809) && (e_872 != null)) { Typer.fail(('External class field `var ' + (name_870) + '` cannot have expression'), field) };
                                                            const _insideClassMethod_874 = this.insideClassMethod;
                                                            this.insideClassMethod = true;
                                                            if (e_872 != null) { this.fillExpression(e_872) };
                                                            this.insideClassMethod = _insideClassMethod_874;
                                                            this.mixVarTypes(t_871, e_872, f_868);
                                                            type_795.fieldInitialized[type_795.fieldNames.indexOf(name_870)] = true;
                                                            if (this.types.get(f_868) == null) { Typer.fail(('Property `' + (name_870) + '` initialized, but got no type ') + e_872, field) };
                                                            this.types.set(field, this.types.get(f_868));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_875 = temp_858[1];
                                            {
                                                const temp_876 = f_875;
                                                switch (temp_876&&temp_876[0]) {
                                                case 21: {
                                                    {
                                                        const name_877 = temp_876[1];
                                                        const expr_878 = temp_876[2];
                                                        const vars_879 = temp_876[3];
                                                        const rettype_880 = temp_876[4];
                                                        {
                                                            if ((external_809) && (expr_878 != null)) { Typer.fail(('External class field `static function ' + (name_877) + '` cannot have a body'), field) };
                                                            const _insideClassMethod_881 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (!external_809) { this.fillFunction(f_875, expr_878, vars_879, rettype_880) };
                                                            if (external_809) { this.types.set(f_875, /*Function*/[12,[],rettype_880 != (null)? (this.toType(rettype_880, f_875)) : this.typeVoid]) };
                                                            this.insideClassMethod = _insideClassMethod_881;
                                                            if (this.types.get(f_875) == null) { Typer.fail('Function get no type: class ' + DataHelper.nameOf(node_788) + ' static ' + name_877, f_875) };
                                                            this.types.set(field, this.types.get(f_875));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_882 = temp_876[1];
                                                        const t_883 = temp_876[2];
                                                        const e_884 = temp_876[3];
                                                        const const_885 = temp_876[4];
                                                        {
                                                            if ((external_809) && (e_884 != null)) { Typer.fail(('External class field `static var ' + (name_882) + '` cannot have expression'), field) };
                                                            if (e_884 != null) { this.fillExpression(e_884) };
                                                            this.mixVarTypes(t_883, e_884, f_875);
                                                            this.types.set(field, this.types.get(f_875));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    Typer.fail('Wrong class field format', node_788)
                                    };
                                };
                                this.popScope();
                                if (!external_809) {
                                    let id = 0;
                                    let it_886 = 0;
                                    let at_887 = type_795.lateAssignRequired.length;
                                    while (it_886 < at_887) {
                                        id = it_886;
                                        it_886++;
                                        if (type_795.lateAssignRequired[id]) {};
                                    };
                                };
                            };
                        }
                    } break;

                    default:
                    Typer.fail('ClassType expects (declare) class node, but got ' + node_788, node_788)
                    };
                };
                this.thisType = _thisType;
                return type_795;
            };
        };
        registerEnumType(node_888) {
            let step_889 = 0;
            const type_890 = this.types.get(node_888);
            if (step_889 == 0 && type_890 != null) { step_889 = 1 };
            if (step_889 == 1) {
                const temp_891 = type_890;
                switch (temp_891&&temp_891[0]) {
                case 6: {
                    {
                        const t_892 = temp_891[1];
                        return t_892;
                    }
                } break;
                };
            } else {
                const type_893 = new EnumType();
                type_893.parent = node_888;
                type_893.name = DataHelper.nameOf(node_888);
                this.types.set(node_888, /*Enum*/[6,type_893]);
                let tag_894 = 0;
                {
                    const temp_895 = node_888;
                    switch (temp_895&&temp_895[0]) {
                    case 37: {
                        {
                            const t_896 = temp_895[1];
                            const f_897 = temp_895[2];
                            const valuesType_898 = temp_895[3];
                            const extend_899 = temp_895[4];
                            {
                                let valuesType_900 = valuesType_898;
                                {
                                    let step_901 = 0;
                                    const ext_902 = extend_899;
                                    if (step_901 == 0 && ext_902 != null) { step_901 = 1 };
                                    if (step_901 == 1) {
                                        const parent_903 = this.toType(ext_902, node_888);
                                        if (valuesType_900 != null) { Typer.fail(('Simple enums which extend other enums should not have `: ' + (NodeType.stringify(valuesType_900)) + '`'), node_888) };
                                        {
                                            const temp_904 = parent_903;
                                            switch (temp_904&&temp_904[0]) {
                                            case 6: {
                                                {
                                                    const etype = temp_904[1];
                                                    {
                                                        let step_905 = 0;
                                                        const vts = etype.fieldsTypeSimple;
                                                        if (step_905 == 0 && vts != null) { step_905 = 1 };
                                                        if (step_905 == 1) {
                                                            const temp_906 = etype.parent;
                                                            switch (temp_906&&temp_906[0]) {
                                                            case 37: {
                                                                {
                                                                    const t_907 = temp_906[1];
                                                                    const f_908 = temp_906[2];
                                                                    const v_909 = temp_906[3];
                                                                    const extend_910 = temp_906[4];
                                                                    {
                                                                        valuesType_900 = v_909;
                                                                        type_893.extend = etype;
                                                                        if (etype.extend != null) { Typer.fail('Extending enum which extends other enum is not yet supported', node_888) };
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        } else Typer.fail(('Simple enum extends `' + (NodeType.stringify(extend_899)) + '` which is *not* simple enum and has no `: T` value type'), node_888);
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(('Simple enum extends `' + (NodeType.stringify(extend_899)) + '` which is *not* enum'), node_888)
                                            };
                                        };
                                    };
                                };
                                this.pushScope();
                                {
                                    let step_911 = 0;
                                    const valuesType_912 = valuesType_900;
                                    if (step_911 == 0 && valuesType_912 != null) { step_911 = 1 };
                                    if (step_911 == 1) { type_893.fieldsTypeSimple = this.toType(valuesType_912, node_888) };
                                };
                                if ((type_893.fieldsTypeSimple != null) && (type_893.fieldsTypeSimple != this.typeInt) && (type_893.fieldsTypeSimple != this.typeString)) { Typer.fail('Simple enums may be only of types `Int` and `String`', node_888) };
                                for (const field of $toIterator(f_897)) {
                                    {
                                        const temp_913 = field;
                                        switch (temp_913&&temp_913[0]) {
                                        case 48: {
                                            {
                                                const t_914 = temp_913[1];
                                                {
                                                    const temp_915 = t_914;
                                                    switch (temp_915&&temp_915[0]) {
                                                    case 1: {
                                                        {
                                                            const name_916 = temp_915[1];
                                                            {
                                                                if (type_893.fieldNames.includes(name_916)) { throw Typer.fail(('Field `' + (name_916) + '` already exists'), node_888) };
                                                                {
                                                                    let step_917 = 0;
                                                                    const extend_918 = type_893.extend;
                                                                    let temp_919 = null;
                                                                    if (step_917 == 0 && extend_918 != null) {
                                                                        temp_919 = extend_918.fieldNames.includes(name_916);
                                                                        step_917 = 1;
                                                                    };
                                                                    if (step_917 == 1 && temp_919 != false) { step_917 = 2 };
                                                                    if (step_917 == 2) { throw Typer.fail(('Field `' + (name_916) + '` already exists in parent type'), node_888) };
                                                                };
                                                                type_893.fieldNames.push(name_916);
                                                                type_893.fieldEnumConstructor[type_893.fieldNames.length - 1] = true;
                                                                type_893.tagBindVars[type_893.fieldNames.length - 1] = [];
                                                                type_893.tagBindVarsNames[type_893.fieldNames.length - 1] = [];
                                                                type_893.fieldType[type_893.fieldNames.length - 1] = /*EnumInstance*/[7,type_893,tag_894++];
                                                            };
                                                        }
                                                    } break;

                                                    default:
                                                    Typer.fail('Wrong enum constructor format, should be `Name`', node_888)
                                                    };
                                                };
                                            }
                                        } break;

                                        case 12: {
                                            {
                                                const e_920 = temp_913[1];
                                                const args_921 = temp_913[2];
                                                const argNames_922 = temp_913[3];
                                                {
                                                    if (valuesType_900 != null) { throw Typer.fail('Cannot use `Value(args)` format for simple enum', node_888) };
                                                    {
                                                        const temp_923 = e_920;
                                                        switch (temp_923&&temp_923[0]) {
                                                        case 48: {
                                                            {
                                                                const t_924 = temp_923[1];
                                                                {
                                                                    const temp_925 = t_924;
                                                                    switch (temp_925&&temp_925[0]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_926 = temp_925[1];
                                                                            {
                                                                                if (type_893.fieldNames.includes(name_926)) { throw Typer.fail(('Field `' + (name_926) + '` already exists'), node_888) };
                                                                                type_893.fieldNames.push(name_926);
                                                                                type_893.fieldEnumConstructor[type_893.fieldNames.length - 1] = true;
                                                                                type_893.fieldType[type_893.fieldNames.length - 1] = /*EnumConstructor*/[8,type_893,tag_894++];
                                                                                const tagBindVars = [];
                                                                                const tagBindVarsNames = [];
                                                                                type_893.tagBindVars[type_893.fieldNames.length - 1] = tagBindVars;
                                                                                type_893.tagBindVarsNames[type_893.fieldNames.length - 1] = tagBindVarsNames;
                                                                                if (args_921.length == 0) { Typer.fail('Enum constructor expects more than zero arguments `(value: Type)`', e_920) };
                                                                                {
                                                                                    let i_927 = 0;
                                                                                    let it_928 = 0;
                                                                                    let at_929 = args_921.length;
                                                                                    while (it_928 < at_929) {
                                                                                        i_927 = it_928;
                                                                                        it_928++;
                                                                                        {
                                                                                            if (argNames_922[i_927] == null) { Typer.fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args_921[i_927]) };
                                                                                            tagBindVars[i_927] = Typer.nodeToNodeType(args_921[i_927]);
                                                                                            tagBindVarsNames[i_927] = argNames_922[i_927];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        }
                                                                    } break;

                                                                    default:
                                                                    Typer.fail('Wrong enum constructor format, should be `Name(value: T)`', e_920)
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 9: {
                                            {
                                                const a_930 = temp_913[1];
                                                const op_931 = temp_913[2];
                                                const b_932 = temp_913[3];
                                                {
                                                    if (op_931 != 91) { Typer.fail(('Should use `Value = value` not `Value ' + (Token.stringify(op_931)) + ' value` format for enum tag value'), node_888) };
                                                    if (valuesType_900 == null) { Typer.fail('Cannot use `Value = value` format for complex enum', node_888) };
                                                    {
                                                        const temp_933 = a_930;
                                                        switch (temp_933&&temp_933[0]) {
                                                        case 48: {
                                                            {
                                                                const t_934 = temp_933[1];
                                                                {
                                                                    const temp_935 = t_934;
                                                                    switch (temp_935&&temp_935[0]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_936 = temp_935[1];
                                                                            {
                                                                                if (type_893.fieldNames.includes(name_936)) { Typer.fail(('Field `' + (name_936) + '` already exists'), node_888) };
                                                                                type_893.fieldNames.push(name_936);
                                                                                type_893.fieldEnumConstructor[type_893.fieldNames.length - 1] = true;
                                                                                {
                                                                                    const temp_937 = b_932;
                                                                                    switch (temp_937&&temp_937[0]) {
                                                                                    case 5: {
                                                                                        if (this.followAlias(type_893.fieldsTypeSimple) != this.typeInt) { Typer.fail(('`' + (name_936) + ' = value` expects constant value of type `' + (Type.stringify(type_893.fieldsTypeSimple)) + '`'), b_932) }
                                                                                    } break;

                                                                                    case 0: {
                                                                                        if (this.followAlias(type_893.fieldsTypeSimple) != this.typeString) { Typer.fail(('`' + (name_936) + ' = value` expects constant value of type `' + (Type.stringify(type_893.fieldsTypeSimple)) + '`'), b_932) }
                                                                                    } break;
                                                                                    };
                                                                                };
                                                                                this.fillExpression(b_932);
                                                                                type_893.fieldType[type_893.fieldNames.length - 1] = this.types.get(b_932);
                                                                            };
                                                                        }
                                                                    } break;
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 1: {
                                            {
                                                const name_938 = temp_913[1];
                                                Typer.fail(('Cannot use lowercase `' + (name_938) + '` format for enum values'), node_888);
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_939 = temp_913[1];
                                                {
                                                    const temp_940 = f_939;
                                                    switch (temp_940&&temp_940[0]) {
                                                    case 21: {
                                                        {
                                                            const name_941 = temp_940[1];
                                                            {
                                                                if (type_893.fieldNames.includes(name_941)) { Typer.fail(('Field `' + (name_941) + '` already exists'), node_888) };
                                                                type_893.fieldNames.push(name_941);
                                                                type_893.fieldStatic[type_893.fieldNames.length - 1] = true;
                                                                this.addScope(name_941, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_942 = temp_940[1];
                                                            {
                                                                if (type_893.fieldNames.includes(name_942)) { Typer.fail(('Field `' + (name_942) + '` already exists'), node_888) };
                                                                type_893.fieldNames.push(name_942);
                                                                type_893.fieldStatic[type_893.fieldNames.length - 1] = true;
                                                                this.addScope(name_942, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong enum field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_888);
                                };
                                for (const field of $toIterator(f_897)) {
                                    const temp_943 = field;
                                    switch (temp_943&&temp_943[0]) {
                                    case 21: {
                                        {
                                            const name_944 = temp_943[1];
                                            const expr_945 = temp_943[2];
                                            const vars_946 = temp_943[3];
                                            const rettype_947 = temp_943[4];
                                            this.fillFunction(field, expr_945, vars_946, rettype_947);
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_948 = temp_943[1];
                                            {
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_949 = temp_943[1];
                                            {
                                                const temp_950 = f_949;
                                                switch (temp_950&&temp_950[0]) {
                                                case 21: {
                                                    {
                                                        const name_951 = temp_950[1];
                                                        const expr_952 = temp_950[2];
                                                        const vars_953 = temp_950[3];
                                                        const rettype_954 = temp_950[4];
                                                        {
                                                            const _insideClassMethod_955 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (rettype_954 != null) { this.types.set(f_949, /*Function*/[12,[],this.toType(rettype_954, f_949)]) } else this.types.set(f_949, /*Function*/[12,[],this.typeVoid]);
                                                            this.types.set(field, this.types.get(f_949));
                                                            this.fillFunction(f_949, expr_952, vars_953, rettype_954);
                                                            this.insideClassMethod = _insideClassMethod_955;
                                                            if (this.types.get(f_949) == null) { Typer.fail('Function get no type: enum ' + DataHelper.nameOf(node_888) + ' static ' + name_951, f_949) };
                                                            this.types.set(field, this.types.get(f_949));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_956 = temp_950[1];
                                                        const t_957 = temp_950[2];
                                                        const e_958 = temp_950[3];
                                                        const const_959 = temp_950[4];
                                                        {
                                                            if (e_958 != null) { this.fillExpression(e_958) };
                                                            this.mixVarTypes(t_957, e_958, f_949);
                                                            this.types.set(field, this.types.get(f_949));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 48: {
                                        {
                                        }
                                    } break;

                                    case 12: {
                                        {
                                        }
                                    } break;

                                    case 9: {
                                        {
                                        }
                                    } break;

                                    default:
                                    {
                                        Typer.fail('Unknown enum field format ' + field, field);
                                        Typer.fail('Unknown enum field format', field);
                                    }
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    Typer.fail('EnumType expects (declare) enum node, but got ' + node_888, node_888)
                    };
                };
                return type_893;
            };
        };
        nameOfModuleItem(node_973) {
            const temp_974 = node_973;
            switch (temp_974&&temp_974[0]) {
            case 23: {
                {
                    const name_975 = temp_974[1];
                    return name_975;
                }
            } break;

            case 21: {
                {
                    const name_976 = temp_974[1];
                    {
                        let step_977 = 0;
                        const named = name_976;
                        if (step_977 == 0 && named != null) { step_977 = 1 };
                        if (step_977 == 1) { return named } else throw 'Module function should have a name';
                    };
                }
            } break;

            case 44: {
                {
                    const node_978 = temp_974[1];
                    {
                        const temp_979 = node_978;
                        switch (temp_979&&temp_979[0]) {
                        case 25: {
                            {
                                const t_980 = temp_979[1];
                                {
                                    const temp_981 = t_980;
                                    switch (temp_981&&temp_981[0]) {
                                    case 1: {
                                        {
                                            const name_982 = temp_981[1];
                                            return name_982;
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const name_983 = temp_981[1];
                                            return name_983;
                                        }
                                    } break;
                                    };
                                };
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 25: {
                {
                    const t_984 = temp_974[1];
                    {
                        const temp_985 = t_984;
                        switch (temp_985&&temp_985[0]) {
                        case 1: {
                            {
                                const name_986 = temp_985[1];
                                return name_986;
                            }
                        } break;

                        case 2: {
                            {
                                const name_987 = temp_985[1];
                                return name_987;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 37: {
                {
                    const t_988 = temp_974[1];
                    {
                        const temp_989 = t_988;
                        switch (temp_989&&temp_989[0]) {
                        case 1: {
                            {
                                const name_990 = temp_989[1];
                                return name_990;
                            }
                        } break;

                        case 2: {
                            {
                                const name_991 = temp_989[1];
                                return name_991;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 8: {
                {
                    const t_992 = temp_974[1];
                    {
                        const temp_993 = t_992;
                        switch (temp_993&&temp_993[0]) {
                        case 1: {
                            {
                                const name_994 = temp_993[1];
                                return name_994;
                            }
                        } break;

                        case 2: {
                            {
                                const name_995 = temp_993[1];
                                return name_995;
                            }
                        } break;
                        };
                    };
                }
            } break;

            default:
            {
                console.log('Improper', node_973, TestParser.stringify(node_973));
                Typer.fail('Improper module item format, wrap expressions as `{ expressions }`', node_973);
            }
            };
        };
        findInNamespaceRoots(name_996) {
            if (this.namespaces.get(name_996) != null) { return this.namespaces.get(name_996) };
            let m_997 = this.namespaces.get('');
            let el_998 = (null);
            {
                const temp_999 = m_997;
                switch (temp_999&&temp_999[0]) {
                case 35: {
                    {
                        const els_1000 = temp_999[2];
                        el_998 = els_1000;
                    }
                } break;

                default:
                return null
                };
            };
            for (const e of $toIterator(el_998)) if (name_996 == this.nameOfModuleItem(e)) { return e };
            return null;
        };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        addScope(name_1001, node_1002) { this.scopes[this.scopes.length - 1].set(name_1001, node_1002) };
        unify(to, from, node_1003) {
            if (to == from) { return to };
            if (to == this.typeAny) { return to };
            if (from == this.typeVoid) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and non-value type `Void`') + this.typeVoid, node_1003) };
            if ((to == this.typeFloat) && (from == this.typeInt)) { return this.typeFloat };
            const isNullable = (t_1004) => {
                {
                    const temp_1005 = t_1004;
                    switch (temp_1005&&temp_1005[0]) {
                    case 1: {
                        return true
                    } break;

                    case 2: {
                        return true
                    } break;
                    };
                };
                return false;
            };
            const unwrapNullable = (t_1006) => {
                {
                    const temp_1007 = t_1006;
                    switch (temp_1007&&temp_1007[0]) {
                    case 1: {
                        {
                            const handle = temp_1007[1];
                            return handle.value;
                        }
                    } break;

                    case 2: {
                        {
                            const t_1008 = temp_1007[1];
                            return t_1008;
                        }
                    } break;
                    };
                };
                return t_1006;
            };
            const instanceOfClass = (t_1009) => {
                {
                    const temp_1010 = unwrapNullable(t_1009);
                    switch (temp_1010&&temp_1010[0]) {
                    case 4: {
                        {
                            const t_1011 = temp_1010[1];
                            return t_1011;
                        }
                    } break;

                    case 3: {
                        {
                            const t_1012 = temp_1010[1];
                            Typer.fail(('Cannot take classes `class ' + (t_1012.name) + '` as values'), node_1003);
                        }
                    } break;
                    };
                };
                return null;
            };
            let toNullable = isNullable(to);
            let fromNullable = isNullable(from);
            if ((fromNullable) && (!toNullable)) {
                const temp_1013 = from;
                switch (temp_1013&&temp_1013[0]) {
                case 1: {
                    {
                        const handle_1014 = temp_1013[1];
                        if (handle_1014.value == null) { Typer.fail(('Cannot assign `null` to non-nullable `' + (Type.stringify(to)) + '`'), node_1003) };
                    }
                } break;
                };
            };
            let toInstance = instanceOfClass(to);
            let fromInstance = instanceOfClass(from);
            if (toInstance == null || fromInstance == null) { return (() => {
                const result_1015 = to;
                if (result_1015 != null) { return result_1015 };
                return from;
            })() };
            //if ((toInstance != fromInstance) && (to != this.typeAny) && (from != this.typeAny)) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and value of `' + (Type.stringify(from)) + '`'), node_1003) };
            return (() => {
                const result_1016 = to;
                if (result_1016 != null) { return result_1016 };
                return from;
            })();
        };
        findType(name_1017) {
            {
                let i_1018 = 0;
                let it_1019 = 0;
                let at_1020 = this.scopes.length;
                while (it_1019 < at_1020) {
                    i_1018 = it_1019;
                    it_1019++;
                    {
                        let step_1021 = 0;
                        const subj_1022 = this.scopes[this.scopes.length - i_1018 - 1].get(name_1017);
                        if (step_1021 == 0 && subj_1022 != null) { step_1021 = 1 };
                        if (step_1021 == 1) { return subj_1022 };
                    };
                };
            };
            return this.findInNamespaceRoots(name_1017);
        };
        toType(t_1023, node_1024) {
            const temp_1025 = t_1023;
            switch (temp_1025&&temp_1025[0]) {
            case 1: {
                {
                    const name_1026 = temp_1025[1];
                    {
                        const nodeType = this.findType(name_1026);
                        if (this.types.get(nodeType) == null) {
                            const temp_1027 = nodeType;
                            switch (temp_1027&&temp_1027[0]) {
                            case 25: {
                                this.registerClassType(nodeType)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType)
                            } break;
                            };
                        };
                        {
                            const temp_1028 = this.types.get(nodeType);
                            switch (temp_1028&&temp_1028[0]) {
                            case 3: {
                                {
                                    const type_1029 = temp_1028[1];
                                    return type_1029.instantiate();
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1030 = temp_1028[1];
                                    return this.types.get(nodeType);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                    if (this.typeAny == null) { this.typeAny = this.registerClassType(this.findInNamespaceRoots('Any')).instantiate() };
                                    if (this.typeAny == null) { Typer.fail('still, typeAny == null', node_1024) };
                                    if (name_1026 == 'T') { return this.typeAny };
                                    if (name_1026 == 'V') { return this.typeAny };
                                    if (name_1026 == 'K') { return this.typeAny };
                                    Typer.fail(('Cannot find type `' + (name_1026) + '`'), node_1024);
                                }
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_1026) + '`'), node_1024)
                            };
                        };
                    };
                }
            } break;

            case 2: {
                {
                    const name_1031 = temp_1025[1];
                    const params_1032 = temp_1025[2];
                    {
                        const nodeType_1033 = this.findType(name_1031);
                        if (this.types.get(nodeType_1033) == null) {
                            const temp_1034 = nodeType_1033;
                            switch (temp_1034&&temp_1034[0]) {
                            case 25: {
                                this.registerClassType(nodeType_1033)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType_1033)
                            } break;
                            };
                        };
                        {
                            const temp_1035 = this.types.get(nodeType_1033);
                            switch (temp_1035&&temp_1035[0]) {
                            case 3: {
                                {
                                    const type_1036 = temp_1035[1];
                                    return type_1036.instantiateGeneric((() => {
                                        const result_1037 = [];
                                        const value_1038 = params_1032;
                                        for (const p of $toIterator(value_1038)) result_1037.push(this.toType(p, node_1024));
                                        return result_1037;
                                    })());
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Cannot find type `' + (name_1031) + '`'), node_1024)
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_1031) + '`'), node_1024)
                            };
                        };
                    };
                }
            } break;

            case 0: {
                {
                    const t_1039 = temp_1025[1];
                    return /*Nullable*/[2,this.toType(t_1039, node_1024)];
                }
            } break;

            case 3: {
                {
                    const args_1040 = temp_1025[1];
                    const ret = temp_1025[2];
                    return /*Function*/[12,(() => {
                        const result_1041 = [];
                        const value_1042 = args_1040;
                        for (const arg of $toIterator(value_1042)) result_1041.push(this.toType(arg, node_1024));
                        return result_1041;
                    })(),this.toType(ret, node_1024)];
                }
            } break;

            case 5: {
                {
                    const names_1043 = temp_1025[1];
                    const el_1044 = temp_1025[2];
                    {
                        const els_1045 = (() => {
                            const result_1046 = [];
                            const value_1047 = el_1044;
                            for (const e of $toIterator(value_1047)) result_1046.push(this.toType(e, node_1024));
                            return result_1046;
                        })();
                        return /*Struct*/[19,names_1043,els_1045];
                    };
                }
            } break;

            default:
            Typer.fail('Unsupported node type ' + t_1023 + Typer.never, node_1024)
            };
        };
        mixVarTypes(t_1048, e_1049, node_1050) {
            if ((t_1048 != null) && (e_1049 != null)) { this.types.set(node_1050, this.unify(this.toType(t_1048, node_1050), this.types.get(e_1049), e_1049)) };
            if ((t_1048 == null) && (e_1049 != null)) { this.types.set(node_1050, this.types.get(e_1049)) };
            if ((t_1048 == null) && (e_1049 == null)) { this.types.set(node_1050, /*UnknownNullable*/[1,{value:null}]) };
            if ((t_1048 != null) && (e_1049 == null)) { this.types.set(node_1050, this.toType(t_1048, node_1050)) };
        };
        followAlias(type_1051) { return type_1051 };
        fillFunction(node_1052, expr_1053, vars_1054, rettype_1055, arrow) {
            this.pushScope();
            const _insideFunction = this.insideFunction;
            const _functionAllowedToThrow = this.functionAllowedToThrow;
            const _functionThrows = this.functionThrows;
            const _functionReturnsAType = this.functionReturnsAType;
            const _functionActuallyReturns = this.functionActuallyReturns;
            const _insideTry = this.insideTry;
            {
                let i_1056 = 0;
                let it_1057 = 0;
                let at_1058 = vars_1054.length;
                while (it_1057 < at_1058) {
                    i_1056 = it_1057;
                    it_1057++;
                    {
                        const v_1059 = vars_1054[i_1056];
                        {
                            const temp_1060 = v_1059;
                            switch (temp_1060&&temp_1060[0]) {
                            case 23: {
                                {
                                    const vname_1061 = temp_1060[1];
                                    const t_1062 = temp_1060[2];
                                    const e_1063 = temp_1060[3];
                                    const const_1064 = temp_1060[4];
                                    {
                                        if ((t_1062 != null) && (this.toType(t_1062, v_1059) == this.typeVoid)) { Typer.fail('Argument cannot be of type `Void`', v_1059) };
                                        if (e_1063 != null) { this.fillExpression(e_1063) };
                                        if (t_1062 != null) { this.types.set(v_1059, this.toType(t_1062, v_1059)) };
                                        this.addScope(vname_1061, v_1059);
                                    };
                                }
                            } break;
                            };
                        };
                    };
                };
            };
            let ret_1065 = null;
            {
                let step_1066 = 0;
                const rt = rettype_1055;
                if (step_1066 == 0 && rt != null) { step_1066 = 1 };
                if (step_1066 == 1) { ret_1065 = this.toType(rt, node_1052) };
            };
            this.functionReturnsAType = ret_1065;
            this.functionActuallyReturns = false;
            const atts_1067 = Project.mapAttributes.get(node_1052);
            {
                let step_1068 = 0;
                const noThrow = DataHelper.getAttribute(atts_1067, 'noThrow');
                if (step_1068 == 0 && noThrow != null) { step_1068 = 1 };
                if (step_1068 == 1) {
                    if (noThrow.values.length > 0) { Typer.fail('Attribute `@noThrow` should have no parameters', node_1052) };
                    this.functionAllowedToThrow = false;
                } else this.functionAllowedToThrow = true;
            };
            {
                let step_1069 = 0;
                const throws = DataHelper.getAttribute(atts_1067, 'throws');
                if (step_1069 == 0 && throws != null) { step_1069 = 1 };
                if (step_1069 == 1) {
                    if (this.functionAllowedToThrow == false) { Typer.fail('Attribute `@noThrow` cannot be used with `@throws`', node_1052) };
                    this.functionThrows = true;
                } else this.functionThrows = false;
            };
            this.insideFunction = true;
            this.insideTry = false;
            if ((arrow) && (expr_1053 != null)) {
                const _insideArrow = this.insideArrow;
                this.insideArrow = true;
                this.fillExpression(expr_1053);
                this.insideArrow = _insideArrow;
            };
            if ((!arrow) && (expr_1053 != null)) { this.fill(expr_1053) };
            this.popScope();
            ret_1065 = this.functionReturnsAType;
            if (ret_1065 == null) { ret_1065 = this.typeVoid };
            if ((ret_1065 != this.typeVoid) && (expr_1053 != null) && (this.functionActuallyReturns == false)) { Typer.fail(('Function expects result of `' + (Type.stringify(ret_1065)) + '` but never does `return value`'), node_1052) };
            this.insideFunction = _insideFunction;
            this.functionReturnsAType = _functionReturnsAType;
            this.functionActuallyReturns = _functionActuallyReturns;
            this.types.set(node_1052, /*Function*/[12,(() => {
                const result_1070 = [];
                const value_1071 = vars_1054;
                for (const v of $toIterator(value_1071)) result_1070.push(this.types.get(v));
                return result_1070;
            })(),ret_1065,node_1052]);
        };
        fill(node_1072) {
            const temp_1073 = node_1072;
            switch (temp_1073&&temp_1073[0]) {
            case 25: {
                {
                    const t_1074 = temp_1073[1];
                    const extend_1075 = temp_1073[2];
                    const implement_1076 = temp_1073[3];
                    const f_1077 = temp_1073[4];
                    const external_1078 = temp_1073[5];
                    {
                        this.addScope(DataHelper.extractTypeName(t_1074), node_1072);
                        this.registerClassType(node_1072);
                    };
                }
            } break;

            case 37: {
                {
                    const t_1079 = temp_1073[1];
                    const f_1080 = temp_1073[2];
                    const valuesType_1081 = temp_1073[3];
                    {
                        this.addScope(DataHelper.extractTypeName(t_1079), node_1072);
                        this.registerEnumType(node_1072);
                    };
                }
            } break;

            case 8: {
                {
                    const alias = temp_1073[1];
                    const value_1082 = temp_1073[2];
                    {
                        this.types.set(node_1072, /*Alias*/[9,null]);
                        this.addScope(this.nameOfModuleItem(node_1072), node_1072);
                    };
                }
            } break;

            case 24: {
                {
                    const e_1083 = temp_1073[1];
                    for (const ee of $toIterator(e_1083)) this.fill(ee);
                }
            } break;

            case 11: {
                {
                    const el_1084 = temp_1073[1];
                    {
                        this.pushScope();
                        for (const e of $toIterator(el_1084)) this.fill(e);
                        this.popScope();
                    };
                }
            } break;

            case 23: {
                {
                    const name_1085 = temp_1073[1];
                    const t_1086 = temp_1073[2];
                    const e_1087 = temp_1073[3];
                    const const_1088 = temp_1073[4];
                    const external_1089 = temp_1073[5];
                    {
                        if ((e_1087 == null) && (const_1088) && (!external_1089)) { Typer.fail(('Constant should have a value `let ' + (name_1085) + ' = value`'), node_1072) };
                        if ((e_1087 != null) && (external_1089)) { Typer.fail(('External variable should not have a value `declare let ' + (name_1085) + '`'), node_1072) };
                        if ((t_1086 == null) && (external_1089)) { Typer.fail(('External variable should have a type `declare let ' + (name_1085) + ': T`'), node_1072) };
                        if (e_1087 != null) {
                            this.pushScope();
                            this.fillExpression(e_1087);
                            this.popScope();
                        };
                        this.mixVarTypes(t_1086, e_1087, node_1072);
                        this.addScope(name_1085, node_1072);
                    };
                }
            } break;

            case 9: {
                {
                    const a_1090 = temp_1073[1];
                    const op_1091 = temp_1073[2];
                    const b_1092 = temp_1073[3];
                    {
                        this.fillExpression(a_1090);
                        this.fillExpression(b_1092);
                        let parent_1093 = this.parents.get(a_1090);
                        if (op_1091 == 91) {
                            const temp_1094 = parent_1093;
                            switch (temp_1094&&temp_1094[0]) {
                            case null: case undefined: {
                                {
                                }
                            } break;

                            case 23: {
                                {
                                    const name_1095 = temp_1094[1];
                                    const const_1096 = temp_1094[4];
                                    {
                                        if (const_1096) { Typer.fail(('Cannot reassign a constant `let ' + (name_1095) + '`, redefine it as `var ' + (name_1095) + '` to allow reassignment\n') + Typer.positionOf(parent_1093) + ('`let ' + (name_1095) + '` is defined here'), node_1072) };
                                        this.types.set(node_1072, this.unify(this.types.get(a_1090), this.types.get(b_1092), b_1092));
                                        {
                                            let step_1097 = 0;
                                            const pp = this.parents.get(parent_1093);
                                            let type_1098 = null;
                                            if (step_1097 == 0 && pp != null) {
                                                type_1098 = this.types.get(pp);
                                                step_1097 = 1;
                                            };
                                            if (step_1097 == 1 && type_1098 != null) { step_1097 = 2 };
                                            if (step_1097 == 2) {
                                                const temp_1099 = type_1098;
                                                switch (temp_1099&&temp_1099[0]) {
                                                case 3: {
                                                    {
                                                        const type_1100 = temp_1099[1];
                                                        type_1100.lateAssignRequired[type_1100.fieldNames.indexOf(name_1095)] = false;
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                    const name_1101 = temp_1094[1];
                                    Typer.fail(('Cannot reassign case parameter `' + (name_1101) + '`'), node_1072);
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1102 = temp_1094[1];
                                    Typer.fail(('Cannot reassign a function `' + (name_1102) + '`'), node_1072);
                                }
                            } break;

                            case 25: {
                                Typer.fail('Cannot reassign class', node_1072)
                            } break;

                            case 37: {
                                Typer.fail('Cannot reassign enum', node_1072)
                            } break;

                            case 46: {
                                {
                                    const name_1103 = temp_1094[1];
                                    Typer.fail(('Cannot reassign iterator value `' + (name_1103) + '` of for loop\n') + Typer.positionOf(parent_1093) + ('`for (' + (name_1103) + ' in ...)` is defined here'), node_1072);
                                }
                            } break;

                            case 43: {
                                {
                                }
                            } break;

                            case 4: {
                                Typer.fail('Cannot reassign `super`', node_1072)
                            } break;

                            default:
                            Typer.fail('`=` not implemented for: ' + parent_1093, node_1072)
                            };
                        };
                    };
                }
            } break;

            case 17: {
                if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `break` outside of loop', node_1072) }
            } break;

            case 46: {
                {
                    const name_1104 = temp_1073[1];
                    const over_1105 = temp_1073[2];
                    const by_1106 = temp_1073[3];
                    const range_1107 = temp_1073[4];
                    {
                        this.pushScope();
                        this.fillExpression(over_1105);
                        {
                            const temp_1108 = this.types.get(over_1105);
                            switch (temp_1108&&temp_1108[0]) {
                            case 4: {
                                {
                                    const type_1109 = temp_1108[1];
                                    const generic_1110 = temp_1108[2];
                                    if ((generic_1110 != null) && (generic_1110.length == 1)) { this.types.set(node_1072, generic_1110[0]) } else if (generic_1110 == null) { this.types.set(node_1072, this.types.get(over_1105)) } else {
                                        Typer.fail('Type of iterable is neither Int nor Array ' + Type.stringify(this.types.get(over_1105)), over_1105);
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            {
                                console.log('' + this.types.get(over_1105), over_1105);
                                Typer.fail('Type of iterable is neiter Int nor Array', over_1105);
                            }
                            };
                        };
                        {
                            let step_1111 = 0;
                            const range_1112 = range_1107;
                            if (step_1111 == 0 && range_1112 != null) { step_1111 = 1 };
                            if (step_1111 == 1) {
                                this.fillExpression(range_1112);
                                this.types.set(node_1072, this.toType(/*Type*/[1,'Int'], node_1072));
                            };
                        };
                        this.addScope(name_1104, node_1072);
                        const _allowBreakAndContinue = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(by_1106);
                        this.allowBreakAndContinue = _allowBreakAndContinue;
                        this.popScope();
                    };
                }
            } break;

            case 21: {
                {
                    const name_1113 = temp_1073[1];
                    const expr_1114 = temp_1073[2];
                    const vars_1115 = temp_1073[3];
                    const rettype_1116 = temp_1073[4];
                    const external_1117 = temp_1073[5];
                    {
                        if ((!external_1117) && (expr_1114 == null)) { Typer.fail(('Non-external function `' + (name_1113) + '` should have a body'), node_1072) };
                        if ((external_1117) && (rettype_1116 == null)) { Typer.fail(('External function `' + (name_1113) + '` should have a returning type'), node_1072) };
                        this.addScope(name_1113, node_1072);
                        this.fillFunction(node_1072, expr_1114, vars_1115, rettype_1116);
                        if (false) {
                            const _insideFunction_1118 = this.insideFunction;
                            this.insideFunction = true;
                            this.pushScope();
                            if (expr_1114 != null) { this.fill(expr_1114) };
                            this.popScope();
                            this.insideFunction = _insideFunction_1118;
                        };
                    };
                }
            } break;

            case 13: {
                {
                    const econd_1119 = temp_1073[1];
                    const eif_1120 = temp_1073[2];
                    const eelse_1121 = temp_1073[3];
                    {
                        let depth = 0;
                        for (const e of $toIterator(econd_1119)) {
                            const temp_1122 = e;
                            switch (temp_1122&&temp_1122[0]) {
                            case 23: {
                                {
                                    const name_1123 = temp_1122[1];
                                    const t_1124 = temp_1122[2];
                                    const expr_1125 = temp_1122[3];
                                    const const_1126 = temp_1122[4];
                                    {
                                        if (!const_1126) { Typer.fail('Only if-let bindings supported, not if-var', node_1072) };
                                        if (t_1124 != null) { Typer.fail('Do not specify a type `: T` in if-let bindings', node_1072) };
                                        if (expr_1125 == null) { Typer.fail(('if-let binding should have a value `' + (name_1123) + ' = value'), node_1072) };
                                        depth++;
                                        this.pushScope();
                                        this.pushScope();
                                        this.fillExpression(expr_1125);
                                        this.popScope();
                                        {
                                            const temp_1127 = this.types.get(expr_1125);
                                            switch (temp_1127&&temp_1127[0]) {
                                            case 2: {
                                                {
                                                    const t_1128 = temp_1127[1];
                                                    this.types.set(e, t_1128);
                                                }
                                            } break;

                                            default:
                                            this.types.set(e, this.types.get(expr_1125))
                                            };
                                        };
                                        this.addScope(name_1123, e);
                                    };
                                }
                            } break;

                            default:
                            {
                                this.fillExpression(e);
                                const type_1129 = this.types.get(e);
                                if ((type_1129 != this.typeBool) && (type_1129 != this.typeAny) && (type_1129 != null)) { Typer.fail('`if (value)` expects `value` only of type `Bool`, but got `' + Type.stringify(this.types.get(e)) + '`', e) };
                            }
                            };
                        };
                        this.fill(eif_1120);
                        while (depth > 0) {
                            depth--;
                            this.popScope();
                        };
                        if (eelse_1121 != null) { this.fill(eelse_1121) };
                    };
                }
            } break;

            case 34: {
                {
                    const exprs_1130 = temp_1073[1];
                    const conds_1131 = temp_1073[2];
                    const guards_1132 = temp_1073[3];
                    const cases_1133 = temp_1073[4];
                    this.fillSwitch(node_1072, false);
                }
            } break;

            case 27: {
                {
                    const e_1134 = temp_1073[1];
                    const t_1135 = temp_1073[2];
                    const v_1136 = temp_1073[3];
                    const ca = temp_1073[4];
                    {
                        const _insideTry_1137 = this.insideTry;
                        this.insideTry = true;
                        this.fill(e_1134);
                        this.insideTry = _insideTry_1137;
                        {
                            let i_1138 = 0;
                            let it_1139 = 0;
                            let at_1140 = ca.length;
                            while (it_1139 < at_1140) {
                                i_1138 = it_1139;
                                it_1139++;
                                {
                                    const type_1141 = this.toType(t_1135[i_1138], ca[i_1138]);
                                    {
                                        const temp_1142 = type_1141;
                                        switch (temp_1142&&temp_1142[0]) {
                                        case 19: {
                                            Typer.fail('Catch type must be a specific class, not `{}`', ca[i_1138])
                                        } break;

                                        case 12: {
                                            Typer.fail('Catch type must be a specific class, not function', ca[i_1138])
                                        } break;
                                        };
                                    };
                                    this.types.set(t_1135[i_1138], type_1141);
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1136[i_1138]), v_1136[i_1138]);
                                    this.fill(ca[i_1138]);
                                    this.popScope();
                                };
                            };
                        };
                        this.types.set(node_1072, this.typeVoid);
                    };
                }
            } break;

            case 20: {
                {
                    const econd_1143 = temp_1073[1];
                    const e_1144 = temp_1073[2];
                    const pre_1145 = temp_1073[3];
                    {
                        if (pre_1145 == true) { this.fillExpression(econd_1143) };
                        const _allowBreakAndContinue_1146 = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(e_1144);
                        this.allowBreakAndContinue = _allowBreakAndContinue_1146;
                        if (pre_1145 == false) { this.fillExpression(econd_1143) };
                        this.types.set(node_1072, this.typeVoid);
                    };
                }
            } break;

            case 18: {
                {
                    this.types.set(node_1072, this.typeVoid);
                    if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `continue` outside of loop', node_1072) };
                }
            } break;

            default:
            this.fillExpression(node_1072)
            };
        };
        fillExpression(node_1147) {
            const temp_1148 = node_1147;
            switch (temp_1148&&temp_1148[0]) {
            case 1: {
                {
                    const name_1149 = temp_1148[1];
                    {
                        let subj_1150 = null;
                        {
                            let i_1151 = 0;
                            let it_1152 = 0;
                            let at_1153 = this.scopes.length;
                            while (it_1152 < at_1153) {
                                i_1151 = it_1152;
                                it_1152++;
                                {
                                    subj_1150 = this.scopes[this.scopes.length - i_1151 - 1].get(name_1149);
                                    if (subj_1150 != null) { break };
                                };
                            };
                        };
                        if (subj_1150 == null) { subj_1150 = this.findInNamespaceRoots(name_1149) };
                        if ((subj_1150 == null) && (name_1149 == 'const')) { Typer.fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node_1147) };
                        if (subj_1150 == null) { Typer.fail(('Cannot find variable with name `' + (name_1149) + '`'), node_1147) };
                        if ((this.parents.get(node_1147) != null) && (this.parents.get(node_1147) != subj_1150)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1147)) + ' to ' + (subj_1150) + ' for node ' + (node_1147) + '') + Typer.never, node_1147) };
                        this.parents.set(node_1147, subj_1150);
                        {
                            let step_1154 = 0;
                            const type_1155 = this.types.get(subj_1150);
                            if (step_1154 == 0 && type_1155 != null) { step_1154 = 1 };
                            if (step_1154 == 1) { this.types.set(node_1147, type_1155) } else {
                                const v_1156 = '' + subj_1150;
                                {
                                };
                            };
                        };
                    };
                }
            } break;

            case 22: {
                {
                    const expr_1157 = temp_1148[1];
                    const vars_1158 = temp_1148[2];
                    const rettype_1159 = temp_1148[3];
                    this.fillFunction(node_1147, expr_1157, vars_1158, rettype_1159, true);
                }
            } break;

            case 21: {
                {
                    const name_1160 = temp_1148[1];
                    const expr_1161 = temp_1148[2];
                    const vars_1162 = temp_1148[3];
                    const rettype_1163 = temp_1148[4];
                    const external_1164 = temp_1148[5];
                    {
                        if (external_1164) { Typer.fail(('External function `declare function ' + (name_1160) + '` cannot be taken as a value'), node_1147) };
                        this.fillFunction(node_1147, expr_1161, vars_1162, rettype_1163);
                        if (false) {
                            this.pushScope();
                            this.addScope(name_1160, node_1147);
                            const _insideFunction_1165 = this.insideFunction;
                            this.insideFunction = true;
                            if (expr_1161 != null) { this.fill(expr_1161) };
                            this.popScope();
                            this.insideFunction = _insideFunction_1165;
                        };
                    };
                }
            } break;

            case 31: {
                {
                    const el_1166 = temp_1148[1];
                    {
                        const temp_1167 = el_1166[0];
                        switch (temp_1167&&temp_1167[0]) {
                        case 46: {
                            {
                                const name_1168 = temp_1167[1];
                                const over_1169 = temp_1167[2];
                                const by_1170 = temp_1167[3];
                                const range_1171 = temp_1167[4];
                                {
                                    if (el_1166.length > 1) { Typer.fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el_1166[1]) };
                                    if (range_1171 != null) { Typer.fail('Ranges `...range` are not supported here yet', range_1171) };
                                    this.pushScope();
                                    this.fillExpression(over_1169);
                                    this.types.set(el_1166[0], this.types.get(over_1169));
                                    this.addScope(name_1168, el_1166[0]);
                                    const _allowBreakAndContinue_1172 = this.allowBreakAndContinue;
                                    this.allowBreakAndContinue = false;
                                    this.fillExpression(by_1170);
                                    this.allowBreakAndContinue = _allowBreakAndContinue_1172;
                                    this.popScope();
                                    this.types.set(node_1147, this.typeArray.instantiateGeneric([this.types.get(by_1170)]));
                                };
                            }
                        } break;

                        default:
                        {
                            for (const e of $toIterator(el_1166)) this.fillExpression(e);
                            if (this.typeArray == null) { Typer.fail('typeArray instantiateGeneric is null <<<<<<<<<<<<<<<', node_1147) };
                            this.types.set(node_1147, this.typeArray.instantiateGeneric([this.types.get(el_1166[0])]));
                        }
                        };
                    };
                }
            } break;

            case 32: {
                {
                    const keys_1173 = temp_1148[1];
                    const values_1174 = temp_1148[2];
                    {
                        if (keys_1173.length == 0) {
                            this.types.set(node_1147, this.typeMap.instantiateGeneric([/*Unknown*/[0,{value:null}], /*Unknown*/[0,{value:null}]]));
                            return;
                        };
                        {
                            let i_1175 = 0;
                            let it_1176 = 0;
                            let at_1177 = keys_1173.length;
                            while (it_1176 < at_1177) {
                                i_1175 = it_1176;
                                it_1176++;
                                {
                                    this.fillExpression(keys_1173[i_1175]);
                                    this.fillExpression(values_1174[i_1175]);
                                };
                            };
                        };
                        this.types.set(node_1147, this.typeMap.instantiateGeneric([this.types.get(keys_1173[0]), this.types.get(values_1174[0])]));
                    };
                }
            } break;

            case 41: {
                {
                    const e_1178 = temp_1148[1];
                    const kind_1179 = temp_1148[2];
                    const t_1180 = temp_1148[3];
                    {
                        const type_1181 = this.toType(t_1180, node_1147);
                        if (type_1181 == this.typeVoid) { Typer.fail('Conversion `as Void` makes no sense', e_1178) };
                        this.fillExpression(e_1178);
                        if (this.types.get(e_1178) == this.typeVoid) { Typer.fail(('Conversion of `value as ' + (Type.stringify(t_1180)) + '` where `value` is of type `Void` makes no sense'), e_1178) };
                        this.types.set(t_1180, type_1181);
                        this.types.set(node_1147, type_1181);
                    };
                }
            } break;

            case 40: {
                {
                    const e_1182 = temp_1148[1];
                    const t_1183 = temp_1148[2];
                    {
                        const type_1184 = this.toType(t_1183, node_1147);
                        if (type_1184 == this.typeAny) { Typer.fail('Comparing `is Any` makes no sense, always true', e_1182) };
                        if (type_1184 == this.typeVoid) { Typer.fail('Comparing `is Void` makes no sense', e_1182) };
                        if (this.typeAny == null) { Typer.fail('typeAny == null', e_1182) };
                        if (this.typeVoid == null) { Typer.fail('typeVoid == null', e_1182) };
                        if (this.typeBool == null) { Typer.fail('typeBool == null', e_1182) };
                        this.fillExpression(e_1182);
                        this.types.set(t_1183, type_1184);
                        this.types.set(node_1147, this.typeBool);
                    };
                }
            } break;

            case 11: {
                {
                    const el_1185 = temp_1148[1];
                    if (el_1185.length == 0) { this.types.set(node_1147, /*Struct*/[19,[],[]]) } else {
                        this.pushScope();
                        {
                            let i_1186 = 0;
                            let it_1187 = 0;
                            let at_1188 = el_1185.length;
                            while (it_1187 < at_1188) {
                                i_1186 = it_1187;
                                it_1187++;
                                if (i_1186 < el_1185.length - 1) { this.fill(el_1185[i_1186]) };
                            };
                        };
                        const latest = el_1185[el_1185.length - 1];
                        this.fillExpression(latest);
                        this.types.set(node_1147, this.types.get(latest));
                        this.popScope();
                    };
                }
            } break;

            case 28: {
                {
                    const e_1189 = temp_1148[1];
                    const n_1190 = temp_1148[2];
                    {
                        {
                            const temp_1191 = e_1189;
                            switch (temp_1191&&temp_1191[0]) {
                            case 4: {
                                {
                                    if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1147) };
                                    {
                                        const temp_1192 = this.thisType;
                                        switch (temp_1192&&temp_1192[0]) {
                                        case 4: {
                                            {
                                                const type_1193 = temp_1192[1];
                                                {
                                                    {
                                                        let step_1194 = 0;
                                                        const extend_1195 = type_1193.extend;
                                                        if (step_1194 == 0 && extend_1195 != null) { step_1194 = 1 };
                                                        if (step_1194 == 1) {} else Typer.fail('Cannot access `super` from class which does not extend anything', node_1147);
                                                    };
                                                    return;
                                                };
                                            }
                                        } break;
                                        };
                                    };
                                    Typer.fail('Cannot access `super` not from class', node_1147);
                                }
                            } break;

                            default:
                            this.fillExpression(e_1189)
                            };
                        };
                        const etype_1196 = this.types.get(e_1189);
                        {
                            const temp_1197 = etype_1196;
                            switch (temp_1197&&temp_1197[0]) {
                            case 4: {
                                {
                                    const type_1198 = temp_1197[1];
                                    {
                                        type_1198.useless = false;
                                        if (etype_1196 == this.typeAny) {
                                            this.types.set(node_1147, this.typeAny);
                                            return;
                                        };
                                        const index_1199 = type_1198.fieldNames.indexOf(n_1190);
                                        if (index_1199 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1198.parent)) + '` has no field `.' + (n_1190) + '`\nAvailable fields are: ') + type_1198.fieldNames.join(', '), (() => {
                                            const result_1200 = e_1189;
                                            if (result_1200 != null) { return result_1200 };
                                            return node_1147;
                                        })()) };
                                        if (type_1198.fieldStatic[index_1199] == true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1198.parent)) + '` field `.' + (n_1190) + '` is static'), node_1147) };
                                        {
                                            const temp_1201 = type_1198.parent;
                                            switch (temp_1201&&temp_1201[0]) {
                                            case 25: {
                                                {
                                                    const t_1202 = temp_1201[1];
                                                    const extend_1203 = temp_1201[2];
                                                    const implement_1204 = temp_1201[3];
                                                    const fields_1205 = temp_1201[4];
                                                    const external_1206 = temp_1201[5];
                                                    {
                                                        this.registerClassType(type_1198.parent);
                                                        for (const field of $toIterator(fields_1205)) if (DataHelper.nameOf(field) == n_1190) {
                                                            this.types.set(node_1147, this.types.get(field));
                                                            this.parents.set(node_1147, field);
                                                            if (this.types.get(field) == null) {
                                                                console.log(Typer.positionOf(node_1147) + ('Note: field fieldInitialized[' + (n_1190) + '] ='), type_1198.fieldInitialized[type_1198.fieldNames.indexOf(n_1190)]);
                                                                Typer.fail('Type for this field is null: ' + n_1190, field);
                                                            };
                                                        };
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1198.parent, type_1198.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 3: {
                                {
                                    const type_1207 = temp_1197[1];
                                    {
                                        type_1207.useless = false;
                                        const index_1208 = type_1207.fieldNames.indexOf(n_1190);
                                        if (index_1208 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1207.parent)) + '` has no static field `.' + (n_1190) + '`\nAvailable fields are: ') + type_1207.fieldNames.join(', '), node_1147) };
                                        if (type_1207.fieldStatic[index_1208] != true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1207.parent)) + '` field `.' + (n_1190) + '` is not static'), node_1147) };
                                        {
                                            const temp_1209 = type_1207.parent;
                                            switch (temp_1209&&temp_1209[0]) {
                                            case 25: {
                                                {
                                                    const t_1210 = temp_1209[1];
                                                    const extend_1211 = temp_1209[2];
                                                    const implement_1212 = temp_1209[3];
                                                    const fields_1213 = temp_1209[4];
                                                    const external_1214 = temp_1209[5];
                                                    for (const field of $toIterator(fields_1213)) if (DataHelper.nameOf(field) == n_1190) {
                                                        this.types.set(node_1147, this.types.get(field));
                                                        this.parents.set(node_1147, field);
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1207.parent, type_1207.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1215 = temp_1197[1];
                                    {
                                        const index_1216 = type_1215.fieldNames.indexOf(n_1190);
                                        if (index_1216 < 0) { Typer.fail(('Enum `' + (type_1215.name) + '` has no field `.' + (n_1190) + '`'), node_1147) };
                                        if (type_1215.fieldStatic[index_1216] != true) { Typer.fail(('Enum field `.' + (n_1190) + '` is not static'), node_1147) };
                                        {
                                            const temp_1217 = type_1215.parent;
                                            switch (temp_1217&&temp_1217[0]) {
                                            case 37: {
                                                {
                                                    const t_1218 = temp_1217[1];
                                                    const fields_1219 = temp_1217[2];
                                                    const valuesType_1220 = temp_1217[3];
                                                    for (const field of $toIterator(fields_1219)) {
                                                        const temp_1221 = field;
                                                        switch (temp_1221&&temp_1221[0]) {
                                                        case 12: {
                                                            {
                                                            }
                                                        } break;

                                                        case 48: {
                                                            {
                                                            }
                                                        } break;

                                                        case 9: {
                                                            {
                                                            }
                                                        } break;

                                                        default:
                                                        if (DataHelper.nameOf(field) == n_1190) {
                                                            this.types.set(node_1147, this.types.get(field));
                                                            this.parents.set(node_1147, field);
                                                        }
                                                        };
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1215.parent, type_1215.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 19: {
                                {
                                    const names_1222 = temp_1197[1];
                                    const els_1223 = temp_1197[2];
                                    {
                                        const index_1224 = names_1222.indexOf(n_1190);
                                        if (index_1224 < 0) {
                                            let object_1225 = '';
                                            {
                                                const temp_1226 = e_1189;
                                                switch (temp_1226&&temp_1226[0]) {
                                                case 1: {
                                                    {
                                                        const name_1227 = temp_1226[1];
                                                        object_1225 = (' `' + (name_1227) + '`');
                                                    }
                                                } break;

                                                default:
                                                {
                                                }
                                                };
                                            };
                                            if (names_1222.length == 0) { Typer.fail(('Object' + (object_1225) + ' is empty `{}` and has no fields. Create object with all fields defined upfront, like this: `obj = { ' + (n_1190) + ': value }`'), node_1147) };
                                            if (names_1222.length != 0) { Typer.fail(('Object' + (object_1225) + ' has no field `.' + (n_1190) + '`\nAvailable fields are: ') + names_1222.join(', '), node_1147) };
                                        };
                                        this.types.set(node_1147, els_1223[index_1224]);
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 29: {
                {
                    const e_1228 = temp_1148[1];
                    const n_1229 = temp_1148[2];
                    {
                        {
                            const temp_1230 = e_1228;
                            switch (temp_1230&&temp_1230[0]) {
                            case 4: {
                                Typer.fail('Cannot access `super` here', node_1147)
                            } break;
                            };
                        };
                        this.fillExpression(e_1228);
                        {
                            const temp_1231 = this.types.get(e_1228);
                            switch (temp_1231&&temp_1231[0]) {
                            case 3: {
                                {
                                    const type_1232 = temp_1231[1];
                                    {
                                        const index_1233 = type_1232.fieldNames.indexOf(n_1229);
                                        if (index_1233 < 0) { Typer.fail(('Class has no field `.' + (n_1229) + '`'), node_1147) };
                                        if (type_1232.fieldStatic[index_1233] != true) { Typer.fail(('Class field `.' + (n_1229) + '` is not static'), node_1147) };
                                        Typer.fail('class.Upper', node_1147);
                                    };
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1234 = temp_1231[1];
                                    {
                                        const index_1235 = type_1234.fieldNames.indexOf(n_1229);
                                        if (index_1235 < 0) { Typer.fail(('Enum has no value constructor `.' + (n_1229) + '`'), node_1147) };
                                        if (type_1234.fieldEnumConstructor[index_1235] != true) { Typer.fail(('Enum field `.' + (n_1229) + '` is not a value constructor'), node_1147) };
                                        {
                                            let step_1236 = 0;
                                            const fieldType = type_1234.fieldType[index_1235];
                                            if (step_1236 == 0 && fieldType != null) { step_1236 = 1 };
                                            if (step_1236 == 1) { this.types.set(node_1147, fieldType) } else Typer.fail(('Enum field type is null for `' + (Node.stringify(node_1147)) + '`'), node_1147);
                                        };
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Doing .Upper `' + (Node.stringify(node_1147)) + '` over `' + (Node.stringify(e_1228)) + '` (' + (e_1228) + ') of type null'), node_1147)
                            } break;

                            default:
                            Typer.fail('?.Upper', node_1147)
                            };
                        };
                    };
                }
            } break;

            case 48: {
                {
                    const t_1237 = temp_1148[1];
                    {
                        const temp_1238 = t_1237;
                        switch (temp_1238&&temp_1238[0]) {
                        case 1: {
                            {
                                const name_1239 = temp_1238[1];
                                {
                                    const subj_1240 = this.find(name_1239);
                                    if (subj_1240 == null) { Typer.fail(('Cannot find type with name `' + (name_1239) + '`'), node_1147) };
                                    if ((this.parents.get(node_1147) != null) && (this.parents.get(node_1147) != subj_1240)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1147)) + ' to ' + (subj_1240) + ' for node ' + (node_1147) + '') + Typer.never, node_1147) };
                                    this.parents.set(node_1147, subj_1240);
                                    {
                                        let step_1241 = 0;
                                        const type_1242 = this.types.get(subj_1240);
                                        if (step_1241 == 0 && type_1242 != null) { step_1241 = 1 };
                                        if (step_1241 == 1) { this.types.set(node_1147, type_1242) } else {
                                            {
                                                const temp_1243 = subj_1240;
                                                switch (temp_1243&&temp_1243[0]) {
                                                case 25: {
                                                    this.registerClassType(subj_1240)
                                                } break;

                                                case 37: {
                                                    this.registerEnumType(subj_1240)
                                                } break;
                                                };
                                            };
                                            {
                                                let step_1244 = 0;
                                                const type_1245 = this.types.get(subj_1240);
                                                if (step_1244 == 0 && type_1245 != null) { step_1244 = 1 };
                                                if (step_1244 == 1) { this.types.set(node_1147, type_1245) } else {
                                                    console.log(Typer.positionOf(subj_1240) + ('' + (name_1239) + ' is here'));
                                                    Typer.fail(('Cannot find type for `' + (name_1239) + '` even after late build') + Typer.never, node_1147);
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                        } break;

                        case 2: {
                            {
                                const name_1246 = temp_1238[1];
                                Typer.fail(('Cannot use generic type `' + (name_1246) + '` as a value'), node_1147);
                            }
                        } break;

                        default:
                        Typer.fail('Cannot use this type as a value', node_1147)
                        };
                    };
                }
            } break;

            case 30: {
                {
                    const path_1247 = temp_1148[1];
                    const t_1248 = temp_1148[2];
                    const el_1249 = temp_1148[3];
                    const names_1250 = temp_1148[4];
                    const values_1251 = temp_1148[5];
                    {
                        const type_1252 = this.toType(t_1248, node_1147);
                        const subj_1253 = this.find(DataHelper.extractTypeName(t_1248));
                        this.parents.set(node_1147, subj_1253);
                        for (const e of $toIterator(el_1249)) this.fillExpression(e);
                        {
                            const temp_1254 = type_1252;
                            switch (temp_1254&&temp_1254[0]) {
                            case 4: {
                                {
                                    const type_1255 = temp_1254[1];
                                    {
                                        if (type_1255.constructor == -1) { Typer.fail('Cannot construct class without `new () {}` constructor', node_1147) };
                                        type_1255.useless = false;
                                    };
                                }
                            } break;

                            default:
                            Typer.fail('Constructor `new` may instantiate only classes', node_1147)
                            };
                        };
                        this.types.set(node_1147, type_1252);
                    };
                }
            } break;

            case 36: {
                {
                    const names_1256 = temp_1148[1];
                    const el_1257 = temp_1148[2];
                    {
                        {
                            let name_1258 = 0;
                            let it_1259 = 0;
                            let at_1260 = names_1256.length;
                            while (it_1259 < at_1260) {
                                name_1258 = it_1259;
                                it_1259++;
                                if (names_1256.indexOf(names_1256[name_1258]) != name_1258) { Typer.fail(('Field `' + (names_1256[name_1258]) + '` already exists'), node_1147) };
                            };
                        };
                        for (const e of $toIterator(el_1257)) this.fillExpression(e);
                        const els_1261 = (() => {
                            const result_1262 = [];
                            const value_1263 = el_1257;
                            for (const e of $toIterator(value_1263)) result_1262.push(this.types.get(e));
                            return result_1262;
                        })();
                        this.types.set(node_1147, /*Struct*/[19,names_1256,els_1261]);
                    };
                }
            } break;

            case 27: {
                {
                    const e_1264 = temp_1148[1];
                    const t_1265 = temp_1148[2];
                    const v_1266 = temp_1148[3];
                    const ca_1267 = temp_1148[4];
                    {
                        const _insideTry_1268 = this.insideTry;
                        this.insideTry = true;
                        this.fillExpression(e_1264);
                        this.insideTry = _insideTry_1268;
                        {
                            let i_1269 = 0;
                            let it_1270 = 0;
                            let at_1271 = ca_1267.length;
                            while (it_1270 < at_1271) {
                                i_1269 = it_1270;
                                it_1270++;
                                {
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1266[i_1269]), v_1266[i_1269]);
                                    this.fill(ca_1267[i_1269]);
                                    this.popScope();
                                };
                            };
                        };
                        this.types.set(node_1147, this.types.get(e_1264));
                    };
                }
            } break;

            case 13: {
                {
                    const econd_1272 = temp_1148[1];
                    const eif_1273 = temp_1148[2];
                    const eelse_1274 = temp_1148[3];
                    {
                        if (econd_1272.length > 1) { Typer.fail('More than one condition is not yet supported', econd_1272[1]) };
                        {
                            const temp_1275 = econd_1272[0];
                            switch (temp_1275&&temp_1275[0]) {
                            case 23: {
                                Typer.fail('Variable bindings in ternary conditions are not yet supported', econd_1272[0])
                            } break;
                            };
                        };
                        if (eelse_1274 == null) { Typer.fail('Expression `if` should have an `else` clause', eif_1273) };
                        this.fillExpression(econd_1272[0]);
                        this.fillExpression(eif_1273);
                        this.fillExpression(eelse_1274);
                        this.types.set(node_1147, this.unify(this.types.get(eif_1273), this.types.get(eelse_1274), eelse_1274));
                    };
                }
            } break;

            case 7: {
                this.types.set(node_1147, /*UnknownNullable*/[1,{value:null}])
            } break;

            case 0: {
                this.types.set(node_1147, this.typeString)
            } break;

            case 2: {
                this.types.set(node_1147, this.typeBool)
            } break;

            case 5: {
                this.types.set(node_1147, this.typeInt)
            } break;

            case 6: {
                this.types.set(node_1147, this.typeFloat)
            } break;

            case 14: {
                {
                    const e_1276 = temp_1148[1];
                    {
                        this.fillExpression(e_1276);
                        this.types.set(node_1147, this.types.get(e_1276));
                    };
                }
            } break;

            case 47: {
                {
                    const a_1277 = temp_1148[1];
                    const b_1278 = temp_1148[2];
                    {
                        this.fillExpression(a_1277);
                        this.fillExpression(b_1278);
                        this.unify(this.types.get(a_1277), this.types.get(b_1278), b_1278);
                        this.types.set(node_1147, this.types.get(b_1278));
                    };
                }
            } break;

            case 12: {
                {
                    const e_1279 = temp_1148[1];
                    const el_1280 = temp_1148[2];
                    const elNames = temp_1148[3];
                    {
                        {
                            const temp_1281 = e_1279;
                            switch (temp_1281&&temp_1281[0]) {
                            case 4: {
                                if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1147) }
                            } break;

                            default:
                            this.fillExpression(e_1279)
                            };
                        };
                        for (const e of $toIterator(el_1280)) this.fillExpression(e);
                        {
                            const temp_1282 = this.types.get(e_1279);
                            switch (temp_1282&&temp_1282[0]) {
                            case 12: {
                                {
                                    const args_1283 = temp_1282[1];
                                    const returns = temp_1282[2];
                                    {
                                        {
                                            let i_1284 = 0;
                                            let it_1285 = 0;
                                            let at_1286 = el_1280.length;
                                            while (it_1285 < at_1286) {
                                                i_1284 = it_1285;
                                                it_1285++;
                                                {
                                                    let step_1287 = 0;
                                                    const arg_1288 = args_1283[i_1284];
                                                    if (step_1287 == 0 && arg_1288 != null) { step_1287 = 1 };
                                                    if (step_1287 == 1) { this.unify(arg_1288, this.types.get(el_1280[i_1284]), el_1280[i_1284]) };
                                                };
                                            };
                                        };
                                        this.types.set(node_1147, returns);
                                    };
                                }
                            } break;

                            case 8: {
                                {
                                    const type_1289 = temp_1282[1];
                                    const tag_1290 = temp_1282[2];
                                    this.types.set(node_1147, /*EnumInstance*/[7,type_1289,tag_1290]);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            if (this.types.get(e_1279) == this.typeAny) { this.types.set(node_1147, this.typeAny) } else Typer.fail('Calling *not* a function, type is `' + Type.stringify(this.types.get(e_1279)) + '`', e_1279)
                            };
                        };
                    };
                }
            } break;

            case 9: {
                {
                    const a_1291 = temp_1148[1];
                    const op_1292 = temp_1148[2];
                    const b_1293 = temp_1148[3];
                    {
                        this.fill(a_1291);
                        this.fillExpression(b_1293);
                        if ((op_1292 == 111) && (this.types.get(a_1291) == this.typeString)) { this.types.set(node_1147, this.types.get(a_1291)) } else if (op_1292 == 97 || op_1292 == 96 || op_1292 == 100 || op_1292 == 99 || op_1292 == 92 || op_1292 == 93 || op_1292 == 95 || op_1292 == 103) { this.types.set(node_1147, this.typeBool) } else this.types.set(node_1147, (() => {
                            const result_1294 = this.types.get(b_1293);
                            if (result_1294 != null) { return result_1294 };
                            return this.types.get(a_1291);
                        })());
                    };
                }
            } break;

            case 19: {
                {
                    const op_1295 = temp_1148[1];
                    const postfix_1296 = temp_1148[2];
                    const e_1297 = temp_1148[3];
                    {
                        {
                            const temp_1298 = e_1297;
                            switch (temp_1298&&temp_1298[0]) {
                            case 19: {
                                {
                                    const ops = temp_1298[1];
                                    if (op_1295 == 87 || op_1295 == 86) { Typer.fail(('Cannot do `' + (Token.stringify(op_1295)) + 'value' + (Token.stringify(ops)) + '`'), e_1297) };
                                }
                            } break;
                            };
                        };
                        this.fillExpression(e_1297);
                        if ((op_1295 == 89) && (!postfix_1296)) {
                            const type_1299 = this.types.get(e_1297);
                            if ((type_1299 != this.typeBool) && (type_1299 != this.typeAny) && (type_1299 != null)) { Typer.fail(('Operator `!value` takes `value` of type `Bool` only, but got `' + (Type.stringify(this.types.get(e_1297))) + '`'), e_1297) };
                            this.types.set(node_1147, this.toType(/*Type*/[1,'Bool'], node_1147));
                            return;
                        };
                        this.types.set(node_1147, this.types.get(e_1297));
                        const mutates = op_1295 == 87 || op_1295 == 86;
                        if (!mutates) { return };
                        let parent_1300 = this.parents.get(e_1297);
                        {
                            const temp_1301 = parent_1300;
                            switch (temp_1301&&temp_1301[0]) {
                            case 23: {
                                {
                                    const name_1302 = temp_1301[1];
                                    const const_1303 = temp_1301[4];
                                    if (const_1303) { Typer.fail(('Cannot change a constant `let ' + (name_1302) + '`, redefine it as `var ' + (name_1302) + '` to allow value changes\n') + Typer.positionOf(parent_1300) + ('`let ' + (name_1302) + '` is defined here'), node_1147) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1304 = temp_1301[1];
                                    Typer.fail(('Cannot `' + (Token.stringify(op_1295)) + '` a function `' + (name_1304) + '`'), node_1147);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1305 = temp_1301[1];
                                    Typer.fail(('Cannot change iterator value `' + (name_1305) + '` of for loop\n') + Typer.positionOf(parent_1300) + ('`for (' + (name_1305) + ' in ...)` is defined here'), node_1147);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 33: {
                {
                    const e_1306 = temp_1148[1];
                    const i_1307 = temp_1148[2];
                    {
                        this.fillExpression(e_1306);
                        this.fillExpression(i_1307);
                        let indexableIsAny = false;
                        {
                            const temp_1308 = this.types.get(e_1306);
                            switch (temp_1308&&temp_1308[0]) {
                            case 4: {
                                {
                                    const type_1309 = temp_1308[1];
                                    const generic_1310 = temp_1308[2];
                                    if (type_1309.name == 'Any') { indexableIsAny = true };
                                }
                            } break;
                            };
                        };
                        if (!indexableIsAny) {
                            const temp_1311 = this.types.get(i_1307);
                            switch (temp_1311&&temp_1311[0]) {
                            case 4: {
                                {
                                    const type_1312 = temp_1311[1];
                                    if ((type_1312.name != 'Int') && (type_1312.name != 'Any')) { Typer.fail('`value[i]` expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1307)) + '`', e_1306) };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('`value[i]`????? expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1307)) + '`', e_1306)
                            };
                        };
                        {
                            const temp_1313 = this.types.get(e_1306);
                            switch (temp_1313&&temp_1313[0]) {
                            case 4: {
                                {
                                    const type_1314 = temp_1313[1];
                                    const generic_1315 = temp_1313[2];
                                    {
                                        if (!['Array', 'Buffer', 'Uint8Array', 'Uint32Array', 'Any'].includes(type_1314.name)) { Typer.fail('`value[i]` expects `value` only of type `Array`, but got `' + Type.stringify(this.types.get(e_1306)) + '`', e_1306) };
                                        if ((generic_1315 != null) && (generic_1315.length == 1)) { this.types.set(node_1147, generic_1315[0]) } else if (['Array', 'Buffer', 'Uint8Array', 'Uint32Array'].includes(type_1314.name)) { this.types.set(node_1147, this.toType(/*Type*/[1,'Int'], node_1147)) } else if (['Any'].includes(type_1314.name)) { this.types.set(node_1147, this.toType(/*Type*/[1,'Any'], node_1147)) } else Typer.fail('value[i] generic is null or >1', e_1306);
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('`value[i]` expects `value` only of type `Array`, but got `' + Type.stringify(this.types.get(e_1306)) + '`', e_1306)
                            };
                        };
                    };
                }
            } break;

            case 10: {
                {
                    const a_1316 = temp_1148[1];
                    const op_1317 = temp_1148[2];
                    const b_1318 = temp_1148[3];
                    {
                        if (op_1317 == 95) { Typer.fail('`===` not supported, use `strictEqual`', node_1147) };
                        if (op_1317 == 95) { Typer.fail('`!==` not supported, use `strictNotEqual`', node_1147) };
                        this.fillExpression(a_1316);
                        let parent_1319 = this.parents.get(a_1316);
                        {
                            const temp_1320 = parent_1319;
                            switch (temp_1320&&temp_1320[0]) {
                            case 23: {
                                {
                                    const name_1321 = temp_1320[1];
                                    const const_1322 = temp_1320[4];
                                    if (const_1322) { Typer.fail(('Cannot change a constant `let ' + (name_1321) + '`, redefine it as `var ' + (name_1321) + '` to allow value changes\n') + Typer.positionOf(parent_1319) + ('`let ' + (name_1321) + '` is defined here'), node_1147) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1323 = temp_1320[1];
                                    Typer.fail(('Cannot reassign a function `' + (name_1323) + '`'), node_1147);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1324 = temp_1320[1];
                                    Typer.fail(('Cannot change iterator value `' + (name_1324) + '` of for loop\n') + Typer.positionOf(parent_1319) + ('`for (' + (name_1324) + ' in ...)` is defined here'), node_1147);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                        this.fillExpression(b_1318);
                        this.types.set(node_1147, this.unify(this.types.get(a_1316), this.types.get(b_1318), b_1318));
                    };
                }
            } break;

            case 16: {
                {
                    const e_1325 = temp_1148[1];
                    {
                        if (!this.insideFunction && !this.insideTry) { Typer.fail('Cannot throw outside of `function` or `try`', node_1147) };
                        if (this.insideFunction && !this.functionAllowedToThrow) { Typer.fail('Cannot throw in a @noThrow function', node_1147) };
                        if (this.insideFunction) { this.functionThrows = true };
                        this.fillExpression(e_1325);
                    };
                }
            } break;

            case 3: {
                {
                    if (!this.insideClassMethod) { Typer.fail('Cannot access `this` outside of class method', node_1147) };
                    this.types.set(node_1147, this.thisType);
                }
            } break;

            case 4: {
                Typer.fail('Cannot use `super` as value', node_1147)
            } break;

            case 15: {
                {
                    const e_1326 = temp_1148[1];
                    {
                        {
                            const temp_1327 = e_1326;
                            switch (temp_1327&&temp_1327[0]) {
                            case 23: {
                                {
                                    const name_1328 = temp_1327[1];
                                    const const_1329 = temp_1327[4];
                                    {
                                        const prefix = (const_1329)? ('let') : 'var';
                                        Typer.fail(('This `return` tries to return a variable `' + (prefix) + ' ' + (name_1328) + '`. Try to wrap it into braces like this `{ return } ' + (prefix) + ' ' + (name_1328) + '`'), node_1147);
                                    };
                                }
                            } break;

                            case 15: {
                                Typer.fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node_1147)
                            } break;
                            };
                        };
                        if (!this.insideFunction) { Typer.fail('Cannot use `return` outside of function', node_1147) };
                        if (this.insideArrow) { Typer.fail('Cannot use `return` inside `=>` arrow, use `function` instead of arrow, or wrap expression into =>{block}', node_1147) };
                        if (e_1326 != null) {
                            if (this.functionReturnsAType == this.typeVoid) { Typer.fail('Function returns `Void`, cannot return a value here', e_1326) };
                            this.fillExpression(e_1326);
                            const ret_1330 = this.types.get(e_1326);
                            if (ret_1330 == this.typeVoid) { Typer.fail('Cannot `return` a `Void` non-value', node_1147) };
                            this.functionReturnsAType = this.unify(this.functionReturnsAType, ret_1330, e_1326);
                            this.functionActuallyReturns = true;
                        } else {
                            let step_1331 = 0;
                            const ret_1332 = this.functionReturnsAType;
                            if (step_1331 == 0 && ret_1332 != null) { step_1331 = 1 };
                            if (step_1331 == 1) { if (ret_1332 != this.typeVoid) { Typer.fail(('Expected `return value` of type `' + (Type.stringify(ret_1332)) + '`'), node_1147) } } else this.functionReturnsAType = this.typeVoid;
                        };
                    };
                }
            } break;

            case 42: {
                Typer.fail('Cannot use underscore `_` outside of case pattern', node_1147)
            } break;

            case 45: {
                Typer.fail('Cannot use `export` here: only applicable to module declarations', node_1147)
            } break;

            case 43: {
                Typer.fail('Cannot use `static` here: only applicable to class fields', node_1147)
            } break;

            case 44: {
                Typer.fail('Cannot use `private` here: only applicable to class fields and module declarations', node_1147)
            } break;

            case 35: {
                Typer.fail('Modules should be at a file\' upper scope', node_1147)
            } break;

            case 17: {
                Typer.fail('Cannot use `break` as a value', node_1147)
            } break;

            case 18: {
                Typer.fail('Cannot use `continue` as a value', node_1147)
            } break;

            case 25: {
                Typer.fail('Cannot use `class` as a value', node_1147)
            } break;

            case 37: {
                Typer.fail('Cannot use `enum` as a value', node_1147)
            } break;

            case 8: {
                Typer.fail('Cannot use `declare` as a value', node_1147)
            } break;

            case 23: {
                {
                    const name_1333 = temp_1148[1];
                    const const_1334 = temp_1148[4];
                    {
                        const prefix_1335 = (const_1334)? ('let') : 'var';
                        Typer.fail(('Cannot use `' + (prefix_1335) + ' ' + (name_1333) + '` as a value'), node_1147);
                    };
                }
            } break;

            case 34: {
                this.fillSwitch(node_1147, true)
            } break;

            case 20: {
                Typer.fail('Cannot use `while` as a value', node_1147)
            } break;

            case 46: {
                Typer.fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node_1147)
            } break;

            case null: case undefined: {
                Typer.fail('Got null node' + Typer.never, node_1147)
            } break;

            default:
            Typer.fail('Unknown node expression kind to type ' + node_1147 + Typer.never, node_1147)
            };
        };
        fillSwitch(node_1336, value_1337) {
            const temp_1338 = node_1336;
            switch (temp_1338&&temp_1338[0]) {
            case 34: {
                {
                    const exprs_1339 = temp_1338[1];
                    const conds_1340 = temp_1338[2];
                    const guards_1341 = temp_1338[3];
                    const cases_1342 = temp_1338[4];
                    {
                        for (const e of $toIterator(exprs_1339)) {
                            this.pushScope();
                            this.fillExpression(e);
                            this.popScope();
                        };
                        let i_1343 = 0;
                        while (i_1343 < cases_1342.length) {
                            this.pushScope();
                            let e_1344 = conds_1340[i_1343];
                            let currentType = null;
                            let currentTag = null;
                            let currentTagBind = 0;
                            const follow = (e_1345) => {
                                const temp_1346 = e_1345;
                                switch (temp_1346&&temp_1346[0]) {
                                case 28: {
                                    {
                                        const ex = temp_1346[1];
                                        const name_1347 = temp_1346[2];
                                        this.fillExpression(e_1345);
                                    }
                                } break;

                                case 29: {
                                    {
                                        const ex_1348 = temp_1346[1];
                                        const name_1349 = temp_1346[2];
                                        {
                                            this.fillExpression(e_1345);
                                            {
                                                const temp_1350 = this.types.get(ex_1348);
                                                switch (temp_1350&&temp_1350[0]) {
                                                case 6: {
                                                    {
                                                        const type_1351 = temp_1350[1];
                                                        {
                                                            currentType = type_1351;
                                                            currentTag = name_1349;
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 14: {
                                    {
                                        const e_1352 = temp_1346[1];
                                        this.fill(e_1352);
                                    }
                                } break;

                                case 42: {
                                    {
                                    }
                                } break;

                                case 7: {
                                    {
                                    }
                                } break;

                                case 2: {
                                    {
                                    }
                                } break;

                                case 5: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                    }
                                } break;

                                case 12: {
                                    {
                                        const ex_1353 = temp_1346[1];
                                        const args_1354 = temp_1346[2];
                                        const argNames_1355 = temp_1346[3];
                                        {
                                            follow(ex_1353);
                                            currentTagBind = 0;
                                            for (const ee of $toIterator(args_1354)) {
                                                follow(ee);
                                                currentTagBind++;
                                            };
                                        };
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_1356 = temp_1346[1];
                                        if (name_1356.charAt(0) == name_1356.charAt(0).toUpperCase()) { this.fill(e_1345) } else {
                                            this.addScope(name_1356, e_1345);
                                            {
                                                let step_1357 = 0;
                                                const currentType_1358 = currentType;
                                                if (step_1357 == 0 && currentType_1358 != null) { step_1357 = 1 };
                                                if (step_1357 == 1) {
                                                    const indexOf = currentType_1358.fieldNames.indexOf(currentTag);
                                                    if (indexOf == -1) { Typer.fail('currentType.fieldNames.indexOf == -1', e_1345) };
                                                    const type_1359 = currentType_1358.tagBindVars[indexOf][currentTagBind];
                                                    const name_1360 = currentType_1358.tagBindVarsNames[indexOf][currentTagBind];
                                                    if (name_1360 == null) {
                                                        const available = currentType_1358.tagBindVarsNames[indexOf].join(', ');
                                                        if (available.length == 0) { Typer.fail('No bindings available for `.' + currentTag + '`', e_1345) };
                                                        Typer.fail(('Too many bindings requested for `.' + (currentTag) + '`, available are: ') + available, e_1345);
                                                    };
                                                    if (type_1359 != null) { this.types.set(e_1345, this.toType(type_1359, e_1345)) } else Typer.fail('tagBindVars no type for ' + name_1360, e_1345);
                                                } else {
                                                    Typer.fail('No currentType for ' + name_1356, e_1345);
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_1361 = temp_1346[1];
                                        const op_1362 = temp_1346[2];
                                        const b_1363 = temp_1346[3];
                                        if (op_1362 == 104) {
                                            follow(a_1361);
                                            follow(b_1363);
                                        } else Typer.fail('' + e_1345, e_1345);
                                    }
                                } break;

                                case 13: {
                                    {
                                        const econd_1364 = temp_1346[1];
                                        {
                                            this.pushScope();
                                            this.fill(econd_1364[0]);
                                            this.popScope();
                                        };
                                    }
                                } break;

                                default:
                                Typer.fail('' + e_1345, e_1345)
                                };
                            };
                            follow(e_1344);
                            let e_1365 = cases_1342[i_1343];
                            this.pushScope();
                            if (value_1337 == false) { this.fill(e_1365) };
                            if (value_1337 == true) {
                                this.fillExpression(e_1365);
                                if (this.types.get(node_1336) == null) { this.types.set(node_1336, this.types.get(e_1365)) } else this.types.set(node_1336, this.unify(this.types.get(node_1336), this.types.get(e_1365), e_1365));
                            };
                            this.popScope();
                            this.popScope();
                            i_1343++;
                        };
                    };
                }
            } break;
            };
        };
    }
    Typer.never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'
    Typer.fail = (msg, node_960 = null) => {
            const data_961 = Project.data.get(node_960);
            if (data_961 == null) { throw new CompilerError(/*TyperError*/[3], msg, 0, 0, '') };
            throw new CompilerError(/*TyperError*/[3], msg, data_961.line, data_961.column, data_961.fileName);
        };
    Typer.positionOf = (node_962) => {
            const data_963 = Project.data.get(node_962);
            if (data_963 == null) { return '[Unknown]: ' };
            return '[' + data_963.fileName + ':' + data_963.line + ':' + data_963.column + ']: ';
        };
    Typer.nodeToNodeType = (node_964) => {
            const temp_965 = node_964;
            switch (temp_965&&temp_965[0]) {
            case 31: {
                {
                    const el_966 = temp_965[1];
                    {
                        if (el_966.length > 1) { Typer.fail('Array type `[T]` cannot have more than 1 parameter `T`', el_966[1]) };
                        return /*ParametricType*/[2,'Array',[Typer.nodeToNodeType(el_966[0])]];
                    };
                }
            } break;

            case 48: {
                {
                    const t_967 = temp_965[1];
                    return t_967;
                }
            } break;

            case 36: {
                {
                    const names_968 = temp_965[1];
                    const el_969 = temp_965[2];
                    {
                        const types_970 = (() => {
                            const result_971 = [];
                            const value_972 = el_969;
                            for (const e of $toIterator(value_972)) result_971.push(Typer.nodeToNodeType(e));
                            return result_971;
                        })();
                        return /*Object*/[5,names_968,types_970];
                    };
                }
            } break;

            default:
            Typer.fail('Cannot nodeToNodeType of ' + Node.stringify(node_964), node_964)
            };
        };
    Typer.internal = () => {};
    var Lexer = class {
    }
    Lexer.isident
    Lexer.isUpper
    Lexer.isLower
    Lexer.ops8a
    Lexer.op16token
    Lexer.kwd
    Lexer.tokenize = (bytes, fileName) => {
            let position_1366 = 0;
            const len_1367 = bytes.length;
            let to_1368 = 0;
            let s_1369 = '';
            let p = 0;
            let line = 1;
            let columnBase = 0;
            const params_1370 = [];
            const tokens = Buffer.alloc(len_1367 + 1);
            let lines = [];
            let columns = [];
            const add = (t_1371) => {
                tokens[to_1368++] = t_1371;
                lines.push(line);
                columns.push(position_1366 - columnBase - 1);
            };
            const addn = (t_1372, p_1373) => {
                params_1370[to_1368] = p_1373;
                add(t_1372);
            };
            const curPos = () => { return position_1366 - columnBase - 1 };
            const get_8 = (pos_1374) => { return bytes[pos_1374] };
            const not_eof = () => { return (position_1366 < len_1367) };
            const new_line = () => {
                line++;
                columnBase = position_1366;
            };
            const fail = (message_1375, erline = null, column = null, filename = null) => {
                let erline_1376 = erline != (null)? (erline) : line;
                let column_1377 = column != (null)? (column) : curPos();
                let filename_1378 = filename != (null)? (filename) : fileName;
                return new CompilerError(/*LexerError*/[2], message_1375, erline_1376, column_1377, filename_1378);
            };
            if ((len_1367 > 2) && (get_8(0) == 239) && (get_8(1) == 187) && (get_8(2) == 191)) { position_1366 += 3 };
            if ((len_1367 > 2) && (get_8(0) == 35) && (get_8(1) == 33)) { while (position_1366 < len_1367 && get_8(position_1366) != 10) {
                position_1366++;
            } };
            while (position_1366 < len_1367) {
                let _8 = 0;
                do {{
                    _8 = get_8(position_1366);
                    if (_8 == 10) { new_line() };
                }} while (_8 <= 32 && (++position_1366 < len_1367));
                if (!not_eof()) { break };
                let _16 = (len_1367 - position_1366) > (1)? (_8 | (get_8(position_1366 + 1) << 8)) : _8;
                if (_8 == 47) {
                    if (_16 == 0x2f2f) {
                        let pos_1379 = position_1366 + 2;
                        while (get_8(position_1366) != 10 && not_eof()) {
                            position_1366++;
                        };
                        continue;
                    };
                    if (_16 == 10799 && get_8(position_1366 + 2) == 42) {
                        position_1366 += 3;
                        p = position_1366;
                        while (not_eof()) {
                            let _32 = (len_1367 - position_1366) > (3)? (bytes.readUInt32LE(position_1366)) : get_8(position_1366);
                            if ((_32 & 0xFF) == 10) { new_line() } else if ((_32 & 0xFFFFFF) == 3090986) { break };
                            position_1366++;
                        };
                        if (!not_eof()) { throw fail('Unclosed doc-comment') };
                        addn(65, bytes.toString('utf8', p, position_1366));
                        position_1366 += 3;
                        continue;
                    };
                    if (_16 == 10799) {
                        let pos_1380 = position_1366 + 2;
                        p = 0;
                        position_1366 += 2;
                        while (not_eof()) {
                            _16 = (len_1367 - position_1366) > (1)? (bytes.readUInt16LE(position_1366)) : get_8(position_1366);
                            if ((_16 & 0xFF) == 10) { new_line() } else if (_16 == 12074 && p > 0) { p-- } else if (_16 == 10799) { p++ } else if (_16 == 12074 && p == 0) { break };
                            position_1366++;
                        };
                        position_1366 += 2;
                        continue;
                    };
                };
                if (((_8 & 95) >= 65 && (_8 & 95) <= 90) || (_8 == 95)) {
                    const titlechar = _8;
                    p = position_1366 + 1;
                    _8 = get_8(p);
                    while (p < len_1367 && Lexer.isident[_8] != 0) _8 = get_8(++p);
                    s_1369 = bytes.toString('ascii', position_1366, p);
                    const t_1381 = (((_16 & 0xFF) <= 90))? (null) : Lexer.kwd.get(s_1369);
                    {
                        let step_1382 = 0;
                        const t_1383 = t_1381;
                        if (step_1382 == 0 && t_1383 != null) { step_1382 = 1 };
                        if (step_1382 == 1) { add(t_1383) } else {
                            if (titlechar >= 65 && titlechar <= 90) { addn(61, s_1369) } else {
                                addn(62, s_1369);
                            };
                        };
                    };
                    position_1366 = p;
                    continue;
                };
                if (_8 == 96) {
                    position_1366++;
                    const pos_1384 = position_1366;
                    while (not_eof()) {
                        if ((get_8(position_1366) == 96) && (get_8(position_1366 + 1) == 96)) {
                            position_1366++;
                            position_1366++;
                            continue;
                        };
                        if (get_8(position_1366) == 96) { break };
                        if (get_8(position_1366) == 10) { new_line() };
                        position_1366++;
                    };
                    let result_1385 = bytes.toString('utf8', pos_1384, position_1366);
                    if (result_1385.indexOf('``') != -1) { result_1385 = result_1385.split('``').join('') };
                    addn(66, result_1385);
                    position_1366++;
                    continue;
                };
                if (_16 == 11822 && (get_8(position_1366 + 2) == 46)) {
                    add(98);
                    position_1366 += 3;
                    continue;
                };
                if (_16 == 15934 && (get_8(position_1366 + 2) == 62)) {
                    add(108);
                    position_1366 += 3;
                    continue;
                };
                const hash = Lexer.simplehash(_16);
                if (_16 == Lexer.op16token.readUInt16LE(hash * 2)) {
                    add(Lexer.op16token[hash + 512]);
                    position_1366 += 2;
                    continue;
                };
                const found_1386 = Lexer.ops8a[_8];
                if (found_1386 != 0) {
                    add(found_1386);
                    position_1366++;
                    continue;
                };
                if (_8 < 40) {
                    p = _8;
                    position_1366++;
                    const pos_1387 = position_1366;
                    while (get_8(position_1366) != p && not_eof()) {
                        if (get_8(position_1366) == 10) { new_line() };
                        if (get_8(position_1366) == '\\'.charCodeAt(0)) {
                            position_1366 += 2;
                            continue;
                        };
                        _16 = (len_1367 - position_1366) > (1)? (bytes.readUInt16LE(position_1366)) : get_8(position_1366);
                        position_1366++;
                    };
                    let result_1388 = bytes.toString('utf8', pos_1387, position_1366);
                    if (result_1388.indexOf('\r\n') != -1) { result_1388 = result_1388.split('\r\n').join('\n') };
                    addn(64, result_1388);
                    position_1366++;
                    continue;
                };
                if (_16 == 30768) {
                    p = position_1366;
                    p += 2;
                    _8 = get_8(position_1366);
                    while ((_8 >= 65 && _8 <= 70) || (_8 >= 48 && _8 <= 57) || (_8 >= 97 && _8 <= 102)) {
                        _8 = get_8(++p);
                    };
                    if (p - position_1366 == 2) { throw fail('Integer `0x` not allowed!') };
                    addn(63, bytes.toString('ascii', position_1366, p));
                    position_1366 = p;
                    continue;
                };
                if (_8 < 58) {
                    p = position_1366;
                    _8 = get_8(p);
                    let found_1389 = 63;
                    while (_8 >= 48 && _8 <= 57) {
                        _8 = get_8(++p);
                    };
                    if (_8 == 46 && get_8(p + 1) != 46) {
                        _8 = get_8(++p);
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1389 = 60;
                    };
                    if (_8 == 101 || _8 == 69) {
                        _8 = get_8(++p);
                        if (_8 == 43 || _8 == 45) { _8 = get_8(++p) };
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1389 = 60;
                    };
                    addn(found_1389, bytes.toString('ascii', position_1366, p));
                    position_1366 = p;
                    continue;
                };
                if (position_1366 >= len_1367) { break };
                throw fail('Unexpected character ' + String.fromCharCode(_8));
                break;
            };
            return new Tokens(tokens, to_1368, params_1370, lines, columns, fileName);
        };
    Lexer.init = () => {
            Lexer.isident = Buffer.alloc(256);
            {
                let _8_1390 = 0;
                let it_1391 = 0;
                while (it_1391 < 256) {
                    _8_1390 = it_1391;
                    it_1391++;
                    Lexer.isident[_8_1390] = (((_8_1390 >= 65 && _8_1390 <= 90) || (_8_1390 >= 48 && _8_1390 <= 57) || (_8_1390 >= 97 && _8_1390 <= 122) || _8_1390 == 95))? (128) : 0;
                };
            };
            Lexer.isUpper = Buffer.alloc(256);
            {
                let _8_1392 = 0;
                let it_1393 = 0;
                while (it_1393 < 256) {
                    _8_1392 = it_1393;
                    it_1393++;
                    Lexer.isident[_8_1392] = (((_8_1392 >= 65 && _8_1392 <= 90) || (_8_1392 >= 48 && _8_1392 <= 57) || (_8_1392 >= 97 && _8_1392 <= 122) || _8_1392 == 95))? (128) : 0;
                };
            };
            Lexer.kwd = new Map([['_', 1], ['as', 58], ['break', 3], ['case', 4], ['catch', 6], ['class', 7], ['continue', 8], ['do', 9], ['else', 10], ['enum', 11], ['extends', 12], ['declare', 13], ['false', 14], ['for', 15], ['function', 16], ['if', 17], ['implements', 18], ['in', 20], ['interface', 22], ['let', 23], ['new', 25], ['null', 26], ['module', 28], ['private', 29], ['return', 31], ['static', 32], ['super', 59], ['switch', 33], ['this', 34], ['throw', 35], ['true', 36], ['try', 37], ['using', 39], ['var', 40], ['while', 41], ['is', 57]]);
            const ops8 = new Map([[64, 70], [36, 83], [35, 78], [33, 89], [37, 101], [38, 112], [40, 80], [41, 79], [42, 102], [43, 111], [44, 75], [45, 107], [46, 77], [47, 94], [58, 76], [59, 82], [60, 99], [61, 91], [62, 96], [63, 81], [91, 72], ['\\'.charCodeAt(0), 110], [93, 71], [94, 109], [123, 74], [124, 104], [125, 73], [126, 88]]);
            Lexer.ops8a = Buffer.alloc(256);
            for (const key of $toIterator(ops8.keys())) Lexer.ops8a[key] = ops8.get(key);
            const ops16 = new Map([[11051, 87], [11565, 86], [15420, 105], [15649, 103], [15676, 100], [15677, 95], [15678, 97], [15934, 106], [31868, 93], [9766, 92], [15933, 90], [11839, 113]]);
            for (const key1 of $toIterator(ops16.keys())) {
                for (const key2 of $toIterator(ops16.keys())) {
                    if (key1 != key2 && Lexer.simplehash(key1) == Lexer.simplehash(key2)) { throw new CompilerError(/*LexerError*/[2], '2-byte op hash collision: ' + key1 + ' ' + key2, 0, 0, 'INTERNAL') };
                };
            };
            Lexer.op16token = Buffer.alloc(768);
            for (const key of $toIterator(ops16.keys())) {
                const hash_1394 = Lexer.simplehash(key);
                Lexer.op16token.writeUInt16LE(key, hash_1394 * 2);
                Lexer.op16token[hash_1394 + 512] = ops16.get(key);
            };
            return;
        };
    Lexer.simplehash = (val) => { return ((val & 0xff) + (((val >> (8 * 1)) & 0xff) << 3)) & 0xEF };
    var Tokens = class {
        constructor(tokens_1395, length_1396, values_1397, lines_1398, columns_1399, fileName_1400) {
        {
            this.token = tokens_1395;
            this.length = length_1396;
            this.value = values_1397;
            this.line = lines_1398;
            this.column = columns_1399;
            this.fileName = fileName_1400;
        } };
    }
    var Parser = class {
        constructor(lexe_1401) {
            this.i = 0
            this.endif = 0
            this.lasttok = -1
            this.lasttokchecks = 10
            this.classExternal = false
            this.parametricTypeNesting = 0
            this.parametricTypeNestingToken = 0
        {
            this.lex = lexe_1401;
            this.nodes = [];
            while (this.i < this.lex.length && this.tok() != 0) {
                this.nodes.push(this.parseExpr());
            };
        } };
        parseFields() {
            let fields_1402 = [];
            while (this.tok() != 73) {
                let atts_1403 = [];
                while (this.tok() == 70) {
                    atts_1403.push(this.parseAttribute());
                };
                const pos_1404 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
                const pos_1405 = new NodeData(pos_1404.line, pos_1404.column, this.lex.fileName);
                let _static = false;
                if (this.tok() == 32) {
                    _static = true;
                    this.i++;
                };
                {
                    const temp_1406 = this.tok();
                    switch (temp_1406) {
                    case 29: {
                        this.i++
                    } break;

                    case 40: {
                        {
                            let f_1407 = this.parseExpr();
                            Project.data.set(f_1407, pos_1405);
                            if (_static) {
                                f_1407 = /*TStatic*/[43,f_1407];
                                Project.data.set(f_1407, pos_1405);
                            };
                            Project.mapAttributes.set(f_1407, atts_1403);
                            fields_1402.push(f_1407);
                        }
                    } break;

                    case 16: {
                        {
                            let f_1408 = this.parseExpr();
                            Project.data.set(f_1408, pos_1405);
                            if (_static) {
                                f_1408 = /*TStatic*/[43,f_1408];
                                Project.data.set(f_1408, pos_1405);
                            };
                            Project.mapAttributes.set(f_1408, atts_1403);
                            fields_1402.push(f_1408);
                        }
                    } break;

                    case 23: {
                        {
                            let f_1409 = this.parseExpr();
                            Project.data.set(f_1409, pos_1405);
                            if (_static) {
                                f_1409 = /*TStatic*/[43,f_1409];
                                Project.data.set(f_1409, pos_1405);
                            };
                            Project.mapAttributes.set(f_1409, atts_1403);
                            fields_1402.push(f_1409);
                        }
                    } break;

                    case 25: {
                        {
                            this.i++;
                            let expr_1410 = null;
                            let vars_1411 = [];
                            let types_1412 = [];
                            let values_1413 = [];
                            this.step(80);
                            if (this.tok() != 79) { while (true) {
                                vars_1411.push(this.getgo(62));
                                let expr_1414 = null;
                                let t_1415 = null;
                                if (this.tok() == 76) {
                                    this.i++;
                                    t_1415 = this.parseType();
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    expr_1414 = this.parseExpr();
                                };
                                types_1412.push(t_1415);
                                values_1413.push(expr_1414);
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            let tmp = this.i;
                            while (this.tok() == 70) this.parseAttribute();
                            if (this.tok() != 73 && this.tok() != 16) {
                                this.i = tmp;
                                expr_1410 = this.parseExpr();
                            } else this.i = tmp;
                            let v_1416 = [];
                            {
                                let i_1417 = 0;
                                let it_1418 = 0;
                                let at_1419 = vars_1411.length;
                                while (it_1418 < at_1419) {
                                    i_1417 = it_1418;
                                    it_1418++;
                                    {
                                        v_1416.push(/*TVar*/[23,vars_1411[i_1417],types_1412[i_1417],values_1413[i_1417],true,false]);
                                    };
                                };
                            };
                            const field_1420 = /*TFunction*/[21,'new',expr_1410,v_1416,null];
                            Project.data.set(field_1420, pos_1405);
                            fields_1402.push(field_1420);
                        }
                    } break;

                    case 62: {
                        {
                            const name_1421 = this.getgo(62);
                            if ((name_1421 == 'get') && (this.tok() == 62)) {
                                const field_1422 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1422) + ' { get { return value } }` instead of `get ' + (field_1422) + '()`'));
                            };
                            if ((name_1421 == 'set') && (this.tok() == 62)) {
                                const field_1423 = this.getgo(62);
                                this.step(80);
                                const value_1424 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1423) + ' { set(' + (value_1424) + ') { ... } }` instead of `set ' + (field_1423) + '(' + (value_1424) + ')`'));
                            };
                            if (this.tok() == 80) {
                                if (name_1421 == 'constructor') { this.fail('Use `new()` syntax instead of `constructor()`') };
                                if (_static) { this.fail('Use `static function ' + name_1421 + '()` syntax for static methods') } else this.fail('Use `function ' + name_1421 + '()` syntax for methods');
                            };
                            this.fail('Fields should start with `var ' + name_1421 + '` or `let ' + name_1421 + '`');
                        }
                    } break;

                    case 61: {
                        this.fail('Fields cannot start with uppercase character `' + this.print() + '` -> `' + this.print().toLowerCase() + '`')
                    } break;

                    case 74: {
                        {
                            const pos_1425 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
                            const field_1426 = fields_1402.pop();
                            let v_1427 = null;
                            let t_1428 = null;
                            let n_1429 = null;
                            let onlyGet = false;
                            {
                                const temp_1430 = field_1426;
                                switch (temp_1430&&temp_1430[0]) {
                                case 23: {
                                    {
                                        const name_1431 = temp_1430[1];
                                        const type_1432 = temp_1430[2];
                                        const expr_1433 = temp_1430[3];
                                        const const_1434 = temp_1430[4];
                                        {
                                            if (expr_1433 != null) { this.fail('Property should not have a `= value`') };
                                            v_1427 = field_1426;
                                            t_1428 = type_1432;
                                            n_1429 = name_1431;
                                            onlyGet = const_1434;
                                        };
                                    }
                                } break;

                                default:
                                this.fail('Only `var` and `let` fields may have a getter `let v: T { get() ... }`')
                                };
                            };
                            this.i++;
                            if (this.print() == 'set') { this.fail('Expected `get` before `set`') };
                            if (this.print() != 'get') { this.fail('Expected `get`') };
                            const kind_1435 = this.print();
                            let getterExpr = null;
                            if (kind_1435 == 'get') {
                                this.i++;
                                getterExpr = this.parseExpr();
                            };
                            const kind_1436 = this.print();
                            let setterExpr = null;
                            let setterVar = null;
                            if ((kind_1436 == 'set') && (onlyGet)) { this.fail('Constants `let` may have only getter `get`') };
                            if (kind_1436 == 'set') {
                                this.i++;
                                this.step(80);
                                setterVar = this.getgo(62);
                                this.step(79);
                                setterExpr = this.parseExpr();
                            };
                            if ((setterExpr == null) && (!onlyGet)) { this.fail('Variables `var` should have both getter `get` and setter `set`') };
                            this.step(73);
                            const getter = ((getterExpr == null))? (null) : /*TFunction*/[21,'get_' + n_1429,getterExpr,[],t_1428];
                            const setter = ((setterExpr == null))? (null) : /*TFunction*/[21,'set_' + n_1429,setterExpr,[/*TVar*/[23,setterVar,t_1428,null,true,false]],null];
                            const property = /*TProperty*/[26,field_1426,getter,setter];
                            Project.data.set(property, new NodeData(pos_1425.line, pos_1425.column, this.lex.fileName));
                            Project.data.set(getter, new NodeData(pos_1425.line, pos_1425.column, this.lex.fileName));
                            Project.data.set(setter, new NodeData(pos_1425.line, pos_1425.column, this.lex.fileName));
                            fields_1402.push(property);
                            {
                                let step_1437 = 0;
                                const getter_1438 = getter;
                                if (step_1437 == 0 && getter_1438 != null) { step_1437 = 1 };
                                if (step_1437 == 1) { fields_1402.push(getter_1438) };
                            };
                            {
                                let step_1439 = 0;
                                const setter_1440 = setter;
                                if (step_1439 == 0 && setter_1440 != null) { step_1439 = 1 };
                                if (step_1439 == 1) { fields_1402.push(setter_1440) };
                            };
                        }
                    } break;

                    default:
                    this.fail('Fields cannot start with `' + this.print() + '`')
                    };
                };
            };
            return fields_1402;
        };
        tok() {
            if (this.i > this.lex.length) {
                console.log('Parser is out of token space!');
                console.log('This should NOT happen.');
                console.log('Please, issue a developer (with a sample code).');
                this.fail(this.lex.fileName + ': Parser internal error: out of token space');
            };
            let t_1441 = this.lex.token[this.i];
            if (this.lasttok != this.i) {
                this.lasttok = this.i;
                this.lasttokchecks = 1000;
            } else {
                this.lasttokchecks--;
                if (this.lasttokchecks < 0) { this.fail('Parser internal error: Same token parsed too many times: ' + ('`' + (this.print()) + '`')) };
            };
            if ((t_1441 == 78) && (this.lex.value[this.i + 1] == 'end')) { if (this.endif > 0) {
                this.i++;
                this.i++;
                this.endif--;
                this.tok();
            } else this.fail('Unexpected `#end`') };
            if ((t_1441 == 78) && (this.offset(1) == 17)) {
                this.i++;
                this.i++;
                const defName = this.getgo(62);
                const def = Project.defines[defName];
                if (def == null) { this.fail('`#if` looks for the `' + defName + '` parameter which is *not* defined in project file.' + (' Add `\"define\": { \"' + (defName) + '\": false }` to `hexa.json` or `--define ' + (defName) + '=false` to suppress this message.')) };
                if (def == true) { this.endif++ };
                if (def == false) {
                    let endifs = 1;
                    while (this.i < this.lex.length) {
                        if ((this.offset(0) == 78) && (this.offset(1) == 17)) {
                            this.i++;
                            this.i++;
                            endifs++;
                            continue;
                        };
                        if ((this.offset(0) == 78) && (this.lex.value[this.i + 1] == 'end')) {
                            this.i++;
                            this.i++;
                            endifs--;
                            if (endifs == 0) { break };
                            continue;
                        };
                        this.i++;
                    };
                };
                this.tok();
            };
            return this.lex.token[this.i];
        };
        print() { return Token.stringify(this.lex.token[this.i], this.lex.value[this.i]) };
        expect(t_1442) { if (t_1442 != this.tok()) { this.expected(Token.stringify(t_1442)) } };
        fail(message_1443, line_1444, column_1445, filename_1446) {
            const line_1447 = line_1444 != (null)? (line_1444) : this.lex.line[this.i];
            const column_1448 = column_1445 != (null)? (column_1445) : this.lex.column[this.i];
            const filename_1449 = filename_1446 != (null)? (filename_1446) : this.lex.fileName;
            throw new CompilerError(/*ParserError*/[0], message_1443, line_1447, column_1448, filename_1449);
        };
        autofail(message_1450, line_1451, column_1452, filename_1453) { this.fail(message_1450 + '\nTo fix this syntax error automatically call compiler with --autofix', line_1451, column_1452, filename_1453) };
        autofix(startToken, endToken, patch, delete_1454) {
            const start_1455 = startToken;
            const end_1456 = endToken;
            let i_1457 = 0;
            const filename_1458 = this.lex.fileName;
            const code_1459 = Fs.readFileSync(path.resolve(filename_1458)).toString('utf8');
            const original = code_1459.substring(start_1455, end_1456 + 1);
            const updated = code_1459.substr(0, start_1455) + patch + code_1459.substr(end_1456 + 1);
            console.log('Autofixed: `' + original + '` => `' + patch + '`');
            console.log(('File `' + (filename_1458) + '` overwritten with updated code\n') + updated);
        };
        getgo(t_1460) {
            this.expect(t_1460);
            return this.lex.value[this.i++];
        };
        step(t_1461) {
            this.expect(t_1461);
            this.i++;
        };
        next() { this.i++ };
        offset(v_1462) { return this.lex.token[this.i + v_1462] };
        unexpected() {
            let token = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            let error = ('Unexpected `' + (token) + '`');
            if (this.tok() == 82) { error += ' semicolon. Note: Hexa has no semicolons!' };
            if (this.print() == 'public') { error += '. Note: Hexa has no `public` keyword!' };
            this.fail(error);
        };
        expected(str_1463) {
            let token_1464 = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            this.fail(('Expected `' + (str_1463) + '` before `' + (token_1464) + '`'));
        };
        parseExpr() {
            let atts_1465 = [];
            while (this.tok() == 70) atts_1465.push(this.parseAttribute());
            let node_1466 = this.tok();
            let nodePosition = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
            let result_1467 = null;
            {
                const temp_1468 = node_1466;
                switch (temp_1468) {
                case 39: {
                    {
                        this.next();
                        let names_1469 = [this.getgo(61)];
                        while (this.tok() == 75) {
                            this.step(75);
                            names_1469.push(this.getgo(61));
                        };
                        result_1467 = /*TUsing*/[39,names_1469];
                    }
                } break;

                case 13: {
                    {
                        this.i++;
                        {
                            const temp_1470 = this.tok();
                            switch (temp_1470) {
                            case 16: {
                                result_1467 = this.parseFunction(false, true)
                            } break;

                            case 40: case 23: {
                                {
                                    const parsed = this.parseVar(true);
                                    if (parsed.length > 1) { result_1467 = /*TVars*/[24,parsed] } else result_1467 = parsed[0];
                                }
                            } break;

                            case 7: case 22: {
                                result_1467 = this.parseClass(true)
                            } break;

                            case 61: {
                                {
                                    const alias_1471 = this.parseType();
                                    this.step(91);
                                    const value_1472 = this.parseType();
                                    result_1467 = /*TTypeAlias*/[8,alias_1471,value_1472];
                                }
                            } break;

                            default:
                            this.fail(('Wrong `declare` format, got `' + (Token.stringify(this.tok())) + '`'))
                            };
                        };
                    }
                } break;

                case 74: {
                    {
                        this.i++;
                        if (this.tok() == 73) {
                            this.i++;
                            result_1467 = /*TBlock*/[11,[]];
                        } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                            let names_1473 = [];
                            let el_1474 = [];
                            while (true) {
                                names_1473.push(this.getgo(62));
                                this.step(76);
                                el_1474.push(this.parseExpr());
                                if (this.tok() == 75) {
                                    this.i++;
                                    if (this.tok() == 73) { this.fail('Unexpected `}`, remove trailing `,` comma') };
                                    continue;
                                } else break;
                            };
                            if (this.tok() != 73) { this.fail(('Expected `}` or `,` before `' + (this.print()) + '`')) };
                            this.step(73);
                            result_1467 = /*TObject*/[36,names_1473,el_1474];
                        } else {
                            let el_1475 = [];
                            while (this.tok() != 73) {
                                el_1475.push(this.parseExpr());
                            };
                            this.step(73);
                            result_1467 = /*TBlock*/[11,el_1475];
                        };
                    }
                } break;

                case 17: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1476 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.next();
                            econd_1476.push(this.parseExpr());
                        };
                        this.step(79);
                        let eif_1477 = null;
                        if (this.tok() != 76) { eif_1477 = this.parseExpr() };
                        let eelse_1478 = null;
                        if (this.tok() == 10) {
                            this.i++;
                            eelse_1478 = this.parseExpr();
                        };
                        result_1467 = /*TIf*/[13,econd_1476,eif_1477,eelse_1478];
                    }
                } break;

                case 41: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1479 = this.parseExpr();
                        this.step(79);
                        let e_1480 = this.parseExpr();
                        result_1467 = /*TWhile*/[20,econd_1479,e_1480,true];
                    }
                } break;

                case 9: {
                    {
                        this.i++;
                        let e_1481 = this.parseExpr();
                        this.step(41);
                        this.step(80);
                        let econd_1482 = this.parseExpr();
                        this.step(79);
                        result_1467 = /*TWhile*/[20,econd_1482,e_1481,false];
                    }
                } break;

                case 80: {
                    {
                        this.next();
                        if ((this.tok() == 79 && this.offset(1) == 90) || (this.tok() == 62 && this.offset(1) == 75) || (this.tok() == 62 && this.offset(1) == 76) || (this.tok() == 62 && this.offset(1) == 79 && this.offset(2) == 90)) {
                            let vars_1483 = [];
                            let types_1484 = [];
                            let values_1485 = [];
                            while (this.tok() != 79) {
                                vars_1483.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1484.push(this.parseType());
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    values_1485.push(this.parseExpr());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            this.step(79);
                            this.step(90);
                            let v_1486 = [];
                            {
                                let i_1487 = 0;
                                let it_1488 = 0;
                                let at_1489 = vars_1483.length;
                                while (it_1488 < at_1489) {
                                    i_1487 = it_1488;
                                    it_1488++;
                                    {
                                        v_1486.push(/*TVar*/[23,vars_1483[i_1487],types_1484[i_1487],values_1485[i_1487],true]);
                                    };
                                };
                            };
                            result_1467 = /*TArrow*/[22,this.parseExpr(),v_1486,null];
                        } else {
                            let expr_1490 = this.parseExpr();
                            this.step(79);
                            result_1467 = /*TParenthesis*/[14,expr_1490];
                        };
                    }
                } break;

                case 31: {
                    {
                        this.i++;
                        {
                            const temp_1491 = this.tok();
                            switch (temp_1491) {
                            case 73: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 40: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 23: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 4: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 3: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 8: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            case 31: {
                                result_1467 = /*TReturn*/[15,null]
                            } break;

                            default:
                            result_1467 = /*TReturn*/[15,this.parseExpr()]
                            };
                        };
                    }
                } break;

                case 35: {
                    {
                        this.i++;
                        result_1467 = /*TThrow*/[16,this.parseExpr()];
                    }
                } break;

                case 8: {
                    {
                        this.i++;
                        result_1467 = /*TContinue*/[18];
                    }
                } break;

                case 3: {
                    {
                        this.i++;
                        result_1467 = /*TBreak*/[17];
                    }
                } break;

                case 1: {
                    {
                        this.i++;
                        result_1467 = /*TUnderscore*/[42];
                    }
                } break;

                case 88: {
                    {
                        this.i++;
                        result_1467 = /*TUnop*/[19,88,false,this.parseExpr()];
                    }
                } break;

                case 107: {
                    {
                        this.i++;
                        result_1467 = /*TUnop*/[19,107,false,this.parseExpr()];
                    }
                } break;

                case 89: {
                    {
                        this.i++;
                        result_1467 = /*TUnop*/[19,89,false,this.parseExpr()];
                    }
                } break;

                case 87: {
                    {
                        this.i++;
                        result_1467 = /*TUnop*/[19,87,false,this.parseExpr()];
                    }
                } break;

                case 86: {
                    {
                        this.i++;
                        result_1467 = /*TUnop*/[19,86,false,this.parseExpr()];
                    }
                } break;

                case 60: {
                    result_1467 = /*TFloat*/[6,this.getgo(60)]
                } break;

                case 63: {
                    result_1467 = /*TInt*/[5,this.getgo(63)]
                } break;

                case 61: {
                    if (this.lex.token[this.i + 1] == 99) {
                        let res = this.parseType();
                        result_1467 = /*NodeTypeValue*/[48,res];
                    } else if (this.lex.token[this.i + 1] == 81) {
                        let name_1492 = this.getgo(61);
                        this.i++;
                        result_1467 = /*NodeTypeValue*/[48,/*Optional*/[0,/*Type*/[1,name_1492]]];
                    } else {
                        let name_1493 = this.getgo(61);
                        result_1467 = /*NodeTypeValue*/[48,/*Type*/[1,name_1493]];
                    }
                } break;

                case 62: {
                    {
                        let name_1494 = this.getgo(62);
                        if (this.tok() == 90) {
                            this.next();
                            result_1467 = /*TArrow*/[22,this.parseExpr(),[/*TVar*/[23,name_1494,null,null,true]],null];
                        } else result_1467 = /*TIdent*/[1,name_1494];
                    }
                } break;

                case 66: {
                    {
                        let value_1495 = this.getgo(66);
                        value_1495 = value_1495.split('\\').join('\\\\');
                        result_1467 = /*TString*/[0,value_1495];
                    }
                } break;

                case 64: {
                    {
                        let str_1496 = this.getgo(64);
                        if (this.hasInterpolation(str_1496)) { result_1467 = /*TParenthesis*/[14,this.parseInterpolations(str_1496)] } else result_1467 = /*TString*/[0,str_1496];
                    }
                } break;

                case 36: {
                    {
                        this.i++;
                        result_1467 = /*TBool*/[2,true];
                    }
                } break;

                case 14: {
                    {
                        this.i++;
                        result_1467 = /*TBool*/[2,false];
                    }
                } break;

                case 34: {
                    {
                        this.i++;
                        result_1467 = /*TThis*/[3];
                    }
                } break;

                case 26: {
                    {
                        this.i++;
                        result_1467 = /*TNull*/[7];
                    }
                } break;

                case 59: {
                    {
                        this.i++;
                        result_1467 = /*TSuper*/[4];
                    }
                } break;

                case 40: {
                    {
                        let parsed_1497 = this.parseVar();
                        if (parsed_1497.length > 1) { result_1467 = /*TVars*/[24,parsed_1497] } else result_1467 = parsed_1497[0];
                    }
                } break;

                case 23: {
                    {
                        let parsed_1498 = this.parseVar();
                        if (parsed_1498.length > 1) { result_1467 = /*TVars*/[24,parsed_1498] } else result_1467 = parsed_1498[0];
                    }
                } break;

                case 37: {
                    {
                        this.i++;
                        let expr_1499 = this.parseExpr();
                        let vars_1500 = [];
                        let t_1501 = [];
                        let v_1502 = [];
                        let catches_1503 = [];
                        while (this.tok() == 6) {
                            this.step(6);
                            this.step(80);
                            let name_1504 = this.getgo(62);
                            vars_1500.push(name_1504);
                            this.step(76);
                            let type_1505 = this.parseType();
                            {
                                t_1501.push(type_1505);
                            };
                            v_1502.push(/*TVar*/[23,name_1504,type_1505,null,true]);
                            this.step(79);
                            catches_1503.push(this.parseExpr());
                        };
                        result_1467 = /*TTry*/[27,expr_1499,t_1501,v_1502,catches_1503];
                    }
                } break;

                case 28: {
                    {
                        this.i++;
                        let path_1506 = [];
                        if (this.tok() == 62) {
                            path_1506.push(this.getgo(62));
                            while (this.tok() == 77) {
                                this.i++;
                                path_1506.push(this.getgo(62));
                            };
                        };
                        let el_1507 = [];
                        while (this.tok() != 28 && this.tok() != 74 && this.tok() != 0) {
                            el_1507.push(this.parseExpr());
                        };
                        result_1467 = /*TModule*/[35,path_1506,el_1507];
                        Project.data.set(result_1467, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
                        return result_1467;
                    }
                } break;

                case 11: {
                    {
                        this.i++;
                        let t_1508 = this.parseType();
                        let valuesType_1509 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            valuesType_1509 = this.parseType();
                        };
                        let extend_1510 = null;
                        if (this.tok() == 12) {
                            this.i++;
                            extend_1510 = this.parseType();
                        };
                        this.step(74);
                        let names_1511 = [];
                        while (this.tok() != 73) {
                            while (this.tok() == 70) atts_1465.push(this.parseAttribute());
                            atts_1465 = [];
                            names_1511.push(this.parseExpr());
                        };
                        this.step(73);
                        result_1467 = /*TEnum*/[37,t_1508,names_1511,valuesType_1509,extend_1510];
                    }
                } break;

                case 7: case 22: {
                    {
                        let att = atts_1465;
                        atts_1465 = [];
                        const me = this.parseClass();
                        Project.mapAttributes.set(me, att);
                        result_1467 = me;
                    }
                } break;

                case 16: {
                    result_1467 = this.parseFunction()
                } break;

                case 72: {
                    {
                        this.i++;
                        let el_1512 = [];
                        let values_1513 = [];
                        let isMap = false;
                        if (this.tok() != 71) { while (true) {
                            if (this.tok() == 76) {
                                isMap = true;
                                this.next();
                                break;
                            };
                            el_1512.push(this.parseExpr());
                            if (this.tok() == 76) {
                                this.i++;
                                values_1513.push(this.parseExpr());
                                isMap = true;
                            };
                            if (this.tok() == 75) {
                                this.i++;
                                if (this.tok() == 71) { this.fail('Unexpected `]`, remove trailing comma `,` before `]` or add a value after `,` if required') };
                            } else break;
                        } };
                        this.step(71);
                        if (isMap) { result_1467 = /*TMap*/[32,el_1512,values_1513] } else result_1467 = /*TArray*/[31,el_1512];
                    }
                } break;

                case 25: {
                    {
                        this.i++;
                        let t_1514 = this.parseType();
                        let names_1515 = [];
                        let values_1516 = [];
                        if (this.tok() == 74) {
                            this.i++;
                            if (this.tok() == 73) { this.step(73) } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                                while (this.tok() != 73) {
                                    names_1515.push(this.getgo(62));
                                    this.step(76);
                                    values_1516.push(this.parseExpr());
                                    if (this.tok() == 75) { this.i++ };
                                };
                                this.step(73);
                            };
                        };
                        this.step(80);
                        let args_1517 = [];
                        let argNames_1518 = [];
                        if (this.tok() != 79) { while (true) {
                            {
                                const temp_1519 = this.tok();
                                switch (temp_1519) {
                                case 79: {
                                    this.fail('Unexpected `)`, remove trailing `,` comma')
                                } break;

                                case 61: {
                                    {
                                        argNames_1518.push(null);
                                        args_1517.push(this.parseExpr());
                                        if (this.tok() == 76) {
                                            this.step(76);
                                            this.parseType();
                                        };
                                    }
                                } break;

                                default:
                                {
                                    if (this.lex.token[this.i + 1] == 76) {
                                        argNames_1518.push(this.getgo(62));
                                        this.step(76);
                                    } else {
                                        argNames_1518.push(null);
                                    };
                                    args_1517.push(this.parseExpr());
                                }
                                };
                            };
                            if (this.tok() == 75) { this.i++ } else break;
                        } };
                        this.step(79);
                        result_1467 = /*TNew*/[30,[],t_1514,args_1517,names_1515,values_1516,argNames_1518];
                    }
                } break;

                case 33: {
                    {
                        this.i++;
                        this.step(80);
                        let exprs_1520 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.i++;
                            exprs_1520.push(this.parseExpr());
                        };
                        this.step(79);
                        this.step(74);
                        let cases_1521 = [];
                        let conds_1522 = [];
                        let guards_1523 = [];
                        while (this.tok() != 73) {
                            this.step(4);
                            if (this.tok() == 1) {
                                conds_1522.push(/*TUnderscore*/[42]);
                                this.i++;
                            } else conds_1522.push(this.parseExpr());
                            guards_1523.push(null);
                            this.step(76);
                            let exs = [];
                            while (this.tok() != 4 && this.tok() != 73) {
                                exs.push(this.parseExpr());
                            };
                            cases_1521.push(/*TBlock*/[11,exs]);
                        };
                        this.step(73);
                        result_1467 = /*TSwitch*/[34,exprs_1520,conds_1522,guards_1523,cases_1521];
                    }
                } break;

                case 15: {
                    {
                        this.i++;
                        const start_1524 = this.i;
                        this.step(80);
                        if (this.tok() == 23 || this.tok() == 40 || (this.tok() == 62 && this.lex.token[this.i + 1] != 20 && ['int', 'auto', 'char'].includes(this.print()))) {
                            this.i++;
                            let name_1525 = this.getgo(62);
                            {
                                if (this.print() == 'of' || this.print() == 'in') {
                                    this.i++;
                                    let values_1526 = this.print();
                                    this.i++;
                                    while (this.tok() != 79 && this.tok() != 0) {
                                        if (this.tok() == 107 || this.tok() == 111) { values_1526 += ' ' + this.print() + ' ' } else values_1526 += this.print();
                                        this.i++;
                                    };
                                    this.fail(('This loop should be replaced to `for (' + (name_1525) + ' in ' + (values_1526) + ')`'));
                                };
                            };
                            let classic = true;
                            if (this.tok() == 91) { this.i++ } else classic = false;
                            let specialCase = '';
                            if ((this.tok() == 63) && (this.lex.value[this.i] == '0')) { this.i++ } else {
                                while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                    if (this.tok() == 107 || this.tok() == 111) { specialCase += ' ' + this.print() + ' ' } else specialCase += this.print();
                                    this.i++;
                                };
                            };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1525)) { this.i++ } else classic = false;
                            let lesserOrEqual = false;
                            if (this.tok() == 99) { this.i++ } else if (this.tok() == 100) {
                                this.i++;
                                lesserOrEqual = true;
                            } else classic = false;
                            let values_1527 = this.print();
                            this.i++;
                            while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                if (this.tok() == 107 || this.tok() == 111) { values_1527 += ' ' + this.print() + ' ' } else values_1527 += this.print();
                                this.i++;
                            };
                            if (lesserOrEqual) { values_1527 += ' + 1' };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1525)) {
                                this.i++;
                                if (this.tok() == 87) { this.i++ } else classic = false;
                            } else if (this.tok() == 87) {
                                this.i++;
                                if ((this.tok() == 62) && (this.lex.value[this.i] == name_1525)) { this.i++ } else classic = false;
                            } else classic = false;
                            if (this.tok() == 79) {} else classic = false;
                            if ((classic) && (specialCase == '')) { this.fail(('This loop should be replaced to `for (' + (name_1525) + ' in ' + (values_1527) + ')`')) };
                            if (classic) { this.fail(('This loop should be replaced to `for (' + (name_1525) + ' in ' + (specialCase) + ' ... ' + (values_1527) + ')`')) };
                            if (classic) { this.fail('This loop should be replaced to:\n' + ('var ' + (name_1525) + ' = ' + (specialCase) + '\n') + ('while (' + (name_1525) + ' < ' + (values_1527) + ') {\n') + '\t...\n' + ('\t' + (name_1525) + '++\n') + '}') };
                            this.fail(('Hexa has only `for (' + (name_1525) + ' in values)` syntax'));
                        };
                        let name_1528 = this.getgo(62);
                        this.step(20);
                        let values_1529 = this.parseExpr();
                        let range_1530 = null;
                        if (this.tok() == 98) {
                            this.i++;
                            range_1530 = this.parseExpr();
                        };
                        this.step(79);
                        let expression = this.parseExpr();
                        result_1467 = /*TFor*/[46,name_1528,values_1529,expression,range_1530];
                    }
                } break;

                case 32: {
                    {
                        this.next();
                        result_1467 = /*TStatic*/[43,this.parseExpr()];
                    }
                } break;

                case 29: {
                    {
                        this.next();
                        result_1467 = /*TPrivate*/[44,this.parseExpr()];
                    }
                } break;

                default:
                this.unexpected()
                };
            };
            if (result_1467 == null) {
                process_22.stdout.write('\n');
                this.fail('Expression is incomplete, current token is: ' + Token.stringify(this.tok()));
            };
            Project.data.set(result_1467, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            if (atts_1465.length > 0) {
                Project.mapAttributes.set(result_1467, atts_1465);
                atts_1465 = [];
            };
            let done = this.i >= this.lex.length;
            while (!done) {
                Project.data.set(result_1467, new NodeData(this.lex.line[this.i], this.lex.column[this.i], this.lex.fileName));
                {
                    const temp_1531 = this.tok();
                    switch (temp_1531) {
                    case 0: {
                        done = true
                    } break;

                    case 72: {
                        {
                            this.i++;
                            let index_1532 = this.parseExpr();
                            if (this.tok() == 75) { this.fail('Expected `]` instead of `,` comma. Hexa supports only one `[index]` value.\n' + ('Note, you are indexing this expression: `' + (Node.stringify(result_1467)) + '[' + (Node.stringify(index_1532)) + ']`\n') + ('To create array here, wrap it with `{` as `{[' + (Node.stringify(index_1532)) + ', ...]}` so it doesn\'t index previous expression.')) };
                            this.step(71);
                            result_1467 = /*TIndex*/[33,result_1467,index_1532];
                        }
                    } break;

                    case 57: {
                        {
                            this.i++;
                            {
                                const temp_1533 = this.tok();
                                switch (temp_1533) {
                                case 61: {
                                    result_1467 = /*TIs*/[40,result_1467,this.parseType()]
                                } break;

                                default:
                                this.fail('Cannot parse type `' + Token.stringify(this.tok()) + '`')
                                };
                            };
                        }
                    } break;

                    case 58: {
                        {
                            this.i++;
                            let kind_1534 = this.tok();
                            if (this.tok() == 89) { this.i++ } else if (this.tok() == 81) { this.i++ } else kind_1534 = 123;
                            result_1467 = /*TAs*/[41,result_1467,kind_1534,this.parseType()];
                        }
                    } break;

                    case 80: {
                        {
                            let args_1535 = [];
                            let argNames_1536 = [];
                            this.i++;
                            if (this.tok() != 79) { while (true) {
                                {
                                    const temp_1537 = this.tok();
                                    switch (temp_1537) {
                                    case 79: {
                                        this.fail('Unexpected `)`, remove trailing `,` comma')
                                    } break;

                                    case 61: {
                                        {
                                            argNames_1536.push(null);
                                            args_1535.push(this.parseExpr());
                                            if (this.tok() == 76) {
                                                this.step(76);
                                                this.parseType();
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        if ((this.tok() == 62) && (this.lex.token[this.i + 1] == 76)) {
                                            argNames_1536.push(this.getgo(62));
                                            this.step(76);
                                        } else {
                                            argNames_1536.push(null);
                                        };
                                        args_1535.push(this.parseExpr());
                                    }
                                    };
                                };
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            result_1467 = /*TCall*/[12,result_1467,args_1535,argNames_1536];
                        }
                    } break;

                    case 90: {
                        {
                            this.next();
                            result_1467 = /*TArrow*/[22,this.parseExpr(),[result_1467],null];
                        }
                    } break;

                    case 87: {
                        {
                            {
                                const temp_1538 = result_1467;
                                switch (temp_1538&&temp_1538[0]) {
                                case 19: {
                                    return result_1467
                                } break;
                                };
                            };
                            this.i++;
                            result_1467 = /*TUnop*/[19,87,true,result_1467];
                        }
                    } break;

                    case 86: {
                        {
                            {
                                const temp_1539 = result_1467;
                                switch (temp_1539&&temp_1539[0]) {
                                case 19: {
                                    return result_1467
                                } break;
                                };
                            };
                            this.i++;
                            result_1467 = /*TUnop*/[19,86,true,result_1467];
                        }
                    } break;

                    case 77: {
                        {
                            this.i++;
                            {
                                const temp_1540 = this.tok();
                                switch (temp_1540) {
                                case 61: {
                                    result_1467 = /*TDotUpper*/[29,result_1467,this.getgo(61)]
                                } break;

                                default:
                                result_1467 = /*TDot*/[28,result_1467,this.getgo(62)]
                                };
                            };
                        }
                    } break;

                    case 81: {
                        {
                            this.i++;
                            if (this.tok() == 77) {
                                let name_1541 = this.getgo(62);
                                result_1467 = /*TDot*/[28,result_1467,name_1541];
                            } else if (this.tok() == 81) {
                                this.i++;
                                result_1467 = /*TElvis*/[47,result_1467,this.parseExpr()];
                            } else {
                                let eif_1542 = this.parseExpr();
                                this.step(76);
                                let eelse_1543 = this.parseExpr();
                                result_1467 = /*TIf*/[13,[result_1467],eif_1542,eelse_1543];
                            };
                        }
                    } break;

                    case 113: {
                        {
                            this.i++;
                            result_1467 = this.parseExpr();
                        }
                    } break;

                    default:
                    {
                        const t_1544 = this.tok();
                        if (Parser.isBinop(t_1544) && this.offset(1) == 91) {
                            let op_1545 = this.tok();
                            this.i++;
                            this.i++;
                            let b_1546 = this.parseExpr();
                            result_1467 = /*TAssignop*/[10,result_1467,op_1545,b_1546];
                        } else if (Parser.isBinop(t_1544)) {
                            this.i++;
                            let b_1547 = this.parseExpr();
                            let a_1548 = result_1467;
                            {
                                const temp_1549 = b_1547;
                                switch (temp_1549&&temp_1549[0]) {
                                case 9: {
                                    {
                                        const aa = temp_1549[1];
                                        const op_1550 = temp_1549[2];
                                        const bb = temp_1549[3];
                                        {
                                            let tp = Parser.precedence(t_1544);
                                            let tLeft = tp > 99;
                                            tp = tp % 100;
                                            let bp = Parser.precedence(op_1550);
                                            let bLeft = bp > 99;
                                            bp = bp % 100;
                                            if (bp > tp) { result_1467 = /*TBinop*/[9,/*TBinop*/[9,result_1467,t_1544,aa],op_1550,bb] } else result_1467 = /*TBinop*/[9,result_1467,t_1544,b_1547];
                                        };
                                    }
                                } break;

                                default:
                                result_1467 = /*TBinop*/[9,result_1467,t_1544,b_1547]
                                };
                            };
                        } else done = true;
                    }
                    };
                };
            };
            if (result_1467 == null) {
                process_22.stdout.write('\n');
                this.fail('Expression postfix is incomplete');
            };
            if (atts_1465.length > 0) {
                Project.mapAttributes.set(result_1467, atts_1465);
                atts_1465 = [];
            };
            Project.data.set(result_1467, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            return result_1467;
        };
        parseVar(external_1551) {
            let const_1552 = this.tok() == 23;
            this.i++;
            let vars_1553 = [];
            if (this.tok() == 83) {
                this.i++;
                const name_1554 = (this.tok() == 62)? (this.print()) : 'name';
                const prefix_1555 = (const_1552)? ('let') : 'var';
                this.fail(('Hexa doesn\'t support PHP-style variables, replace it to `' + (prefix_1555) + ' ' + (name_1554) + '`'));
            };
            if (this.tok() == 61) {
                const name_1556 = this.getgo(61).toLowerCase();
                const prefix_1557 = (const_1552)? ('let') : 'var';
                this.fail(('Variable name should start with lowercase, like this `' + (prefix_1557) + ' ' + (name_1556) + '`'));
            };
            const parseSingleVar = () => {
                let varname = this.getgo(62);
                if (varname.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                let type_1558 = null;
                if (this.tok() == 76) {
                    this.i++;
                    type_1558 = this.parseType();
                };
                let expr_1559 = null;
                if (this.tok() == 91) {
                    this.i++;
                    expr_1559 = this.parseExpr();
                };
                return /*TVar*/[23,varname,type_1558,expr_1559,const_1552,(() => {
                    const result_1560 = external_1551;
                    if (result_1560 != null) { return result_1560 };
                    return false;
                })()];
            };
            const parseSingleBinding = () => {
                let path_1561 = [];
                while (this.tok() == 62 && this.offset(1) == 77) {
                    path_1561.push(this.getgo(62));
                    this.i++;
                };
                path_1561.push(this.getgo(61));
                this.step(77);
                path_1561.push(this.getgo(61));
                if (this.tok() == 80 && this.offset(1) == 79) { this.fail('Don\'t use empty parenthesis for `let ' + path_1561.join('.') + '()` bindings') };
                let bind = [];
                if (this.tok() == 80) {
                    do {{
                        this.i++;
                        if (this.tok() == 1) {
                            this.i++;
                            bind.push(null);
                        } else bind.push(/*TVar*/[23,this.getgo(62),null,null,const_1552]);
                    }} while (this.tok() == 75);
                    this.step(79);
                };
                this.step(91);
                let expr_1562 = this.parseExpr();
                return /*TEnumExtract*/[38,path_1561,bind,expr_1562];
            };
            while (true) {
                if (this.tok() == 61 || (this.tok() == 62 && this.offset(1) == 77)) { vars_1553.push(parseSingleBinding()) } else vars_1553.push(parseSingleVar());
                if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
            };
            return vars_1553;
            let const_1563 = this.tok() == 23;
            this.i++;
            let vars_1564 = [];
            {
                const temp_1565 = this.tok();
                switch (temp_1565) {
                case 62: {
                    while (true) {
                        let varname_1566 = this.getgo(62);
                        if (varname_1566.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                        let type_1567 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            type_1567 = this.parseType();
                        };
                        let expr_1568 = null;
                        if (this.tok() == 91) {
                            this.i++;
                            expr_1568 = this.parseExpr();
                        };
                        vars_1564.push(/*TVar*/[23,varname_1566,type_1567,expr_1568,const_1563,external_1551]);
                        if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
                    }
                } break;

                case 61: {
                    {
                        let left = /*TIdent*/[1,this.getgo(61)];
                        let res_1569 = left;
                        while (this.tok() == 77) {
                            res_1569 = /*TDot*/[28,res_1569,this.getgo(61)];
                        };
                        {
                            const temp_1570 = this.tok();
                            switch (temp_1570) {
                            case 80: {
                                {
                                    let args_1571 = [];
                                    while (this.tok() != 79) {
                                        args_1571.push(this.getgo(62));
                                    };
                                    this.step(91);
                                    let varname_1572 = this.getgo(62);
                                }
                            } break;

                            case 91: {
                                {
                                }
                            } break;

                            default:
                            this.fail('Wrong syntax')
                            };
                        };
                    }
                } break;

                default:
                this.fail('Wrong syntax')
                };
            };
            return vars_1564;
        };
        parseFunction(parseBody, external_1573) {
            const parseBody_1574 = ((parseBody != null))? (parseBody) : true;
            this.i++;
            let expr_1575 = null;
            let name_1576 = null;
            let vars_1577 = [];
            let types_1578 = [];
            let values_1579 = [];
            let pos_1580 = [];
            {
                const temp_1581 = this.tok();
                switch (temp_1581) {
                case 62: {
                    name_1576 = this.getgo(62)
                } break;

                case 61: {
                    this.fail(('Function names can\'t start with uppercase `' + (this.print()) + '` -> `' + (this.print().toLowerCase()) + '`'))
                } break;

                default:
                {
                }
                };
            };
            this.step(80);
            {
                if (this.tok() != 79) { while (true) {
                    let expr_1582 = null;
                    let t_1583 = null;
                    if (this.tok() == 98) { this.i++ };
                    pos_1580.push({line:this.lex.line[this.i], column:this.lex.column[this.i]});
                    let name_1584 = this.getgo(62);
                    if (this.tok() == 76) {
                        this.i++;
                        t_1583 = this.parseType();
                    };
                    if (this.tok() == 91) {
                        this.i++;
                        expr_1582 = this.parseExpr();
                    };
                    vars_1577.push(name_1584);
                    types_1578.push(t_1583);
                    values_1579.push(expr_1582);
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            let rettype_1585 = null;
            if (this.tok() == 76) {
                this.i++;
                rettype_1585 = this.parseType();
            };
            if (parseBody_1574) {
                const temp_1586 = this.tok();
                switch (temp_1586) {
                case 25: {
                    if (this.lex.token[this.i + 1] == 80) {} else expr_1575 = this.parseExpr()
                } break;

                case 73: {
                    {
                    }
                } break;

                case 32: {
                    {
                    }
                } break;

                case 29: {
                    {
                    }
                } break;

                case 16: {
                    {
                    }
                } break;

                case 40: {
                    {
                    }
                } break;

                case 23: {
                    {
                    }
                } break;

                case 70: {
                    {
                        let tmp_1587 = this.i;
                        while (this.tok() == 70) this.parseAttribute();
                        if (this.tok() != 73 && this.tok() != 32 && this.tok() != 29 && this.tok() != 16) {
                            this.i = tmp_1587;
                            expr_1575 = this.parseExpr();
                        } else this.i = tmp_1587;
                    }
                } break;

                default:
                expr_1575 = this.parseExpr()
                };
            };
            let v_1588 = [];
            {
                let i_1589 = 0;
                let it_1590 = 0;
                let at_1591 = vars_1577.length;
                while (it_1590 < at_1591) {
                    i_1589 = it_1590;
                    it_1590++;
                    {
                        const n_1592 = /*TVar*/[23,vars_1577[i_1589],types_1578[i_1589],values_1579[i_1589],true,false];
                        Project.data.set(n_1592, new NodeData(pos_1580[i_1589].line, pos_1580[i_1589].column, this.lex.fileName));
                        v_1588.push(n_1592);
                    };
                };
            };
            return /*TFunction*/[21,name_1576,expr_1575,v_1588,rettype_1585,external_1573];
        };
        parseClass(external_1593) {
            const _classExternal = this.classExternal;
            this.classExternal = external_1593;
            let isInterface = this.tok() == (22)? (1) : 0;
            this.i++;
            let t_1594 = this.parseType();
            let ext_1595 = (this.tok() == 12)? ((() => {
                this.i++;
                return this.parseType();
            })()) : (null);
            let impl_1596 = [];
            while (this.tok() == 18) {
                this.i++;
                impl_1596.push(this.parseType());
            };
            this.step(74);
            let fields_1597 = this.parseFields();
            this.step(73);
            let me_1598 = /*TClass*/[25,t_1594,ext_1595,impl_1596,fields_1597,(() => {
                const result_1599 = external_1593;
                if (result_1599 != null) { return result_1599 };
                return false;
            })(),isInterface];
            this.classExternal = _classExternal;
            return me_1598;
        };
        hasInterpolation(str_1600) {
            let chars = str_1600.split('');
            let i_1601 = 0;
            while (i_1601 < chars.length) {
                if (chars[i_1601] == '\\') { if (i_1601 + 1 < chars.length) { if (chars[i_1601 + 1] == '\\') { i_1601++ } else if (chars[i_1601 + 1] == '(') { return true } } };
                i_1601++;
            };
            return false;
        };
        parseInterpolations(str_1602) {
            const interpolate = (s_1603) => {
                let out = ['"'];
                if (s_1603.length < 2) { return s_1603 };
                let i_1604 = 0;
                const s_1605 = s_1603.split('"').join('\\"');
                const pushInterpolator = () => {
                    i_1604++;
                    i_1604++;
                    const pushParen = () => {
                        i_1604++;
                        while (i_1604 < s_1605.length) {
                            out.push(s_1605.charAt(i_1604));
                            if (s_1605.charAt(i_1604) == '(') {
                                pushParen();
                                continue;
                            };
                            if (s_1605.charAt(i_1604) == ')') {
                                i_1604++;
                                return;
                            };
                            i_1604++;
                        };
                        throw 'String interpolation error: unclosed inner parenthesis';
                    };
                    while (i_1604 < s_1605.length) {
                        out.push(s_1605.charAt(i_1604));
                        if (s_1605.charAt(i_1604) == '(') {
                            pushParen();
                            continue;
                        };
                        if (s_1605.charAt(i_1604) == ')') {
                            i_1604++;
                            return;
                        };
                        i_1604++;
                    };
                    throw 'String interpolation error: unclosed parenthesis';
                };
                let result_1606 = ['"'];
                while (i_1604 < s_1605.length) {
                    if (s_1605.charAt(i_1604) == '\\' && s_1605.charAt(i_1604 + 1) == '(') {
                        result_1606.push('" + ');
                        out.push('" + (');
                        let ii = i_1604 + 1;
                        pushInterpolator();
                        result_1606.push(s_1605.substring(ii, i_1604 + 1));
                        result_1606.push(' + "');
                        out.push(' + "');
                    } else {
                        out.push(s_1605.charAt(i_1604));
                        result_1606.push(s_1605.charAt(i_1604));
                        i_1604++;
                    };
                };
                result_1606.push('"');
                out.push('"');
                return out.join('');
            };
            let resStr = interpolate(str_1602);
            let tokens_1607 = Lexer.tokenize(Buffer.from(resStr), this.lex.fileName);
            try {
                let parsed_1609 = Parser.toNode(Parser.parseNodes(tokens_1607));
                {
                    const temp_1610 = parsed_1609;
                    switch (temp_1610&&temp_1610[0]) {
                    case 11: {
                        throw 'Parse interpolation error: got a block'
                    } break;

                    default:
                    return parsed_1609
                    };
                };
            } catch (temp_1608) {
                if (true) {
                const e = temp_1608
                {
                    this.fail('Parse interpolation error: ' + e);
                } } else

                throw temp_1608;
            };
        };
        parseAttribute() {
            this.i++;
            let name_1611 = this.getgo(62);
            let values_1612 = [];
            if (this.tok() == 80) {
                this.i++;
                if (this.tok() != 79) { while (true) {
                    values_1612.push(this.parseExpr());
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            return new Attribute(name_1611, values_1612);
        };
        parseType() {
            let path_1613 = [];
            while (this.tok() == 62 && this.offset(1) == 77) {
                path_1613.push(this.getgo(62));
                this.i++;
            };
            let result_1614 = null;
            {
                const temp_1615 = this.tok();
                switch (temp_1615) {
                case 61: {
                    {
                        let name_1616 = this.getgo(61);
                        if (path_1613.length != 0) { name_1616 = path_1613.join('.') + '.' + name_1616 };
                        while (this.tok() == 77) {
                            this.i++;
                            this.getgo(61);
                        };
                        let sresult = (this.tok() == 99)? ((() => {
                            this.i++;
                            this.parametricTypeNesting++;
                            let params_1617 = [this.parseType()];
                            while (this.tok() == 75) {
                                this.i++;
                                params_1617.push(this.parseType());
                            };
                            if (this.parametricTypeNestingToken == 0) { this.parametricTypeNestingToken = this.tok() };
                            {
                                const temp_1618 = this.parametricTypeNestingToken;
                                switch (temp_1618) {
                                case 96: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 0;
                                        this.i++;
                                    }
                                } break;

                                case 106: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 96;
                                    }
                                } break;

                                case 108: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 108;
                                    }
                                } break;

                                default:
                                this.unexpected()
                                };
                            };
                            if (this.parametricTypeNesting < 0) { this.fail('parametricTypeNesting < 0') };
                            return /*ParametricType*/[2,name_1616,params_1617];
                        })()) : /*Type*/[1,name_1616];
                        if (this.tok() == 90) {
                            this.i++;
                            sresult = /*Function*/[3,[sresult],this.parseType()];
                        };
                        result_1614 = sresult;
                    }
                } break;

                case 72: {
                    {
                        if (path_1613.length != 0) { this.fail('Token.BkOpen') };
                        this.i++;
                        let res_1619 = null;
                        {
                            const temp_1620 = this.tok();
                            switch (temp_1620) {
                            case 71: {
                                {
                                    this.i++;
                                    res_1619 = /*ParametricType*/[2,'Array',[/*Object*/[5,[],[]]]];
                                }
                            } break;

                            case 76: {
                                {
                                    this.i++;
                                    if (this.tok() == 71) {
                                        this.i++;
                                        res_1619 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], /*Object*/[5,[],[]]]];
                                    } else {
                                        res_1619 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], this.parseType()]];
                                    };
                                }
                            } break;

                            default:
                            {
                                let key = this.parseType();
                                let innerRes = (this.tok() == 76)? ((() => {
                                    this.i++;
                                    return /*ParametricType*/[2,'Map',[key, this.parseType()]];
                                })()) : /*ParametricType*/[2,'Array',[key]];
                                this.step(71);
                                if (this.tok() == 90) {
                                    this.i++;
                                    innerRes = /*Function*/[3,[res_1619],this.parseType()];
                                };
                                res_1619 = innerRes;
                            }
                            };
                        };
                        result_1614 = res_1619;
                    }
                } break;

                case 74: {
                    {
                        if (path_1613.length != 0) { this.fail('Token.BrOpen') };
                        this.i++;
                        let sresult_1621 = (this.tok() == 73)? (/*Object*/[5,[],[]]) : (() => {
                            let names_1622 = [];
                            let types_1623 = [];
                            while (this.tok() != 73) {
                                names_1622.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1623.push(this.parseType());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            return /*Object*/[5,names_1622,types_1623];
                        })();
                        this.step(73);
                        if (this.tok() == 90) {
                            this.i++;
                            sresult_1621 = /*Function*/[3,[sresult_1621],this.parseType()];
                        };
                        result_1614 = sresult_1621;
                    }
                } break;

                case 80: {
                    {
                        if (path_1613.length != 0) { this.fail('Token.POpen') };
                        this.i++;
                        let args_1624 = [];
                        while (this.tok() != 79) {
                            this.parseType();
                            if (this.tok() == 76) {
                                this.i++;
                                args_1624.push(this.parseType());
                            };
                            if (this.tok() == 75) { this.i++ };
                        };
                        this.step(79);
                        this.step(90);
                        result_1614 = /*Function*/[3,args_1624,this.parseType()];
                    }
                } break;

                case 62: {
                    {
                        let res_1625 = null;
                        {
                            const temp_1626 = this.offset(1);
                            switch (temp_1626) {
                            case 76: {
                                {
                                    let argName = this.getgo(this.tok());
                                    this.step(76);
                                    let argType = this.parseType();
                                    res_1625 = /*FunctionArg*/[4,argName,argType,null];
                                }
                            } break;

                            default:
                            this.fail(('Type name `' + (this.print()) + '` can not start with lowercase'))
                            };
                        };
                        result_1614 = res_1625;
                    }
                } break;

                default:
                this.fail('Expected type, parsed `' + Token.stringify(this.tok()) + '`')
                };
            };
            if (this.tok() == 81) { result_1614 = /*Optional*/[0,result_1614] };
            while (this.tok() == 81) this.i++;
            if (this.tok() == 90) {
                this.i++;
                result_1614 = /*Function*/[3,[result_1614],this.parseType()];
            };
            return result_1614;
        };
    }
    Parser.uuid = 0
    Parser.toNode = (nodes) => {
            if (nodes.length == 0) { return null };
            if (nodes.length > 1) { return /*TBlock*/[11,nodes] };
            return nodes[0];
        };
    Parser.parseNodes = (lexe) => {
            const parser = new Parser(lexe);
            return parser.nodes;
        };
    Parser.uid = () => { return Parser.uuid++ };
    Parser.precedence = (op_1627) => {
            const left_1628 = 100;
            const right = 0;
            {
                const temp_1629 = op_1627;
                switch (temp_1629) {
                case 101: {
                    return 0 + left_1628
                } break;

                case 102: {
                    return 1 + left_1628
                } break;

                case 94: {
                    return 1 + left_1628
                } break;

                case 111: {
                    return 2 + left_1628
                } break;

                case 107: {
                    return 2 + left_1628
                } break;

                case 105: {
                    return 3 + left_1628
                } break;

                case 106: {
                    return 3 + left_1628
                } break;

                case 108: {
                    return 3 + left_1628
                } break;

                case 104: {
                    return 4 + left_1628
                } break;

                case 112: {
                    return 4 + left_1628
                } break;

                case 109: {
                    return 4 + left_1628
                } break;

                case 95: {
                    return 5 + left_1628
                } break;

                case 103: {
                    return 5 + left_1628
                } break;

                case 96: {
                    return 5 + left_1628
                } break;

                case 99: {
                    return 5 + left_1628
                } break;

                case 97: {
                    return 5 + left_1628
                } break;

                case 100: {
                    return 5 + left_1628
                } break;

                case 92: {
                    return 7 + left_1628
                } break;

                case 93: {
                    return 8 + left_1628
                } break;

                case 91: {
                    return 10 + right
                } break;

                default:
                this.fail('No precedence for ' + Token.stringify(op_1627))
                };
            };
        };
    Parser.isBinop = (t_1630) => {
            const temp_1631 = t_1630;
            switch (temp_1631) {
            case 111: {
                return true
            } break;

            case 102: {
                return true
            } break;

            case 94: {
                return true
            } break;

            case 107: {
                return true
            } break;

            case 91: {
                return true
            } break;

            case 95: {
                return true
            } break;

            case 103: {
                return true
            } break;

            case 96: {
                return true
            } break;

            case 97: {
                return true
            } break;

            case 99: {
                return true
            } break;

            case 100: {
                return true
            } break;

            case 112: {
                return true
            } break;

            case 104: {
                return true
            } break;

            case 109: {
                return true
            } break;

            case 92: {
                return true
            } break;

            case 93: {
                return true
            } break;

            case 105: {
                return true
            } break;

            case 106: {
                return true
            } break;

            case 108: {
                return true
            } break;

            case 101: {
                return true
            } break;

            default:
            return false
            };
        };
    var TestLexer = class {
    }
    TestLexer.passed = 0
    TestLexer.overall = 0
    TestLexer.test = () => {
            console.log('TestLexer begin');
            TestLexer.compare('#!/bin', [], []);
            TestLexer.compare('#!/bin\n', [], []);
            TestLexer.compare('#!/bin\n//', [], []);
            TestLexer.compare('#!/bin\r\n123', [63], ['123']);
            TestLexer.compare('#!/bin\n\r123', [63], ['123']);
            TestLexer.compare('#!/bin\n123', [63], ['123']);
            TestLexer.compare('', [], []);
            TestLexer.compare('\n', [], []);
            TestLexer.compare('\n\n', [], []);
            TestLexer.compare('\r\r\n\r\n\r\t', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('  ', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('/* */', [], []);
            TestLexer.compare('/*\n*/', [], []);
            TestLexer.compare('//', [], []);
            TestLexer.compare('// ', [], []);
            TestLexer.compare('//\n', [], []);
            TestLexer.compare('123', [63], ['123']);
            TestLexer.compare(' 0 ', [63], ['0']);
            TestLexer.compare('0', [63], ['0']);
            TestLexer.compare('1 2 3', [63, 63, 63], ['1', '2', '3']);
            TestLexer.compare('0x1', [63], ['0x1']);
            TestLexer.compare('0x0', [63], ['0x0']);
            TestLexer.compare('0xF', [63], ['0xF']);
            TestLexer.compare('0xFA', [63], ['0xFA']);
            TestLexer.compare('0xFABCDEF', [63], ['0xFABCDEF']);
            TestLexer.compare('0x1F2A3B4C5D6E7F0', [63], ['0x1F2A3B4C5D6E7F0']);
            TestLexer.compare('-123', [107, 63], ['-', '123']);
            TestLexer.compare('+123', [111, 63], ['+', '123']);
            TestLexer.compare('0.123', [60], ['0.123']);
            TestLexer.compare('0.0', [60], ['0.0']);
            TestLexer.compare('0.0e+1', [60], ['0.0e+1']);
            TestLexer.compare('0.0E-1', [60], ['0.0E-1']);
            TestLexer.compare('0E-123', [60], ['0E-123']);
            TestLexer.compare('123e123', [60], ['123e123']);
            TestLexer.compare('1 2.0 3', [63, 60, 63], ['1', '2.0', '3']);
            TestLexer.compare('\'s\'', [64], ['\'s\'']);
            TestLexer.compare('"s"', [64], ['\'s\'']);
            TestLexer.compare('\"s\"', [64], ['\'s\'']);
            TestLexer.compare('`s`', [66], ['`s`']);
            TestLexer.compare('`aaa bbb``ccc` `ddd`', [66, 66], ['`aaa bbbccc`', '`ddd`']);
            TestLexer.compare('````````', [66], ['``']);
            TestLexer.compare('``', [66], ['``']);
            TestLexer.compare('``\n', [66], ['``']);
            TestLexer.compare('``\n``', [66, 66], ['``', '``']);
            TestLexer.compare('\'s\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\r\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\n                s\'', [64], ['\'s\n\t\t\t\ts\'']);
            TestLexer.compare('"s\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"s\r\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"\r\ns\r\n"', [64], ['\'\ns\n\'']);
            TestLexer.compare('`s\n`', [66], ['`s\n`']);
            TestLexer.compare('`s\r\n`', [66], ['`s\r\n`']);
            TestLexer.compare('`s\r`', [66], ['`s\r`']);
            TestLexer.compare('T', [61], ['T']);
            TestLexer.compare('T val', [61, 62], ['T', 'val']);
            TestLexer.compare('T val Type', [61, 62, 61], ['T', 'val', 'Type']);
            TestLexer.compare('_T', [62], ['_T']);
            TestLexer.compare('v', [62], ['v']);
            TestLexer.compare('_v', [62], ['_v']);
            TestLexer.compare('_123', [62], ['_123']);
            TestLexer.compare(' } ', [73], ['}']);
            TestLexer.compare('==', [95], ['==']);
            TestLexer.compare('===', [95, 91], ['==', '=']);
            TestLexer.compare('== =', [95, 91], ['==', '=']);
            TestLexer.compare('= ==', [91, 95], ['=', '==']);
            TestLexer.compare('=====', [95, 95, 91], ['==', '==', '=']);
            TestLexer.compare('> >> >>> . .. ...', [96, 106, 108, 77, 77, 77, 98], ['>', '>>', '>>>', '.', '.', '.', '...']);
            TestLexer.compare('>>>>>>.......', [108, 108, 98, 98, 77], ['>>>', '>>>', '...', '...', '.']);
            console.log(('TestLexer done ' + (Math.round((TestLexer.passed / TestLexer.overall) * 100)) + '% (' + (TestLexer.passed) + '/' + (TestLexer.overall) + ')'));
        };
    TestLexer.shouldError = (input, includes) => {
            TestLexer.overall++;
            try { Lexer.tokenize(Buffer.from(input), 'TEST') } catch (temp_1632) {
                if (true) {
                const e = temp_1632
                {
                    throw 'got' + e.toString();
                    TestLexer.passed++;
                    return;
                } } else

                throw temp_1632;
            };
            throw ('TestLexer test fail: `' + (input) + '` did not throw exception.');
        };
    TestLexer.renderInvisibleChars = (input_1633) => { return input_1633.split('\r').join('\\r').split('\n').join('\\n').split('\t').join('\\t') };
    TestLexer.compare = (input_1634, expect, expectValue, expectColumn = null, expectLine = null) => {
            expect.push(0);
            const output = Lexer.tokenize(Buffer.from(input_1634), 'TEST');
            let pos_1635 = 0;
            const incorrect = (text_1636) => {
                let got = Token.stringify(output.token[pos_1635], output.value[pos_1635]);
                got = TestLexer.renderInvisibleChars(got);
                console.log(('Incorrect token `' + (got) + '` in string `' + (TestLexer.renderInvisibleChars(input_1634)) + '` at index ' + (pos_1635) + ''));
                console.log(text_1636);
            };
            TestLexer.overall++;
            for (const ex of $toIterator(expect)) {
                if (ex == 0) { break };
                if (ex != output.token[pos_1635]) {
                    incorrect(('Expected `' + (TestLexer.renderInvisibleChars(Token.stringify(ex))) + '`'));
                    return;
                };
                const value_1637 = Token.stringify(output.token[pos_1635], output.value[pos_1635]);
                if (expectValue[pos_1635] != value_1637) {
                    incorrect(('Expected value `' + (TestLexer.renderInvisibleChars(expectValue[pos_1635])) + '` but got `' + (TestLexer.renderInvisibleChars(value_1637)) + '`'));
                    return;
                };
                pos_1635++;
            };
            TestLexer.passed++;
        };
    var TestParser = class {
    }
    TestParser.passed = 0
    TestParser.overall = 0
    TestParser.test = () => {
            console.log('TestParser begin');
            TestParser.shouldAllEqual(new Map([['', '<!--null-->'], ['  ', '<!--null-->'], ['   ', '<!--null-->'], ['       ', '<!--null-->'], ['\n', '<!--null-->'], ['\n\n', '<!--null-->'], ['\r\r\n\r\n\r\t', '<!--null-->'], ['{}', 'TBlock([])'], ['{{}}', 'TBlock([TBlock([])])'], ['{ 0 0 0 }', 'TBlock([TInt(0),TInt(0),TInt(0)])'], ['0', 'TInt(0)'], [' 0 ', 'TInt(0)'], ['123', 'TInt(123)'], ['12', 'TInt(12)'], ['0x1', 'TInt(0x1)'], ['0x0', 'TInt(0x0)'], ['0xF', 'TInt(0xF)'], ['0xFA', 'TInt(0xFA)'], ['0xFABCDEF', 'TInt(0xFABCDEF)'], ['0.0', 'TFloat(0.0)'], ['0.123', 'TFloat(0.123)'], ['\'s\'', 'TString(s)'], ['\"s\"', 'TString(s)']]));
            TestParser.shouldAllEqual(new Map([['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'TBlock([\n                  TInt(1),\n                  TInt(2),\n                  TInt(3),\n                  TBinop(\n                   TCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n                   +,\n                    TBinop(TInt(5),*,TBinop(TInt(6),/,TInt(3))))])'], ['enum Test { Demo } hello World', 'TBlock([TEnum(Type(Test),[NodeTypeValue(Type(Demo))]),\n                  TIdent(hello),\n                    NodeTypeValue(Type(World))])']]));
            TestParser.shouldAllEqual(new Map([['i ++ ++ i', 'TBlock([TUnop(++,true,TIdent(i)),TUnop(++,false,TIdent(i))])'], ['a + b', 'TBinop(TIdent(a),+,TIdent(b))'], ['a += b', 'TAssignop(TIdent(a),+,TIdent(b))']]));
            TestParser.shouldAllEqual(new Map([['"\\\\(v)"', 'TString(\\\\(v))'], ['"\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(((v)))"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),+,TString())))'], ['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V)\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'], ['"\\(V)s\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqualWithoutTrim(new Map([['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\r\n\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(\n),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V) \\(v) \\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqual(new Map([['using A', 'TUsing(A)'], ['using A, B, C', 'TUsing(A,B,C)']]));
            TestParser.shouldAllEqual(new Map([['module { }', 'TBlock([TModule(,[]),TBlock([])])'], ['module', 'TModule(, [])'], ['code module x code', 'TBlock([TIdent(code),TModule(x,[TIdent(code)])])'], ['code module x module y code', 'TBlock([TIdent(code),TModule(x,[]),TModule(y,[TIdent(code)])])'], ['code module x module y code {code}', 'TBlock([TIdent(code),TModule(x,[]),TModule(y,[TIdent(code)]),TBlock([TIdent(code)])])'], ['module a', 'TModule(a, [])'], ['module a.b', 'TModule(a.b, [])'], ['module class Inner { }', 'TModule(,[TClass(Type(Inner),null,[],[],false)])'], ['module private class Inner {}', 'TModule(,[TPrivate(TClass(Type(Inner),null,[],[],false))])'], ['module a module b', 'TBlock([TModule(a,[]),TModule(b,[])])']]));
            TestParser.shouldAllEqual(new Map([['var a = new Array<A>()', 'TVar(a,null,TNew([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)'], ['a = Array<A>.staticField()', 'TBinop(TIdent(a),=,TCall(TDot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))'], ['a = EnumTest.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField))'], ['a = EnumTest.EnumField(arg)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[TIdent(arg)]))'], ['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))'], ['a = EnumTest<A,B>.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))'], ['var a = b as B, c = d as! B, e = f as? B', 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false,false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false,false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false,false)])'], ['var a = b is B, c = d is B, e = f is B', 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false,false),TVar(c,null,TAs(TIdent(d),Type(B)),false,false),TVar(e,null,TAs(TIdent(f),Type(B)),false,false)])']]));
            TestParser.shouldAllEqual(new Map([['var x:[Array<T>]', 'TVar(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:[Map<K,V> : Array<T>]', 'TVar(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:{}, y:[], z:[:], w:()=>{}', 'TVars([TVar(x,Object([],[]),null,false,false),TVar(y,ParametricType(Array,[Object([],[])]),null,false,false),TVar(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),TVar(w,Function([],Object([],[])),null,false,false)])'], ['let x:()=>()=>()=>()=>Void', 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)']]));
            TestParser.shouldAllEqual(new Map([['enum A {}', 'TEnum(Type(A),[])'], ['enum A { A B C }', 'TEnum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])'], ['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'TEnum(Type(A),[\n                   TCall(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),\n                   NodeTypeValue(Type(B)),\n                   TCall(NodeTypeValue(Type(C)),[v:TMap([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])\n                    ])'], ['enum A { E(v: T<T>?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])'], ['enum A { E(v: T<T?>) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])'], ['enum A { E(v: T?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])']]));
            TestParser.shouldAllEqual(new Map([['new A(a: 1, b: 2)', 'TNew([],Type(A),[TInt(1),TInt(2)],[],[],[a,b])'], ['class A {} var a = new A { } ()', 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew([],Type(A),[],[],[],[]),false,false)])'], ['class A { var field: String } var a = new A { field: "Value" } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field],[TString(Value)],[]),false,false)])'], ['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false),TVar(otherfield,Type(Int),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field,otherfield],[TString(Value),TInt(25)],[]),false,false)])']]));
            TestParser.shouldAllError(['class A { new(a b) {} }', 'class A { new(a, b,) {} }', 'class A { new(,) {} }', 'function f(a b c) {}', 'function f(a b) {}', 'function f(a, b,) {}', 'function f(a,) {}', 'function f(,) {}']);
            TestParser.shouldAllError(['class A { var i: Int { set (value) {} } }', 'class A { var i: Int { get {} set () {} } }', 'class A { var i: Int { get {} set {} } }', 'class A { let i: Int { get {} set (value) {} } }', 'class A { let i: Int { get {} set (value, val) {} } }', 'class A { var i: Int { get {} set (Value) {} } }', 'class A { var i: Int { get (value) {} set (value) {} } }', 'class A { var i: Int {} }']);
            TestParser.shouldAllError(['if(,) {}', 'if(a,) {}', 'switch (,) {}', 'switch (a,) {}', '@att(,) x', '@att(a,) x', '@att(a,b,) x', '@att(a b,) x', '@att(a b) x', 'new T(,)', 'new T(a b,)', 'new T(a,b,)', 'new T(a b)', 'call(1 2)', 'call(1 2,)', 'call(1,2,)', 'call(1,)', 'call(a:1,)', 'call(1:1,)', 'call(a:,)', 'call(a:)', 'call(,)', '[1 2]', '[,]', '[1,]', '[1,2,]', '[1:1 2:2]', '[1:1,2:2,]', '{a:1 b:2}', '{,}', '{a:1,}', '{a:1,b:2,}']);
            TestParser.shouldAllError(['=', '= 1']);
            TestParser.shouldAllEqual(new Map([['if (this) this', 'TIf([TThis],TThis,<!--null-->)'], ['if (this, this) this else break', 'TIf([TThis,TThis],TThis,TBreak)'], ['if (this, let a = this) this else break', 'TIf([TThis,TVar(a,null,TThis,true,false)],TThis,TBreak)'], ['if (let a = this, let b = this, this) this', 'TIf([TVar(a,null,TThis,true,false),TVar(b,null,TThis,true,false),TThis],TThis,<!--null-->)']]));
            TestParser.shouldAllEqual(new Map([['declare var a: T', 'TVar(a,Type(T),null,false,true)'], ['declare let a: T', 'TVar(a,Type(T),null,true,true)'], ['declare function name()', 'TFunction(name,null,[],null,true)'], ['declare function name() hi()', 'TBlock([TFunction(name,null,[],null,true),TCall(TIdent(hi),[])])'], ['declare function name() {}', 'TBlock([TFunction(name,null,[],null,true),TBlock([])])'], ['declare class A {}', 'TClass(Type(A),null,[],[],true)'], ['declare A = B', 'TTypeAlias(Type(A),Type(B))']]));
            TestParser.shouldAllError(['declare var a, b, c', 'declare anything']);
            TestParser.shouldAllEqual(new Map([['push([:])', 'TCall(TIdent(push),[TMap([],[])])'], ['push([])', 'TCall(TIdent(push),[TArray([])])'], ['[].length', 'TDot(TArray([]),length)'], ['[:].length', 'TDot(TMap([],[]),length)'], ['[[:]]', 'TArray([TMap([],[])])']]));
            console.log(('TestParser done ' + (Math.round((TestParser.passed / TestParser.overall) * 100)) + '% (' + (TestParser.passed) + '/' + (TestParser.overall) + ')'));
        };
    TestParser.shouldEqual = (input_1638, test) => {
            const test_1639 = TestParser.deepTrim(test);
            TestParser.shouldEqualWithoutTrim(input_1638, test_1639);
        };
    TestParser.shouldEqualWithoutTrim = (input_1640, test_1641) => {
            TestParser.overall++;
            let lexe_1642 = Lexer.tokenize(Buffer.from(input_1640), 'TEST');
            let parsed_1643 = Parser.toNode(Parser.parseNodes(lexe_1642));
            let res_1644 = TestParser.stringify(parsed_1643);
            if (test_1641 != res_1644) { throw ('TestParser test fail: `' + (input_1640) + '`\n!==: `' + (test_1641) + '`\nGot: `' + (res_1644) + '`\nParsed: `' + (parsed_1643) + '`') };
            TestParser.passed++;
        };
    TestParser.shouldAllEqual = (map_1645) => { for (const input of $toIterator(map_1645.keys())) {
            let test_1646 = map_1645.get(input);
            TestParser.shouldEqual(input, test_1646);
        } };
    TestParser.shouldAllEqualWithoutTrim = (map_1647) => { for (const input of $toIterator(map_1647.keys())) {
            let test_1648 = map_1647.get(input);
            TestParser.shouldEqualWithoutTrim(input, test_1648);
        } };
    TestParser.shouldError = (input_1649) => {
            TestParser.overall++;
            try {
                let lexe_1651 = Lexer.tokenize(Buffer.from(input_1649), 'TEST');
                let parser_1652 = Parser.toNode(Parser.parseNodes(lexe_1651));
            } catch (temp_1650) {
                if (true) {
                const e = temp_1650
                {
                    TestParser.passed++;
                    return;
                } } else

                throw temp_1650;
            };
            throw ('TestParser test fail: `' + (input_1649) + '` did not throw exception.');
        };
    TestParser.shouldAllError = (input_1653) => { for (const str of $toIterator(input_1653)) {
            TestParser.shouldError(str);
        } };
    TestParser.deepTrim = (s_1654) => { return s_1654.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('') };
    TestParser.stringify = (node_1655) => {
            const temp_1656 = node_1655;
            switch (temp_1656&&temp_1656[0]) {
            case null: case undefined: {
                return '<!--null-->'
            } break;

            case 0: {
                {
                    const s_1657 = temp_1656[1];
                    return ('TString(' + (s_1657) + ')');
                }
            } break;

            case 1: {
                {
                    const s_1658 = temp_1656[1];
                    return ('TIdent(' + (s_1658) + ')');
                }
            } break;

            case 2: {
                {
                    const b_1659 = temp_1656[1];
                    return ('TBool(' + (b_1659) + ')');
                }
            } break;

            case 3: {
                return 'TThis'
            } break;

            case 4: {
                return 'TSuper'
            } break;

            case 5: {
                {
                    const s_1660 = temp_1656[1];
                    return ('TInt(' + (s_1660) + ')');
                }
            } break;

            case 6: {
                {
                    const s_1661 = temp_1656[1];
                    return ('TFloat(' + (s_1661) + ')');
                }
            } break;

            case 7: {
                return 'TNull'
            } break;

            case 17: {
                return 'TBreak'
            } break;

            case 18: {
                return 'TContinue'
            } break;

            case 40: {
                {
                    const expr_1662 = temp_1656[1];
                    const type_1663 = temp_1656[2];
                    return 'TAs(' + TestParser.stringify(expr_1662) + ',' + TestParser.stringifyType(type_1663) + ')';
                }
            } break;

            case 41: {
                {
                    const expr_1664 = temp_1656[1];
                    const kind_1665 = temp_1656[2];
                    const type_1666 = temp_1656[3];
                    return 'TAs(' + TestParser.stringify(expr_1664) + ',' + Token.stringify(kind_1665) + ',' + TestParser.stringifyType(type_1666) + ')';
                }
            } break;

            case 9: {
                {
                    const a_1667 = temp_1656[1];
                    const op_1668 = temp_1656[2];
                    const b_1669 = temp_1656[3];
                    return 'TBinop(' + TestParser.stringify(a_1667) + ',' + Token.stringify(op_1668) + ',' + TestParser.stringify(b_1669) + ')';
                }
            } break;

            case 10: {
                {
                    const a_1670 = temp_1656[1];
                    const op_1671 = temp_1656[2];
                    const b_1672 = temp_1656[3];
                    return 'TAssignop(' + TestParser.stringify(a_1670) + ',' + Token.stringify(op_1671) + ',' + TestParser.stringify(b_1672) + ')';
                }
            } break;

            case 11: {
                {
                    const els_1673 = temp_1656[1];
                    return 'TBlock(' + TestParser.stringifyNodeArray(els_1673) + ')';
                }
            } break;

            case 23: {
                {
                    const name_1674 = temp_1656[1];
                    const t_1675 = temp_1656[2];
                    const expr_1676 = temp_1656[3];
                    const const_1677 = temp_1656[4];
                    const external_1678 = temp_1656[5];
                    return ('TVar(' + (name_1674) + ',') + (((t_1675 != null))? (TestParser.stringifyType(t_1675)) : 'null') + ',' + (((expr_1676 != null))? (TestParser.stringify(expr_1676)) : 'null') + (',' + (const_1677) + ',' + (external_1678) + ')');
                }
            } break;

            case 24: {
                {
                    const vars_1679 = temp_1656[1];
                    return 'TVars(' + TestParser.stringifyNodeArray(vars_1679) + ')';
                }
            } break;

            case 21: {
                {
                    const name_1680 = temp_1656[1];
                    const expr_1681 = temp_1656[2];
                    const vars_1682 = temp_1656[3];
                    const rettype_1683 = temp_1656[4];
                    const external_1684 = temp_1656[5];
                    return ('TFunction(' + (name_1680) + ',') + (expr_1681 == (null)? ('null') : TestParser.stringify(expr_1681)) + ',' + TestParser.stringifyNodeArray(vars_1682) + ',' + (((rettype_1683 != null))? (TestParser.stringifyType(rettype_1683)) : 'null') + (',' + (external_1684) + ')');
                }
            } break;

            case 22: {
                {
                    const expr_1685 = temp_1656[1];
                    const vars_1686 = temp_1656[2];
                    const rettype_1687 = temp_1656[3];
                    return 'TArrow(' + (expr_1685 == (null)? ('null') : TestParser.stringify(expr_1685)) + ',' + TestParser.stringifyNodeArray(vars_1686) + ',' + (((rettype_1687 != null))? (TestParser.stringifyType(rettype_1687)) : 'null') + ')';
                }
            } break;

            case 12: {
                {
                    const e_1688 = temp_1656[1];
                    const el_1689 = temp_1656[2];
                    const argNames_1690 = temp_1656[3];
                    {
                        let res_1691 = 'TCall(' + TestParser.stringify(e_1688) + ',[';
                        {
                            let i_1692 = 0;
                            let it_1693 = 0;
                            let at_1694 = el_1689.length;
                            while (it_1693 < at_1694) {
                                i_1692 = it_1693;
                                it_1693++;
                                {
                                    res_1691 += ((argNames_1690[i_1692] == null))? ('') : argNames_1690[i_1692] + ':';
                                    res_1691 += TestParser.stringify(el_1689[i_1692]) + (((i_1692 != el_1689.length - 1))? (',') : '');
                                };
                            };
                        };
                        return res_1691 + '])';
                    };
                }
            } break;

            case 14: {
                {
                    const e_1695 = temp_1656[1];
                    return 'TParenthesis(' + TestParser.stringify(e_1695) + ')';
                }
            } break;

            case 15: {
                {
                    const e_1696 = temp_1656[1];
                    return 'TReturn(' + TestParser.stringify(e_1696) + ')';
                }
            } break;

            case 16: {
                {
                    const e_1697 = temp_1656[1];
                    return 'TThrow(' + TestParser.stringify(e_1697) + ')';
                }
            } break;

            case 37: {
                {
                    const t_1698 = temp_1656[1];
                    const els_1699 = temp_1656[2];
                    return 'TEnum(' + TestParser.stringifyType(t_1698) + ',' + TestParser.stringifyNodeArray(els_1699) + ')';
                }
            } break;

            case 39: {
                {
                    const a_1700 = temp_1656[1];
                    return 'TUsing(' + a_1700.join(',') + ')';
                }
            } break;

            case 35: {
                {
                    const paths = temp_1656[1];
                    const els_1701 = temp_1656[2];
                    return 'TModule(' + paths.join('.') + ',' + TestParser.stringifyNodeArray(els_1701) + ')';
                }
            } break;

            case 32: {
                {
                    const k_1702 = temp_1656[1];
                    const v_1703 = temp_1656[2];
                    return 'TMap([' + (() => {
                        const result_1704 = [];
                        const value_1705 = k_1702;
                        for (const p of $toIterator(value_1705)) result_1704.push(TestParser.stringify(p));
                        return result_1704;
                    })().join(',') + '],[' + (() => {
                        const result_1706 = [];
                        const value_1707 = v_1703;
                        for (const p of $toIterator(value_1707)) result_1706.push(TestParser.stringify(p));
                        return result_1706;
                    })().join(',') + '])';
                }
            } break;

            case 25: {
                {
                    const type_1708 = temp_1656[1];
                    const extend_1709 = temp_1656[2];
                    const implement_1710 = temp_1656[3];
                    const fields_1711 = temp_1656[4];
                    const external_1712 = temp_1656[5];
                    {
                        let res_1713 = 'TClass(' + TestParser.stringifyType(type_1708) + ',';
                        res_1713 += ((extend_1709 != null))? (TestParser.stringifyType(extend_1709)) : 'null,';
                        res_1713 += TestParser.stringifyNodeTypeArray(implement_1710) + ',';
                        res_1713 += TestParser.stringifyNodeArray(fields_1711) + ',';
                        res_1713 += external_1712 + ')';
                        return res_1713;
                    };
                }
            } break;

            case 30: {
                {
                    const path_1714 = temp_1656[1];
                    const t_1715 = temp_1656[2];
                    const args_1716 = temp_1656[3];
                    const names_1717 = temp_1656[4];
                    const values_1718 = temp_1656[5];
                    const argNames_1719 = temp_1656[6];
                    return 'TNew([' + path_1714.join('.') + '],' + TestParser.stringifyType(t_1715) + ',' + TestParser.stringifyNodeArray(args_1716) + ',[' + names_1717.join(',') + '],' + TestParser.stringifyNodeArray(values_1718) + ',[' + argNames_1719.join(',') + '])';
                }
            } break;

            case 48: {
                {
                    const type_1720 = temp_1656[1];
                    return 'NodeTypeValue(' + TestParser.stringifyType(type_1720) + ')';
                }
            } break;

            case 8: {
                {
                    const alias_1721 = temp_1656[1];
                    const value_1722 = temp_1656[2];
                    return 'TTypeAlias(' + TestParser.stringifyType(alias_1721) + ',' + TestParser.stringifyType(value_1722) + ')';
                }
            } break;

            case 28: {
                {
                    const l = temp_1656[1];
                    const r = temp_1656[2];
                    return 'TDot(' + TestParser.stringify(l) + ',' + r + ')';
                }
            } break;

            case 29: {
                {
                    const l_1723 = temp_1656[1];
                    const r_1724 = temp_1656[2];
                    return 'TDotUpper(' + TestParser.stringify(l_1723) + ',' + r_1724 + ')';
                }
            } break;

            case 44: {
                {
                    const expr_1725 = temp_1656[1];
                    return 'TPrivate(' + TestParser.stringify(expr_1725) + ')';
                }
            } break;

            case 13: {
                {
                    const econd_1726 = temp_1656[1];
                    const eif_1727 = temp_1656[2];
                    const eelse_1728 = temp_1656[3];
                    return 'TIf(' + TestParser.stringifyNodeArray(econd_1726) + ',' + TestParser.stringify(eif_1727) + ',' + TestParser.stringify(eelse_1728) + ')';
                }
            } break;

            case 31: {
                {
                    const el_1729 = temp_1656[1];
                    return 'TArray(' + TestParser.stringifyNodeArray(el_1729) + ')';
                }
            } break;

            case 19: {
                {
                    const op_1730 = temp_1656[1];
                    const postfix_1731 = temp_1656[2];
                    const e_1732 = temp_1656[3];
                    return 'TUnop(' + Token.stringify(op_1730) + ',' + postfix_1731 + ',' + TestParser.stringify(e_1732) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1655 + '-->'
            };
        };
    TestParser.stringifyNodeArray = (arr) => { return '[' + (() => {
            const result_1733 = [];
            const value_1734 = arr;
            for (const e of $toIterator(value_1734)) result_1733.push(TestParser.stringify(e));
            return result_1733;
        })().join(',') + ']' };
    TestParser.stringifyNodeTypeArray = (arr_1735) => { return '[' + (() => {
            const result_1736 = [];
            const value_1737 = arr_1735;
            for (const e of $toIterator(value_1737)) result_1736.push(TestParser.stringifyType(e));
            return result_1736;
        })().join(',') + ']' };
    TestParser.stringifyType = (node_1738) => {
            const temp_1739 = node_1738;
            switch (temp_1739&&temp_1739[0]) {
            case 1: {
                {
                    const s_1740 = temp_1739[1];
                    return ('Type(' + (s_1740) + ')');
                }
            } break;

            case 2: {
                {
                    const name_1741 = temp_1739[1];
                    const params_1742 = temp_1739[2];
                    return ('ParametricType(' + (name_1741) + ',[') + (() => {
                        const result_1743 = [];
                        const value_1744 = params_1742;
                        for (const p of $toIterator(value_1744)) result_1743.push(TestParser.stringifyType(p));
                        return result_1743;
                    })().join(',') + '])';
                }
            } break;

            case 3: {
                {
                    const args_1745 = temp_1739[1];
                    const rettype_1746 = temp_1739[2];
                    return 'Function([' + (() => {
                        const result_1747 = [];
                        const value_1748 = args_1745;
                        for (const e of $toIterator(value_1748)) result_1747.push(TestParser.stringifyType(e));
                        return result_1747;
                    })().join(',') + '],' + TestParser.stringifyType(rettype_1746) + ')';
                }
            } break;

            case 5: {
                {
                    const names_1749 = temp_1739[1];
                    const types_1750 = temp_1739[2];
                    return 'Object([' + names_1749.join(',') + '],[' + (() => {
                        const result_1751 = [];
                        const value_1752 = types_1750;
                        for (const e of $toIterator(value_1752)) result_1751.push(TestParser.stringifyType(e));
                        return result_1751;
                    })().join(',') + '])';
                }
            } break;

            case 0: {
                {
                    const type_1753 = temp_1739[1];
                    return 'Optional(' + TestParser.stringifyType(type_1753) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1738 + '-->'
            };
        };
    var TestTyper = class {
    }
    TestTyper.passed = 0
    TestTyper.overall = 0
    TestTyper.library = Fs.readFileSync(__dirname + '/library/js/js.hexa')
    TestTyper.test = () => {
            console.log('TestTyper begin');
            TestTyper.shouldNotError('let a = 1');
            TestTyper.shouldError('let a');
            TestTyper.shouldError('let a = 1 a = 2');
            TestTyper.shouldNotError('var a = 1 var b = 1');
            TestTyper.shouldNotError('var a = 1 var b = a');
            TestTyper.shouldNotError('var a = 1 let b = a');
            TestTyper.shouldError('var a = var b = 1');
            TestTyper.shouldError('var a = var b');
            TestTyper.shouldError('var a = { var b }');
            TestTyper.shouldError('var a = { 1 2 3 var b }');
            TestTyper.shouldNotError('var a = { 1 2 var b 3 }');
            TestTyper.shouldNotError('var a = { }');
            TestTyper.shouldNotError('var z: {} = {} as! {}');
            TestTyper.shouldError('let a = var b');
            TestTyper.shouldNotError('var a = 1 a = 2');
            TestTyper.shouldNotError('let a = { 2 }');
            TestTyper.shouldNotError('let a = { 1 2 3 2 }');
            TestTyper.shouldError('let a = return 2');
            TestTyper.shouldError('let a = { return 2 }');
            TestTyper.shouldError('let a = { break }');
            TestTyper.shouldError('let a = break');
            TestTyper.shouldError('var a = 1, b = return 2');
            TestTyper.shouldError('!1');
            TestTyper.shouldNotError('!true');
            TestTyper.shouldNotError('!!!true');
            TestTyper.shouldNotError('let a = true !a');
            TestTyper.shouldNotError('let a: Any = true !a');
            TestTyper.shouldNotError('"s" + 1');
            TestTyper.shouldError('("s" + 1).x');
            TestTyper.shouldError('module{}("s" + 1)');
            TestTyper.shouldError('module{}("s" + 1).length');
            TestTyper.shouldNotError('{("s" + 1).length}');
            TestTyper.shouldNotError('("s" + 1).length');
            TestTyper.shouldNotError('[("s" + 1).length]');
            TestTyper.shouldError('enum E { A B A }');
            TestTyper.shouldError('enum E { A(value: Int) B A(value: Int) }');
            TestTyper.shouldError('enum E { B(value: Int) A = 1 }');
            TestTyper.shouldError('enum E { lowercase }');
            TestTyper.shouldNotError('class A { static function x() {} } A.x()');
            TestTyper.shouldError('class A { static function x() {} static function x() {} }');
            TestTyper.shouldError('class A { static function x() {} static var x = 1 }');
            TestTyper.shouldError('class A { static function x() {} var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 static var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 function x() {} }');
            TestTyper.shouldNotError('module class A { static function x() {} } { A.x() }');
            TestTyper.shouldError('class A { static function x() {} } B.y()');
            TestTyper.shouldError('class A { static function x() {} } A.y()');
            TestTyper.shouldError('module { class A { static function x() {} } } A.y()');
            TestTyper.shouldNotError('enum E : Int { static function x() {} } E.x()');
            TestTyper.shouldError('enum E : Int { static function x() {} } E.y()');
            TestTyper.shouldNotError('enum E { A } let a = E.A');
            TestTyper.shouldError('enum E { A } let a = E.B');
            TestTyper.shouldNotError('class A { static var x = 0 } A.x = 1');
            TestTyper.shouldError('class A { static var x = 0 } A.y = 1');
            TestTyper.shouldNotError('var x = 1 x = 2');
            TestTyper.shouldNotError('var x: Bool = true');
            TestTyper.shouldError('var x: Bool = 1');
            TestTyper.shouldNotError('var x: Bool? = null');
            TestTyper.shouldNotError('var x: Int = 1 x = 1');
            TestTyper.shouldError('var x: Int = 1 x = true');
            TestTyper.shouldError('var x = 1 x = true');
            TestTyper.shouldError('var x = (1) x = (true)');
            TestTyper.shouldNotError('var x = 1 var y = 2 x = y');
            TestTyper.shouldError('var x: Int = 1 var y: Bool = true x = y');
            TestTyper.shouldError('var x = 1 var y = true x = y');
            TestTyper.shouldNotError('var x = null x = null');
            TestTyper.shouldNotError('var x = null x = true');
            TestTyper.shouldError('var x = 1 var y = x y = true');
            TestTyper.shouldNotError('var x = null var y = true x = y');
            TestTyper.shouldNotError('function x() {} var y = x y = x');
            TestTyper.shouldNotError('function x() {} var y: ()=>Void = x y = x');
            TestTyper.shouldNotError('class A { new() {} } let a = new A()');
            TestTyper.shouldError('class A { } let a = new A()');
            TestTyper.shouldNotError('class A { new() {} var x = 0 } let a = new A() a.x = 1');
            TestTyper.shouldNotError('let a = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a = { b: true } a.b = false');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldNotError('let a = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldError('let a = { b: true } let c = a.x');
            TestTyper.shouldError('let a = { b: true } let c: Int = a.b');
            TestTyper.shouldError('let a = { b: true } let c = a.b c = 123');
            TestTyper.shouldError('let a = {a: 1, b: 2, a: 3}');
            TestTyper.shouldNotError('var i: Float = 123');
            TestTyper.shouldError('var i: Int = 0.123');
            TestTyper.shouldNotError('if (true) {}');
            TestTyper.shouldNotError('if (true == false) {}');
            TestTyper.shouldNotError('if (1 == 2) {}');
            TestTyper.shouldNotError('if (1 != 2) {}');
            TestTyper.shouldNotError('if (1 >= 2) {}');
            TestTyper.shouldErrorTemplate('$d$ a = $a$', ['$b$', '{ $b$ }'], ['break', 'continue', 'return $c$'], ['1', 'abc'], ['let', '"var"']);
            TestTyper.shouldNotError('var x = function() {return 1} var x = 1');
            TestTyper.shouldError('let x = function() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = function() {return 1}');
            TestTyper.shouldError('{ function x() {return 1} } x()');
            TestTyper.shouldError('{ function x() {return return 1} }');
            TestTyper.shouldError('{ function x(y: Int) { y = 1 } }');
            TestTyper.shouldError('return 1');
            TestTyper.shouldError('{ return }');
            TestTyper.shouldNotError('{ () => { 1 } }');
            TestTyper.shouldNotError('{ () => 1 }');
            TestTyper.shouldNotError('var x = function () {} x = function () {}');
            TestTyper.shouldError('let x = function () {} x = function () {} ');
            TestTyper.shouldNotError('function () {}');
            TestTyper.shouldNotError('function (): Void {}');
            TestTyper.shouldNotError('function (): Int { return 0 }');
            TestTyper.shouldError('function (): Int {}');
            TestTyper.shouldError('var a: Int? = null if (var b = a) {}');
            TestTyper.shouldError('var a: Int? = null if (let b) {}');
            TestTyper.shouldError('var a: Int? = null if (let b = a) {} a = b');
            TestTyper.shouldError('var a: Int? = null if (let b = a) { b = a }');
            TestTyper.shouldNotError('var a: Int? = null if (let b = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let b = a) { a = b }');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a, let b = a, let a = b) {} a = 5');
            TestTyper.shouldError('function x(y: Int): Void {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} x(x(1))');
            TestTyper.shouldNotError('function x(y: Int) return 1 var z: Int = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Int return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(): Int { return }');
            TestTyper.shouldError('function x() { {return} {return 1} }');
            TestTyper.shouldError('function x(y: Int): Bool return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) return 1 var z: Bool = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Void {} x(1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1)');
            TestTyper.shouldError('function x(y: Int, z: Int): Void {} x(1, true)');
            TestTyper.shouldError('function x(y: Int): Void {} x(true)');
            TestTyper.shouldError('function x(y: Void): Void {}');
            TestTyper.shouldError('function x(y: Int) { { return 1 } return true }');
            TestTyper.shouldNotError('function x(y: Int) { { return 1 } return 1 }');
            TestTyper.shouldNotError('enum E { V } function x() { return E.V }');
            TestTyper.shouldError('function x() { return Int }');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1, 1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1)');
            TestTyper.shouldNotError('let a = [2, 4, 1, 2, 5]');
            TestTyper.shouldNotError('let a = [null, 2, 4, 1, 2]');
            TestTyper.shouldNotError('var a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldError('let a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldNotError('var a = 4, b = 2, c = 4 let arr = [a, b, c]');
            TestTyper.shouldError('var a = for (b in [1, 2, 3, 4]) b');
            TestTyper.shouldError('var a = (for (b in [1, 2, 3, 4]) b)');
            TestTyper.shouldNotError('var a = [for (b in [1, 2, 3, 4]) b]');
            TestTyper.shouldError('var a = [for (b in [1, 2, 3, 4]) a]');
            TestTyper.shouldNotError('var a = [ 1: "a", 2: "b", 3: "c" ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ] a = ["l": 11]');
            TestTyper.shouldNotError('var a = { a: "a" } a.a = "b"');
            TestTyper.shouldNotError('var a = [{ a: 1 }] a[0].a');
            TestTyper.shouldError('var a = [{ a: 1 }] a[0].b');
            TestTyper.shouldError('var a = [{ b: [{c : [1]}] }] a[0].b[0].d');
            TestTyper.shouldNotError('var a = [{ b: [{c : [1]}] }] a[0].b[0].c[0]');
            TestTyper.shouldError('var a = try { throw 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldError('var a = { try { throw 1 } catch(e: Any) { throw 2 } }');
            TestTyper.shouldNotError('var a = try { 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('try { var a = try { 1 } catch(e: Any) { throw 2 } } catch(e: Any) {}');
            TestTyper.shouldNotError('var a = try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('var a = { try { throw 1 } catch(e: Any) { 2 } }');
            TestTyper.shouldError('try { 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldNotError('try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldError('var a = throw 1');
            TestTyper.shouldError('var a = { throw 1 }');
            TestTyper.shouldError('{ throw 1 }');
            TestTyper.shouldError('throw 1');
            TestTyper.shouldNotError('try {} catch(e: Any) {}');
            TestTyper.shouldNotError('try {} catch(e: Int) {}');
            TestTyper.shouldNotError('try {} catch(e: Float) {}');
            TestTyper.shouldNotError('try {} catch(e: String) {}');
            TestTyper.shouldError('try {} catch(e: {}) {}');
            TestTyper.shouldError('try {} catch(e: ()=>Void) {}');
            TestTyper.shouldNotError('function f() throw 123');
            TestTyper.shouldError('@noThrow(0) function f() {}');
            TestTyper.shouldNotError('@noThrow function f() {}');
            TestTyper.shouldError('@noThrow function f() throw 123');
            TestTyper.shouldError('@noThrow @throws(Int) function f() throw 123');
            TestTyper.shouldError('@noThrow @throws function f() {}');
            TestTyper.shouldNotError('@throws function f() throw 123');
            TestTyper.shouldNotError('let f = @throws function() throw 123');
            TestTyper.shouldError('let f = @noThrow function() throw 123');
            TestTyper.shouldError('let f = @noThrow @throws function() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() {}');
            TestTyper.shouldNotError('function f() try { throw 123 } catch(e: Int) {}');
            TestTyper.shouldError('{ break }');
            TestTyper.shouldError('function hi() { continue }');
            TestTyper.shouldNotError('while (true) { break }');
            TestTyper.shouldNotError('while (true) { continue }');
            TestTyper.shouldError('while ({ break }) { }');
            TestTyper.shouldNotError('do { continue } while (true)');
            TestTyper.shouldError('do { } while ({ continue })');
            TestTyper.shouldNotError('for (a in []) { continue }');
            TestTyper.shouldError('for (continue in []) { }');
            TestTyper.shouldError('for (a in continue) { }');
            TestTyper.shouldNotError('class A {}');
            TestTyper.shouldError('module class A {} class A {}');
            TestTyper.shouldError('module let x = 1 { x = 1 }');
            TestTyper.shouldNotError('module var x = 1 { var x = 1 }');
            TestTyper.shouldNotError('module var x = 1 { x = 1 }');
            TestTyper.shouldError('module class A {} module class A {}');
            TestTyper.shouldNotError('class A {new() {} let a: A = new A()}');
            TestTyper.shouldError('function f() {} f(var a)');
            TestTyper.shouldError('function f(x) {} f(var a)');
            TestTyper.shouldError('function f() {} f(let a = 1)');
            TestTyper.shouldError('module hi function hi()');
            TestTyper.shouldError('module hi function () {}');
            TestTyper.shouldError('function hi() { static var x = 1 }');
            TestTyper.shouldError('function hi() { private var x = 1 }');
            TestTyper.shouldError('class A {} A = null');
            TestTyper.shouldError('class A {} A = A');
            TestTyper.shouldError('class A {new(){}} A = new A()');
            TestTyper.shouldError('module class A {} { A = null }');
            TestTyper.shouldError('module class A {new(){}} { A = new A() }');
            TestTyper.shouldError('class A { static function hi() { this } }');
            TestTyper.shouldError('function hi() { this }');
            TestTyper.shouldError('{ this }');
            TestTyper.shouldNotError('class A { function hi() { this } }');
            TestTyper.shouldNotError('class A { new() { this } }');
            TestTyper.shouldNotError('class A { function hi() { return this } }');
            TestTyper.shouldNotError('class A {\n               var a: [Int]\n              var b: String\n             new(a, b) { this.a = a this.b = b }\n           }');
            TestTyper.shouldError('static function hi() { }');
            TestTyper.shouldError('private function hi() { }');
            TestTyper.shouldError('class A {new () {}} let a = new A() a.b');
            TestTyper.shouldNotError('class A {new () {}let b = 1} let a = new A() a.b');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.c');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.b[0]');
            TestTyper.shouldNotError('class A { static var v: Int }');
            TestTyper.shouldNotError('class A { var v: Int = 0 new () {} }');
            TestTyper.shouldNotError('class A { let v: Int = 0 new () {} }');
            TestTyper.shouldNotError('class A { var v: Int new () { v = 0 } }');
            TestTyper.shouldNotError('class A { new () { v = 0 } var v: Int }');
            TestTyper.shouldNotError('class A { var v: Int new () { this.v = 0 } }');
            TestTyper.shouldNotError('class A { var v: Int new () { v = 0 v += 1 } }');
            TestTyper.shouldNotError('class A { var v: Int new () { this.v = 0 this.v += 1 } }');
            TestTyper.shouldError('class A { let v: Int = 0 new () { v = 0 } }');
            TestTyper.shouldNotError('enum A { static var v: Int }');
            TestTyper.shouldNotError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x): {} }');
            TestTyper.shouldError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x, y): {} }');
            TestTyper.shouldNotError('enum A {}');
            TestTyper.shouldNotError('enum A : Int { }');
            TestTyper.shouldNotError('enum A : Int { }');
            TestTyper.shouldNotError('enum A : String { }');
            TestTyper.shouldError('enum A : Float { }');
            TestTyper.shouldError('enum A : String { F = 1 }');
            TestTyper.shouldError('enum A : Int { F = "1" }');
            TestTyper.shouldNotError('enum A : String { F = "1" }');
            TestTyper.shouldNotError('enum A { A } var a = A.A');
            TestTyper.shouldError('class A { function hi() { super() } }');
            TestTyper.shouldError('function hi() { super() }');
            TestTyper.shouldError('{ super }');
            TestTyper.shouldError('{ super() }');
            TestTyper.shouldError('{ super.hello() }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { static function hi() { super() } }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { function hi() { (super).hi() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super.hi() } }');
            TestTyper.shouldError('var a: Unknown = 1');
            TestTyper.shouldError('function a(): Unknown {}');
            TestTyper.shouldError('class A extends Unknown {}');
            TestTyper.shouldError('class A implements Unknown {}');
            TestTyper.shouldError('let x = if (true) false else 1');
            TestTyper.shouldNotError('let x = if (true) 0 else 1');
            TestTyper.shouldError('var x = if (true) 0 else 1 x = true');
            TestTyper.shouldNotError('var x = if (true) 0 else 1 x = 2');
            TestTyper.shouldNotError('let x = 0 ?? 1');
            TestTyper.shouldError('let x = 0 ?? true');
            TestTyper.shouldNotError('var x = 0 ?? 1 x = 2');
            TestTyper.shouldError('var x = 0 ?? 1 x = true');
            TestTyper.shouldError('let x = 0 x += 0');
            TestTyper.shouldNotError('var x = 0 x += 0');
            TestTyper.shouldError('var x = 0 x += true');
            TestTyper.shouldNotError('var x = 0 var z = x += 0 z = 0');
            TestTyper.shouldError('var x = 0 var z = x += 0 z = true');
            TestTyper.shouldNotError('function x(){class A{new(){}var y=1}return new A()}var z=x()z.y=2');
            TestTyper.shouldNotError('function x(){class A{new(){}var y=1}return new A()}x().y=2');
            TestTyper.shouldError('function x(){class A{new(){}var w=1}return new A()}var z=x()z.y=2');
            TestTyper.shouldError('function x(){class A{new(){}var w=1}return new A()}x().y=2');
            TestTyper.shouldNotError('let t = 1 t is Int');
            TestTyper.shouldError('let t = 1 t is Any');
            TestTyper.shouldError('let t = 1 t is Void');
            TestTyper.shouldError('let t = 1 t as Unknown');
            TestTyper.shouldNotError('let t = 1 t as Int');
            TestTyper.shouldError('let t = 1 t as Void');
            TestTyper.shouldNotError('function int(): Int return 1 int() as Int');
            TestTyper.shouldError('function void(): Void {} void() as Int');
            TestTyper.shouldNotError('class T<A, B> {}');
            TestTyper.shouldError('class T<A, A> {}');
            TestTyper.shouldError('class T<A, B, A> {}');
            TestTyper.shouldError('declare var a');
            TestTyper.shouldError('declare var a = value');
            TestTyper.shouldError('declare var a: Int = value');
            TestTyper.shouldNotError('declare var a: Int');
            TestTyper.shouldError('declare function()');
            TestTyper.shouldNotError('declare function(): Int');
            TestTyper.shouldError('var a = declare function(): Int');
            TestTyper.shouldNotError('@att("value") 123');
            TestTyper.shouldNotError('let known = 1 @att(known) 123');
            console.log(('TestTyper done ' + (Math.round((TestTyper.passed / TestTyper.overall) * 100)) + '% (' + (TestTyper.passed) + '/' + (TestTyper.overall) + ')'));
        };
    TestTyper.shouldNotError = (input_1754) => {
            TestTyper.overall++;
            let errorText = TestTyper.didError(input_1754);
            if (errorText != null) { throw ('TestTyper test fail: `' + (input_1754) + '` should NOT throw error, but it did.\r\n') + errorText };
            TestTyper.passed++;
        };
    TestTyper.shouldError = (input_1755) => {
            TestTyper.overall++;
            if (TestTyper.didError(input_1755) == null) { throw ('TestTyper test fail: `' + (input_1755) + '` should throw error, but it did not.') };
            TestTyper.passed++;
        };
    TestTyper.template = (code_1756, a_1757, b_1758 = null, c_1759 = null, d = null) => {
            const tests = [];
            for (const ta of $toIterator(a_1757)) {
                const ca_1760 = code_1756.split('$a$').join(ta);
                {
                    let step_1761 = 0;
                    const bs = b_1758;
                    if (step_1761 == 0 && bs != null) { step_1761 = 1 };
                    if (step_1761 == 1) { for (const tb of $toIterator(bs)) {
                        const cb = ca_1760.split('$b$').join(tb);
                        {
                            let step_1762 = 0;
                            const cs = c_1759;
                            if (step_1762 == 0 && cs != null) { step_1762 = 1 };
                            if (step_1762 == 1) { for (const tc of $toIterator(cs)) {
                                const cc_1763 = cb.split('$c$').join(tc);
                                {
                                    let step_1764 = 0;
                                    const ds = d;
                                    if (step_1764 == 0 && ds != null) { step_1764 = 1 };
                                    if (step_1764 == 1) { for (const td of $toIterator(ds)) {
                                        const cd = cc_1763.split('$d$').join(td);
                                        if (tests.indexOf(cd) == -1) { tests.push(cd) };
                                    } } else if (tests.indexOf(cc_1763) == -1) { tests.push(cc_1763) };
                                };
                            } } else if (tests.indexOf(cb) == -1) { tests.push(cb) };
                        };
                    } } else if (tests.indexOf(ca_1760) == -1) { tests.push(ca_1760) };
                };
            };
            return tests;
        };
    TestTyper.shouldErrorTemplate = (code_1765, a_1766, b_1767 = null, c_1768 = null, d_1769 = null) => { for (const test of $toIterator(TestTyper.template(code_1765, a_1766, b_1767, c_1768, d_1769))) TestTyper.shouldError(test) };
    TestTyper.shouldNotErrorTemplate = (code_1770, a_1771, b_1772 = null, c_1773 = null, d_1774 = null) => { for (const test of $toIterator(TestTyper.template(code_1770, a_1771, b_1772, c_1773, d_1774))) TestTyper.shouldNotError(test) };
    TestTyper.didError = (input_1775) => {
            const lexeLibrary = Lexer.tokenize(TestTyper.library, 'library/js/js.hexa');
            const lexeInput = Lexer.tokenize(Buffer.from(input_1775), 'TEST');
            try { (new Typer()).fillFiles([Parser.parseNodes(lexeLibrary), Parser.parseNodes(lexeInput)]) } catch (temp_1776) {
                if (true) {
                const e = temp_1776
                {
                    return '' + e;
                } } else

                throw temp_1776;
            };
            return null;
        };
    var GenJs = class {
        constructor() {
            this.extension = '.js'
            this.nativeEnums = false
            this.toIterator = false
            this.tabs = '\t\t'
            this.globalAccessor = ''
            this.reserved = ['with', 'const', 'instanceof', 'typeof', 'delete', 'undefined', 'package', 'async', 'await', 'arguments']
        {
        } };
        perform(normalizer) {
            this.project = normalizer;
            return this.stringify();
        };
        stringify() {
            const out_1777 = ['// Generated by Hexa https://hexalang.github.io\n'];
            if (this.project.package.addLicenseNoticeToOutput) {
                out_1777.push(('// ' + (this.project.package.name) + '\n'));
                out_1777.push(('// ' + (this.project.package.name) + ' ' + (this.project.package.version) + '\n'));
                out_1777.push(('// LICENSE ' + (this.project.package.license) + '\n'));
            } else {
                out_1777.push('// The generated code is subject to the original license\n');
            };
            out_1777.push(';(function() {\n\t"use strict"\n\tconst $global = typeof(window) === "undefined"? global : window');
            out_1777.push('\n\tif (typeof($global.require) === "undefined") { $global.require = function () {} };');
            out_1777.push('\n\t$global.parseBigInt = BigInt');
            const constantsIndex = out_1777.length;
            const constants = [];
            out_1777.push('');
            for (const e of $toIterator(this.project.enumsSimple)) {
                if (e.staticVars.length + e.staticMethods.length == 0) { continue };
                out_1777.push('\n\tvar ' + e.name + ' = {');
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1778 = v;
                    switch (temp_1778&&temp_1778[0]) {
                    case 7: {
                        {
                            const name_1779 = temp_1778[1];
                            const expr_1780 = temp_1778[2];
                            const args_1781 = temp_1778[3];
                            const defaults_1782 = temp_1778[4];
                            {
                                out_1777.push('\n\t\t' + name_1779 + ': ');
                                out_1777.push(this.printFunctionArguments(args_1781, defaults_1782) + ' => { ' + this.printStatement(expr_1780) + ' }');
                                out_1777.push(',');
                            };
                        }
                    } break;
                    };
                };
                out_1777.push('\n\t}');
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1783 = v;
                    switch (temp_1783&&temp_1783[0]) {
                    case 5: {
                        {
                            const name_1784 = temp_1783[1];
                            const expr_1785 = temp_1783[2];
                            {
                                out_1777.push('\n\t' + e.name + '.' + name_1784);
                                if (expr_1785 != null) { out_1777.push(' = ' + this.printExpression(expr_1785)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1786 = temp_1783[1];
                            const expr_1787 = temp_1783[2];
                            {
                                out_1777.push('\n\t' + e.name + '.' + name_1786);
                                out_1777.push(' = ' + this.printExpression(expr_1787));
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                if ((e.staticMethods.length == 0) && (e.names.length == 0)) { out_1777.push('\n\tvar ' + e.name + ' = {}') } else {
                    out_1777.push('\n\tvar ' + e.name + ' = {');
                    for (const v of $toIterator(e.staticMethods)) {
                        const temp_1788 = v;
                        switch (temp_1788&&temp_1788[0]) {
                        case 7: {
                            {
                                const name_1789 = temp_1788[1];
                                const expr_1790 = temp_1788[2];
                                const args_1791 = temp_1788[3];
                                const defaults_1792 = temp_1788[4];
                                {
                                    out_1777.push('\n\t\t' + name_1789 + ': ');
                                    out_1777.push(this.printFunctionArguments(args_1791, defaults_1792) + ' => { ' + this.printStatement(expr_1790) + ' }');
                                    out_1777.push(',');
                                };
                            }
                        } break;
                        };
                    };
                    let i_1793 = 0;
                    for (const name of $toIterator(e.names)) {
                        if (e.constructors[i_1793] != null) {
                            out_1777.push('\n\t\t' + name + ': ');
                            out_1777.push('(' + e.constructors[i_1793].join(',') + ')=>[');
                            out_1777.push('' + i_1793 + ',' + e.constructors[i_1793].join(','));
                            out_1777.push('],');
                        };
                        i_1793++;
                    };
                    out_1777.push('\n\t}');
                };
                let i_1794 = 0;
                for (const name of $toIterator(e.names)) {
                    if (e.constructors[i_1794] != null) {} else {
                        out_1777.push('\n\tObject.defineProperty(' + e.name + ', "' + name + '", { get: function() { return [' + i_1794 + '] }})');
                    };
                    i_1794++;
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1795 = v;
                    switch (temp_1795&&temp_1795[0]) {
                    case 5: {
                        {
                            const name_1796 = temp_1795[1];
                            const expr_1797 = temp_1795[2];
                            {
                                out_1777.push('\n\t' + e.name + '.' + name_1796);
                                if (expr_1797 != null) { out_1777.push(' = ' + this.printExpression(expr_1797)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1798 = temp_1795[1];
                            const expr_1799 = temp_1795[2];
                            {
                                out_1777.push('\n\t' + e.name + '.' + name_1798);
                                out_1777.push(' = ' + this.printExpression(expr_1799));
                            };
                        }
                    } break;
                    };
                };
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.useless) { continue };
                if (c.external) {
                    if (c.jsRequire != null) {
                        constants.push('\n\t' + 'const ' + c.name + ' = require("' + c.jsRequire + '")');
                        continue;
                    };
                    {
                        let step_1800 = 0;
                        const jsNative = c.jsNative;
                        let temp_1801 = null;
                        if (step_1800 == 0 && jsNative != null) {
                            temp_1801 = jsNative != c.name;
                            step_1800 = 1;
                        };
                        if (step_1800 == 1 && temp_1801 != false) { step_1800 = 2 };
                        if (step_1800 == 2) { out_1777.push('\n\t' + 'var ' + c.name + ' = $global.' + jsNative) };
                    };
                    continue;
                };
                out_1777.push('\n\t' + 'var ' + c.name + ' = class');
                {
                    let step_1802 = 0;
                    const extend_1803 = c.extend;
                    if (step_1802 == 0 && extend_1803 != null) { step_1802 = 1 };
                    if (step_1802 == 1) { out_1777.push(' extends ' + extend_1803) };
                };
                out_1777.push(' {');
                for (const v of $toIterator(c.methods)) {
                    const temp_1804 = v;
                    switch (temp_1804&&temp_1804[0]) {
                    case 7: {
                        {
                            const name_1805 = temp_1804[1];
                            const expr_1806 = temp_1804[2];
                            const args_1807 = temp_1804[3];
                            {
                                if (name_1805 == null || name_1805 == 'new') { out_1777.push('\n\t\tconstructor') } else out_1777.push('\n\t\t' + name_1805);
                                out_1777.push('(' + args_1807.join(', ') + ') ');
                                if ((name_1805 == null || name_1805 == 'new') && (c.vars.length > 0)) {
                                    out_1777.push('{ ');
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_1808 = v;
                                        switch (temp_1808&&temp_1808[0]) {
                                        case 5: {
                                            {
                                                const name_1809 = temp_1808[1];
                                                const expr_1810 = temp_1808[2];
                                                if (expr_1810 != null) { out_1777.push('\n\t\t\tthis.' + name_1809 + ' = ' + this.printExpression(expr_1810) + '') };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_1811 = temp_1808[1];
                                                const expr_1812 = temp_1808[2];
                                                if (expr_1812 != null) { out_1777.push('\n\t\t\tthis.' + name_1811 + ' = ' + this.printExpression(expr_1812) + '') };
                                            }
                                        } break;
                                        };
                                    };
                                    out_1777.push('\n\t\t');
                                    out_1777.push(this.printStatement(expr_1806) + ' };');
                                } else out_1777.push(this.printBlock(expr_1806) + ';');
                            };
                        }
                    } break;
                    };
                };
                for (const name of $toIterator(c.property)) {
                    out_1777.push('\n\t\tget ' + name + ('() { return this.get_' + (name) + '(); };'));
                    out_1777.push('\n\t\tset ' + name + ('(value) { return this.set_' + (name) + '(value); };'));
                };
                out_1777.push('\n\t}');
                for (const v of $toIterator(c.staticVars)) {
                    const temp_1813 = v;
                    switch (temp_1813&&temp_1813[0]) {
                    case 5: {
                        {
                            const name_1814 = temp_1813[1];
                            const expr_1815 = temp_1813[2];
                            {
                                out_1777.push('\n\t' + c.name + '.' + name_1814);
                                if (expr_1815 != null) { out_1777.push(' = ' + this.printExpression(expr_1815)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1816 = temp_1813[1];
                            const expr_1817 = temp_1813[2];
                            {
                                out_1777.push('\n\t' + c.name + '.' + name_1816);
                                out_1777.push(' = ' + this.printExpression(expr_1817));
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_1818 = v;
                    switch (temp_1818&&temp_1818[0]) {
                    case 7: {
                        {
                            const name_1819 = temp_1818[1];
                            const expr_1820 = temp_1818[2];
                            const args_1821 = temp_1818[3];
                            const defaults_1822 = temp_1818[4];
                            {
                                out_1777.push('\n\t' + c.name + '.' + name_1819 + ' = ');
                                out_1777.push(this.printFunctionArguments(args_1821, defaults_1822) + ' => ' + this.printBlock(expr_1820) + ';');
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_1823 = g;
                switch (temp_1823&&temp_1823[0]) {
                case 7: {
                    {
                        const name_1824 = temp_1823[1];
                        const expr_1825 = temp_1823[2];
                        const args_1826 = temp_1823[3];
                        const defaults_1827 = temp_1823[4];
                        {
                            out_1777.push('\n\tfunction ' + name_1824);
                            out_1777.push(this.printFunctionArguments(args_1826, defaults_1827) + ' ' + this.printBlock(expr_1825) + ';');
                        };
                    }
                } break;
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_1828 = g;
                switch (temp_1828&&temp_1828[0]) {
                case 5: {
                    {
                        const name_1829 = temp_1828[1];
                        const expr_1830 = temp_1828[2];
                        {
                            out_1777.push('\n\tvar ' + name_1829);
                            if (expr_1830 != null) { out_1777.push(' = ' + this.printExpression(expr_1830)) } else out_1777.push(' = null');
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_1831 = temp_1828[1];
                        const expr_1832 = temp_1828[2];
                        out_1777.push('\n\tvar ' + name_1831 + ' = ' + this.printExpression(expr_1832));
                    }
                } break;
                };
            };
            for (const init of $toIterator(this.project.init)) {
                out_1777.push('\n\t{\n\t\t');
                out_1777.push(this.printStatement(init));
                out_1777.push('\n\t}');
            };
            if (this.toIterator) { constants.unshift('\n\tfunction $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };') };
            out_1777[constantsIndex] = constants.join('');
            out_1777.push('\n})();\n');
            return out_1777.join('');
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_1833) {
            const temp_1834 = s_1833;
            switch (temp_1834&&temp_1834[0]) {
            case 1: {
                {
                    const el_1835 = temp_1834[1];
                    {
                        if (el_1835.length == 1) {
                            const temp_1836 = el_1835[0];
                            switch (temp_1836&&temp_1836[0]) {
                            case 1: {
                                return this.printStatement(el_1835[0])
                            } break;
                            };
                        };
                        if (el_1835.length == 1) { return '{ ' + this.printStatement(el_1835[0]) + ' }' };
                        if (el_1835.length == 0) { return '{}' };
                        return this.printStatement(s_1833);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_1833) + ' }'
            };
        };
        printStatement(s_1837) {
            {
                const temp_1838 = s_1837;
                switch (temp_1838&&temp_1838[0]) {
                case 0: {
                    {
                        const els_1839 = temp_1838[1];
                        {
                            let r_1840 = '';
                            for (const s of $toIterator(els_1839)) if (s != null) { r_1840 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_1840;
                        };
                    }
                } break;

                case 26: {
                    return 'break'
                } break;

                case 25: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_1841 = temp_1838[1];
                        {
                            if (el_1841.length == 1) {
                                const temp_1842 = el_1841[0];
                                switch (temp_1842&&temp_1842[0]) {
                                case 1: {
                                    return this.printStatement(el_1841[0])
                                } break;
                                };
                            };
                            this.pushTab();
                            let r_1843 = '{';
                            for (const e of $toIterator(el_1841)) {
                                const temp_1844 = e;
                                switch (temp_1844&&temp_1844[0]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_1845 = temp_1844[1];
                                        for (const s of $toIterator(els_1845)) if (s != null) { r_1843 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_1843 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_1843 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_1846 = temp_1838[1];
                        const args_1847 = temp_1838[2];
                        return 'new ' + this.printExpression(e_1846) + this.printCallArguments(args_1847);
                    }
                } break;

                case 6: {
                    {
                        const name_1848 = temp_1838[1];
                        const expr_1849 = temp_1838[2];
                        return 'const ' + name_1848 + (expr_1849 == (null)? ('') : ' = ' + this.printExpression(expr_1849));
                    }
                } break;

                case 5: {
                    {
                        const name_1850 = temp_1838[1];
                        const expr_1851 = temp_1838[2];
                        return 'let ' + name_1850 + (expr_1851 == (null)? ('') : ' = ' + this.printExpression(expr_1851));
                    }
                } break;

                case 7: {
                    {
                        const name_1852 = temp_1838[1];
                        const expr_1853 = temp_1838[2];
                        const args_1854 = temp_1838[3];
                        const defaults_1855 = temp_1838[4];
                        return 'const ' + name_1852 + ' = ' + this.printFunctionArguments(args_1854, defaults_1855) + ' => ' + this.printBlock(expr_1853);
                    }
                } break;

                case 8: {
                    {
                        const e_1856 = temp_1838[1];
                        {
                            if (e_1856 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_1856);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_1857 = temp_1838[1];
                        const eif_1858 = temp_1838[2];
                        const eelse_1859 = temp_1838[3];
                        {
                            let r_1860 = 'if (' + this.printExpression(econd_1857) + ') ' + this.printBlock(eif_1858);
                            if (eelse_1859 != null) { r_1860 += ' else ' + this.printStatement(eelse_1859) };
                            return r_1860;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_1861 = temp_1838[1];
                        const args_1862 = temp_1838[2];
                        return this.printExpression(e_1861) + this.printCallArguments(args_1862);
                    }
                } break;

                case 27: {
                    {
                        const args_1863 = temp_1838[1];
                        return 'super' + this.printCallArguments(args_1863);
                    }
                } break;

                case 12: {
                    {
                        const expr_1864 = temp_1838[1];
                        const t_1865 = temp_1838[2];
                        const v_1866 = temp_1838[3];
                        const catches_1867 = temp_1838[4];
                        const temp_1868 = temp_1838[5];
                        {
                            let r_1869 = 'try ';
                            r_1869 += this.printBlock(expr_1864);
                            r_1869 += (' catch (' + (temp_1868) + ') {\n') + this.tabs + '\t';
                            this.pushTab();
                            {
                                let i_1870 = 0;
                                let it_1871 = 0;
                                let at_1872 = catches_1867.length;
                                while (it_1871 < at_1872) {
                                    i_1870 = it_1871;
                                    it_1871++;
                                    {
                                        let typeof_1873 = 'T';
                                        {
                                            const temp_1874 = t_1865[i_1870];
                                            switch (temp_1874&&temp_1874[0]) {
                                            case 4: {
                                                {
                                                    const type_1875 = temp_1874[1];
                                                    typeof_1873 = type_1875.name;
                                                }
                                            } break;

                                            default:
                                            throw '' + t_1865[i_1870]
                                            };
                                        };
                                        {
                                            const temp_1876 = typeof_1873;
                                            switch (temp_1876) {
                                            case 'Any': {
                                                r_1869 += 'if (true) { '
                                            } break;

                                            case 'String': {
                                                r_1869 += ('if (typeof(' + (temp_1868) + ') == \"string\") { ')
                                            } break;

                                            case 'Int': {
                                                r_1869 += ('if (typeof(' + (temp_1868) + ') == \"number\") { ')
                                            } break;

                                            case 'Float': {
                                                r_1869 += ('if (typeof(' + (temp_1868) + ') == \"number\") { ')
                                            } break;

                                            case 'Bool': {
                                                r_1869 += ('if (typeof(' + (temp_1868) + ') == \"boolean\") { ')
                                            } break;

                                            default:
                                            r_1869 += ('if (' + (temp_1868) + ' instanceof ' + (typeof_1873) + ') { ')
                                            };
                                        };
                                        r_1869 += '\n' + this.tabs;
                                        r_1869 += ('const ' + (v_1866[i_1870]) + ' = ' + (temp_1868) + '');
                                        r_1869 += '\n' + this.tabs;
                                        r_1869 += this.printStatement(catches_1867[i_1870]);
                                        r_1869 += ' }';
                                        r_1869 += ' else';
                                        r_1869 += '\n' + this.tabs;
                                    };
                                };
                            };
                            r_1869 += '\n' + this.tabs + ('throw ' + (temp_1868) + ';');
                            this.popTab();
                            return r_1869 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 14: {
                    {
                        const a_1877 = temp_1838[1];
                        const v_1878 = temp_1838[2];
                        return this.printExpression(a_1877) + ' = ' + this.printExpression(v_1878);
                    }
                } break;

                case 13: {
                    {
                        const e_1879 = temp_1838[1];
                        return 'throw ' + this.printExpression(e_1879);
                    }
                } break;

                case 20: {
                    {
                        const name_1880 = temp_1838[1];
                        const over_1881 = temp_1838[2];
                        const by_1882 = temp_1838[3];
                        {
                            this.toIterator = true;
                            return 'for (const ' + name_1880 + ' of $toIterator(' + this.printExpression(over_1881) + ')) ' + this.printStatement(by_1882);
                        };
                    }
                } break;

                case 22: {
                    {
                        const e_1883 = temp_1838[1];
                        return this.printExpression(e_1883) + '++';
                    }
                } break;

                case 23: {
                    {
                        const e_1884 = temp_1838[1];
                        return this.printExpression(e_1884) + '--';
                    }
                } break;

                case 21: {
                    {
                        const econd_1885 = temp_1838[1];
                        const e_1886 = temp_1838[2];
                        const pre_1887 = temp_1838[3];
                        {
                            if (pre_1887) { return 'while (' + this.printExpression(econd_1885) + ') ' + this.printStatement(e_1886) };
                            return 'do {' + this.printStatement(e_1886) + '} while (' + this.printExpression(econd_1885) + ')';
                        };
                    }
                } break;

                case 15: {
                    {
                        const a_1888 = temp_1838[1];
                        const op_1889 = temp_1838[2];
                        const value_1890 = temp_1838[3];
                        return this.printExpression(a_1888) + ' ' + Token.stringify(op_1889) + '= ' + this.printExpression(value_1890);
                    }
                } break;

                case 16: {
                    {
                        const expr_1891 = temp_1838[1];
                        const name_1892 = temp_1838[2];
                        return this.printExpression(expr_1891) + '.' + name_1892;
                    }
                } break;

                case 24: {
                    {
                        const expr_1893 = temp_1838[1];
                        const cases_1894 = temp_1838[2];
                        const statements = temp_1838[3];
                        {
                            let r_1895 = 'switch (' + this.printExpression(expr_1893) + ') {';
                            {
                                let i_1896 = 0;
                                let it_1897 = 0;
                                let at_1898 = cases_1894.length;
                                while (it_1897 < at_1898) {
                                    i_1896 = it_1897;
                                    it_1897++;
                                    if (cases_1894[i_1896].length > 0) {
                                        r_1895 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_1894[i_1896])) {
                                            const temp_1899 = cc;
                                            switch (temp_1899&&temp_1899[0]) {
                                            case 8: {
                                                r_1895 += 'case null: case undefined: '
                                            } break;

                                            default:
                                            r_1895 += 'case ' + this.printExpression(cc) + ': '
                                            };
                                        };
                                        this.pushTab();
                                        r_1895 += '{\n' + this.tabs;
                                        r_1895 += this.printStatement(statements[i_1896]);
                                        this.popTab();
                                        r_1895 += '\n' + this.tabs + '} break;\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_1900 = 0;
                                let it_1901 = 0;
                                let at_1902 = cases_1894.length;
                                while (it_1901 < at_1902) {
                                    i_1900 = it_1901;
                                    it_1901++;
                                    if (cases_1894[i_1900].length == 0) {
                                        r_1895 += '\n' + this.tabs + 'default: ';
                                        r_1895 += '\n' + this.tabs;
                                        r_1895 += this.printStatement(statements[i_1900]);
                                        r_1895 += '\n' + this.tabs;
                                    };
                                };
                            };
                            return r_1895 + '}';
                        };
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null statement kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown statement kind:', ((() => {
                    const result_1903 = s_1837;
                    if (result_1903 != null) { return result_1903 };
                    return [];
                })())[0])
                };
            };
            return '{/* undefined */}';
        };
        printCallArguments(args_1904) { return '(' + (() => {
            const result_1905 = [];
            const value_1906 = args_1904;
            for (const a of $toIterator(value_1906)) result_1905.push(this.printExpression(a));
            return result_1905;
        })().join(', ') + ')' };
        printFunctionArguments(args_1907, defaults_1908) { return '(' + (() => {
            const result_1909 = [];
            const value_1910 = args_1907.length;
            for (const a of $toIterator(value_1910)) result_1909.push(args_1907[a] + (((defaults_1908 != null && defaults_1908[a] != null))? (' = ' + this.printExpression(defaults_1908[a])) : ''));
            return result_1909;
        })().join(', ') + ')' };
        printExpression(e_1911) {
            {
                const temp_1912 = e_1911;
                switch (temp_1912&&temp_1912[0]) {
                case 8: {
                    return 'null'
                } break;

                case 9: {
                    return 'this'
                } break;

                case 7: {
                    {
                        const name_1913 = temp_1912[1];
                        return name_1913;
                    }
                } break;

                case 3: {
                    {
                        const v_1914 = temp_1912[1];
                        return '' + v_1914;
                    }
                } break;

                case 4: {
                    {
                        const v_1915 = temp_1912[1];
                        return '' + v_1915;
                    }
                } break;

                case 2: {
                    {
                        const s_1916 = temp_1912[1];
                        {
                            const s_1917 = s_1916.split('');
                            const charsOut = [];
                            while (s_1917.length > 0) {
                                const temp_1918 = s_1917[0];
                                switch (temp_1918) {
                                case '\'': {
                                    {
                                        charsOut.push('\\');
                                        charsOut.push('\'');
                                        s_1917.shift();
                                    }
                                } break;

                                case '\n': {
                                    {
                                        charsOut.push('\\n');
                                        s_1917.shift();
                                    }
                                } break;

                                case '\r': {
                                    {
                                        charsOut.push('\\r');
                                        s_1917.shift();
                                    }
                                } break;

                                case '\\': {
                                    {
                                        s_1917.shift();
                                        if (s_1917[0] == '\'') {
                                            charsOut.push('\\\'');
                                            s_1917.shift();
                                        } else if (s_1917[0] == '"') {
                                            charsOut.push('\\"');
                                            s_1917.shift();
                                        } else if (s_1917[0] == '\\') {
                                            charsOut.push('\\\\');
                                            s_1917.shift();
                                        } else {
                                            charsOut.push('\\');
                                        };
                                    }
                                } break;

                                default:
                                {
                                    charsOut.push(s_1917[0]);
                                    s_1917.shift();
                                }
                                };
                            };
                            return '\'' + charsOut.join('') + '\'';
                        };
                    }
                } break;

                case 5: {
                    return 'true'
                } break;

                case 6: {
                    return 'false'
                } break;

                case 10: {
                    {
                        const expr_1919 = temp_1912[1];
                        const name_1920 = temp_1912[2];
                        return this.printExpression(expr_1919) + '.' + name_1920;
                    }
                } break;

                case 11: {
                    {
                        const e_1921 = temp_1912[1];
                        const args_1922 = temp_1912[2];
                        return this.printExpression(e_1921) + this.printCallArguments(args_1922);
                    }
                } break;

                case 14: {
                    {
                        const name_1923 = temp_1912[1];
                        const expr_1924 = temp_1912[2];
                        const args_1925 = temp_1912[3];
                        const defaults_1926 = temp_1912[4];
                        {
                            if (name_1923 == null) { return this.printFunctionArguments(args_1925, defaults_1926) + ' => ' + this.printBlock(expr_1924) };
                            return '((() => { const ' + name_1923 + ' = ' + this.printFunctionArguments(args_1925, defaults_1926) + ' => ' + this.printBlock(expr_1924) + '; return ' + name_1923 + ' })())';
                        };
                    }
                } break;

                case 15: {
                    {
                        const expr_1927 = temp_1912[1];
                        const args_1928 = temp_1912[2];
                        const defaults_1929 = temp_1912[3];
                        return this.printFunctionArguments(args_1928, defaults_1929) + ' => (' + this.printExpression(expr_1927) + ')';
                    }
                } break;

                case 12: {
                    {
                        const e_1930 = temp_1912[1];
                        const args_1931 = temp_1912[2];
                        return 'new ' + this.printExpression(e_1930) + this.printCallArguments(args_1931);
                    }
                } break;

                case 18: {
                    {
                        const el_1932 = temp_1912[1];
                        return '[' + (() => {
                            const result_1933 = [];
                            const value_1934 = el_1932;
                            for (const a of $toIterator(value_1934)) result_1933.push(this.printExpression(a));
                            return result_1933;
                        })().join(', ') + ']';
                    }
                } break;

                case 20: {
                    {
                        const op_1935 = temp_1912[1];
                        const postfix_1936 = temp_1912[2];
                        const e_1937 = temp_1912[3];
                        {
                            if (postfix_1936) { return this.printExpression(e_1937) + Token.stringify(op_1935) };
                            return Token.stringify(op_1935) + this.printExpression(e_1937);
                        };
                    }
                } break;

                case 21: {
                    {
                        const nullable_1938 = temp_1912[1];
                        const othewise = temp_1912[2];
                        return '((' + this.printExpression(nullable_1938) + ') || (' + this.printExpression(othewise) + '))';
                    }
                } break;

                case 16: {
                    {
                        const e_1939 = temp_1912[1];
                        return '(' + this.printExpression(e_1939) + ')';
                    }
                } break;

                case 13: {
                    {
                        const a_1940 = temp_1912[1];
                        const op_1941 = temp_1912[2];
                        const b_1942 = temp_1912[3];
                        return this.printExpression(a_1940) + ' ' + Token.stringify(op_1941) + ' ' + this.printExpression(b_1942);
                    }
                } break;

                case 23: {
                    {
                        const expr_1943 = temp_1912[1];
                        const index_1944 = temp_1912[2];
                        return this.printExpression(expr_1943) + '[' + this.printExpression(index_1944) + ']';
                    }
                } break;

                case 22: {
                    {
                        const econd_1945 = temp_1912[1];
                        const eif_1946 = temp_1912[2];
                        const eelse_1947 = temp_1912[3];
                        {
                            let r_1948 = '';
                            try {
                                r_1948 += '(' + this.printExpression(econd_1945) + ')?';
                                r_1948 += ' (' + this.printExpression(eif_1946) + ')';
                                r_1948 += ' : ' + this.printExpression(eelse_1947);
                                return r_1948;
                            } catch (temp_1949) {
                                if (true) {
                                const error = temp_1949
                                {
                                    console.log('If =>', e_1911, error);
                                    return r_1948 + '<!-- If => error -->';
                                } } else

                                throw temp_1949;
                            };
                        };
                    }
                } break;

                case 33: {
                    {
                        const expr_1950 = temp_1912[1];
                        {
                            const e_1951 = this.printExpression(expr_1950);
                            return e_1951 + '&&' + e_1951 + '[0]';
                        };
                    }
                } break;

                case 17: {
                    {
                        const names_1952 = temp_1912[1];
                        const el_1953 = temp_1912[2];
                        return '{' + (() => {
                            const result_1954 = [];
                            const value_1955 = el_1953.length;
                            for (const i of $toIterator(value_1955)) result_1954.push(((names_1952[i]) + ':' + this.printExpression(el_1953[i])));
                            return result_1954;
                        })().join(', ') + '}';
                    }
                } break;

                case 19: {
                    {
                        const keys_1956 = temp_1912[1];
                        const values_1957 = temp_1912[2];
                        {
                            if (keys_1956.length == 0) { return 'new Map()' };
                            return 'new Map([' + (() => {
                                const result_1958 = [];
                                const value_1959 = keys_1956.length;
                                for (const i of $toIterator(value_1959)) result_1958.push('[' + this.printExpression(keys_1956[i]) + ', ' + this.printExpression(values_1957[i]) + ']');
                                return result_1958;
                            })().join(', ') + '])';
                        };
                    }
                } break;

                case 31: {
                    {
                        const a_1960 = temp_1912[1];
                        const op_1961 = temp_1912[2];
                        const value_1962 = temp_1912[3];
                        return this.printExpression(a_1960) + ' ' + Token.stringify(op_1961) + '= ' + this.printExpression(value_1962);
                    }
                } break;

                case 32: {
                    {
                        const kind_1963 = temp_1912[1];
                        const args_1964 = temp_1912[2];
                        const s_1965 = temp_1912[3];
                        {
                            const temp_1966 = kind_1963;
                            switch (temp_1966) {
                            case 0: {
                                return '((' + this.printExpression(args_1964[0]) + ') ' + s_1965 + ' (' + this.printExpression(args_1964[1]) + '))'
                            } break;

                            case 1: {
                                return s_1965 + this.printCallArguments(args_1964)
                            } break;

                            case 2: {
                                return '(' + s_1965 + '(' + this.printExpression(args_1964[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_1964[1]) + ')' + s_1965 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 24: {
                    {
                        const e_1967 = temp_1912[1];
                        const t_1968 = temp_1912[2];
                        return '(' + this.printExpression(e_1967) + ')';
                    }
                } break;

                case 30: {
                    {
                        const e_1969 = temp_1912[1];
                        const t_1970 = temp_1912[2];
                        return '((' + this.printExpression(e_1969) + ') instanceof ' + Type.stringify(t_1970) + ')';
                    }
                } break;

                case 34: {
                    {
                        const type_1971 = temp_1912[1];
                        const tagName = temp_1912[2];
                        const tag_1972 = temp_1912[3];
                        const args_1973 = temp_1912[4];
                        {
                            if (args_1973.length == 0) { return ('/*' + (tagName) + '*/[') + this.printExpression(tag_1972) + ']' };
                            return (('/*' + (tagName) + '*/[') + this.printExpression(tag_1972) + ',' + (() => {
                                const result_1974 = [];
                                const value_1975 = args_1973;
                                for (const a of $toIterator(value_1975)) result_1974.push(this.printExpression(a));
                                return result_1974;
                            })().join(',') + ']');
                        };
                    }
                } break;

                case 35: {
                    {
                        const expr_1976 = temp_1912[1];
                        const index_1977 = temp_1912[2];
                        return this.printExpression(expr_1976) + '[' + (1 + index_1977) + ']';
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null expression kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown expression kind:', ((() => {
                    const result_1978 = e_1911;
                    if (result_1978 != null) { return result_1978 };
                    return [];
                })())[0], e_1911)
                };
            };
            return '{/* undefined */}';
        };
    }
    GenJs.spawn = () => { return new GenJs() };
    var GenCxx = class {
        constructor() {
            this.globalAccessor = ''
            this.declarationsOfFunctions = []
            this.declarationsOfOpaqueTypes = []
            this.declarationsOfFullTypes = []
            this.declarationsOfStringsMap = new Map()
            this.declarationsOfStrings = []
            this.tabs = ''
            this.reserved = []
            this.currentReturnType = null
            this.last = ''
        {
        } };
        perform(normalizer_1979) {
            this.project = normalizer_1979;
            return this.stringify();
        };
        stringify() {
            const header = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io')];
            if (this.project.package.addLicenseNoticeToOutput) {
                header.push(('// ' + (this.project.package.name) + ''));
                header.push(('// LICENSE ' + (this.project.package.license) + ''));
            } else {
                header.push('// The generated code is subject to the original license');
            };
            header.push(Fs.readFileSync(__dirname + '/library/cxx/hexa.cpp').toString('utf8').split('\r\n').join('\n'));
            const out_1980 = [];
            const forward = [];
            const types_1981 = [];
            this.registerString('');
            this.declarationsOfStringsMap.set('', 0);
            this.registerString('null');
            this.declarationsOfStringsMap.set('null', 1);
            for (const e of $toIterator(this.project.enumsSimple)) {
                forward.push('class ' + e.name + '_;');
                if (e.staticVars.length + e.staticMethods.length == 0) { continue };
                types_1981.push('class ' + e.name + '_ {\n\tpublic:');
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1982 = v;
                    switch (temp_1982&&temp_1982[0]) {
                    case 5: {
                        {
                            const name_1983 = temp_1982[1];
                            const expr_1984 = temp_1982[2];
                            const type_1985 = temp_1982[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_1985)) + ' ') + name_1983 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_1985)) + ' ') + e.name + '_::' + name_1983 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1986 = temp_1982[1];
                            const expr_1987 = temp_1982[2];
                            const type_1988 = temp_1982[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_1988)) + ' ') + name_1986 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_1988)) + ' ') + e.name + '_::' + name_1986 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1989 = v;
                    switch (temp_1989&&temp_1989[0]) {
                    case 7: {
                        {
                            const name_1990 = temp_1989[1];
                            const expr_1991 = temp_1989[2];
                            const args_1992 = temp_1989[3];
                            const defaults_1993 = temp_1989[4];
                            const funcType = temp_1989[5];
                            {
                                types_1981.push('\n\tstatic ');
                                types_1981.push(this.printFunctionReturnType(funcType));
                                types_1981.push(' ' + name_1990 + '_');
                                types_1981.push(this.printFunctionArguments(args_1992, funcType, true));
                                types_1981.push(';');
                            };
                        }
                    } break;
                    };
                };
                types_1981.push('\n};\n');
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1994 = v;
                    switch (temp_1994&&temp_1994[0]) {
                    case 7: {
                        {
                            const name_1995 = temp_1994[1];
                            const expr_1996 = temp_1994[2];
                            const args_1997 = temp_1994[3];
                            const defaults_1998 = temp_1994[4];
                            const funcType_1999 = temp_1994[5];
                            {
                                out_1980.push(this.printFunctionReturnType(funcType_1999));
                                out_1980.push(' ' + e.name + '_::' + name_1995 + '_');
                                out_1980.push(this.printFunctionArguments(args_1997, funcType_1999));
                                const _currentReturnType = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_1999);
                                out_1980.push(' ' + this.printBlock(expr_1996) + ';\n');
                                this.currentReturnType = _currentReturnType;
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                forward.push('class ' + e.name + '_;');
                types_1981.push('class ' + e.name + '_ : public class_ {\n\tpublic:');
                types_1981.push('\n\tAny_** enum_;');
                types_1981.push('\n\tuint16_t is_;');
                types_1981.push('\n\tuint8_t length_;');
                let i_2000 = 0;
                for (const name of $toIterator(e.names)) {
                    if (e.constructors[i_2000] != null) {
                        types_1981.push('\n\tstatic ' + e.name + '_* ' + name + '_(');
                        types_1981.push((() => {
                            const result_2001 = [];
                            const value_2002 = e.constructors[i_2000].length;
                            for (const c of $toIterator(value_2002)) result_2001.push(this.stringifyType(e.constructorsTypes[i_2000][c]) + ' ' + e.constructors[i_2000][c] + '_');
                            return result_2001;
                        })().join(', '));
                        types_1981.push(');');
                        out_1980.push(e.name + '_* ' + e.name + '_::' + name + '_(');
                        out_1980.push((() => {
                            const result_2003 = [];
                            const value_2004 = e.constructors[i_2000].length;
                            for (const c of $toIterator(value_2004)) result_2003.push(this.stringifyType(e.constructorsTypes[i_2000][c]) + ' ' + e.constructors[i_2000][c] + '_');
                            return result_2003;
                        })().join(', '));
                        out_1980.push(') {\n');
                        out_1980.push(('\tprintf(\"' + (e.name) + '::' + (name) + '_()\\n\");fflush(0);\n'));
                        out_1980.push('\t' + e.name + '_* _ = (' + e.name + '_*)(malloc(sizeof(' + e.name + '_)));\n');
                        out_1980.push(('\t_->length_ = ' + (e.constructors[i_2000].length) + ';\n'));
                        out_1980.push(('\t_->enum_ = (Any_**)(malloc(sizeof(Any_*) * ' + (e.constructors[i_2000].length) + '));\n'));
                        out_1980.push(('\t_->is_ = ' + (i_2000) + ';\n'));
                        {
                            let c_2005 = 0;
                            let it_2006 = 0;
                            let at_2007 = e.constructors[i_2000].length;
                            while (it_2006 < at_2007) {
                                c_2005 = it_2006;
                                it_2006++;
                                {
                                    out_1980.push(('\t_->enum_[' + (c_2005) + '] = '));
                                    out_1980.push(this.printToAnyConverter(e.constructors[i_2000][c_2005] + '_', e.constructorsTypes[i_2000][c_2005]));
                                    out_1980.push(';\n');
                                };
                            };
                        };
                        out_1980.push('\treturn _;\n');
                        out_1980.push('};\n');
                    } else {
                        types_1981.push('\n\tstatic ' + e.name + '_* ' + name + '_();');
                        out_1980.push(e.name + '_* ' + e.name + '_::' + name + '_() {\n');
                        out_1980.push(('\tprintf(\"' + (e.name) + '::' + (name) + '_()\\n\");fflush(0);\n'));
                        out_1980.push('\t' + e.name + '_* _ = (' + e.name + '_*)(malloc(sizeof(' + e.name + '_)));\n');
                        out_1980.push('\t_->length_ = 0;\n');
                        out_1980.push(('\t_->is_ = ' + (i_2000) + ';\n'));
                        out_1980.push('\treturn _;\n');
                        out_1980.push('};\n');
                    };
                    i_2000++;
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2008 = v;
                    switch (temp_2008&&temp_2008[0]) {
                    case 5: {
                        {
                            const name_2009 = temp_2008[1];
                            const expr_2010 = temp_2008[2];
                            const type_2011 = temp_2008[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_2011)) + ' ') + name_2009 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_2011)) + ' ') + e.name + '_::' + name_2009 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2012 = temp_2008[1];
                            const expr_2013 = temp_2008[2];
                            const type_2014 = temp_2008[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_2014)) + ' ') + name_2012 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_2014)) + ' ') + e.name + '_::' + name_2012 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2015 = v;
                    switch (temp_2015&&temp_2015[0]) {
                    case 7: {
                        {
                            const name_2016 = temp_2015[1];
                            const expr_2017 = temp_2015[2];
                            const args_2018 = temp_2015[3];
                            const defaults_2019 = temp_2015[4];
                            const funcType_2020 = temp_2015[5];
                            {
                                types_1981.push('\n\tstatic ');
                                types_1981.push(this.printFunctionReturnType(funcType_2020));
                                types_1981.push(' ' + name_2016 + '_');
                                types_1981.push(this.printFunctionArguments(args_2018, funcType_2020, true));
                                types_1981.push(';');
                                out_1980.push(this.printFunctionReturnType(funcType_2020));
                                out_1980.push(' ' + e.name + '_::' + name_2016 + '_');
                                out_1980.push(this.printFunctionArguments(args_2018, funcType_2020));
                                const _currentReturnType_2021 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2020);
                                out_1980.push(' ' + this.printBlock(expr_2017) + ';\n');
                                this.currentReturnType = _currentReturnType_2021;
                            };
                        }
                    } break;
                    };
                };
                types_1981.push('\n};\n');
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) { forward.push(c.jsRequire) };
                    {
                        let step_2022 = 0;
                        const jsNative_2023 = c.jsNative;
                        let temp_2024 = null;
                        if (step_2022 == 0 && jsNative_2023 != null) {
                            temp_2024 = jsNative_2023 != c.name;
                            step_2022 = 1;
                        };
                        if (step_2022 == 1 && temp_2024 != false) { step_2022 = 2 };
                        if (step_2022 == 2) { forward.push('#define ' + c.name + ' ' + jsNative_2023) };
                    };
                    continue;
                };
                if (c.name == 'Any') { continue };
                if (c.name == 'Bool') { continue };
                forward.push('class ' + c.name + '_;');
                types_1981.push('class ' + c.name + '_ : public class_ {\n\tpublic:');
                for (const v of $toIterator(c.vars)) {
                    const temp_2025 = v;
                    switch (temp_2025&&temp_2025[0]) {
                    case 5: {
                        {
                            const name_2026 = temp_2025[1];
                            const expr_2027 = temp_2025[2];
                            const type_2028 = temp_2025[3];
                            types_1981.push(('\n\t' + (this.stringifyType(type_2028)) + ' ') + name_2026 + '_;');
                        }
                    } break;

                    case 6: {
                        {
                            const name_2029 = temp_2025[1];
                            const expr_2030 = temp_2025[2];
                            const type_2031 = temp_2025[3];
                            types_1981.push(('\n\t' + (this.stringifyType(type_2031)) + ' ') + name_2029 + '_;');
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2032 = v;
                    switch (temp_2032&&temp_2032[0]) {
                    case 7: {
                        {
                            const name_2033 = temp_2032[1];
                            const expr_2034 = temp_2032[2];
                            const args_2035 = temp_2032[3];
                            const defaults_2036 = temp_2032[4];
                            const funcType_2037 = temp_2032[5];
                            if (name_2033 == null || name_2033 == 'new') {
                                types_1981.push('\n\t' + c.name + '_() {};');
                                types_1981.push('\n\tvoid this_');
                                types_1981.push(this.printFunctionArguments(args_2035, funcType_2037, true));
                                types_1981.push(';');
                                types_1981.push('\n\tstatic ' + c.name + '_* new_');
                                types_1981.push(this.printFunctionArguments(args_2035, funcType_2037));
                                types_1981.push(';');
                                out_1980.push('void ' + c.name + '_::this_');
                                out_1980.push(this.printFunctionArguments(args_2035, funcType_2037));
                                out_1980.push(' {\n');
                                for (const v of $toIterator(c.vars)) {
                                    const temp_2038 = v;
                                    switch (temp_2038&&temp_2038[0]) {
                                    case 5: {
                                        {
                                            const name_2039 = temp_2038[1];
                                            const expr_2040 = temp_2038[2];
                                            const type_2041 = temp_2038[3];
                                            if (expr_2040 != null) { out_1980.push('\tthis->' + name_2039 + '_ = ' + this.printExpression(expr_2040) + ';\n') };
                                        }
                                    } break;

                                    case 6: {
                                        {
                                            const name_2042 = temp_2038[1];
                                            const expr_2043 = temp_2038[2];
                                            const type_2044 = temp_2038[3];
                                            out_1980.push('\tthis->' + name_2042 + '_ = ' + this.printExpression(expr_2043) + ';\n');
                                        }
                                    } break;
                                    };
                                };
                                out_1980.push('};\n');
                                out_1980.push(c.name + '_* ' + c.name + '_::new_');
                                out_1980.push(this.printFunctionArguments(args_2035, funcType_2037));
                                out_1980.push(' {\n');
                                out_1980.push(('\tprintf(\"' + (c.name) + '::new_()\\n\");fflush(0);\n'));
                                out_1980.push('\tvoid* buffer_ = (' + c.name + '_*)(malloc(sizeof(' + c.name + '_)));\n');
                                out_1980.push('\t' + c.name + '_* _ = new (buffer_) ' + c.name + '_();\n');
                                out_1980.push('\t_->this_(');
                                out_1980.push((() => {
                                    const result_2045 = [];
                                    const value_2046 = args_2035;
                                    for (const a of $toIterator(value_2046)) result_2045.push(a + '_');
                                    return result_2045;
                                })().join(', '));
                                out_1980.push(');\n');
                                out_1980.push('\treturn _;\n');
                                out_1980.push('};\n');
                            } else {
                                types_1981.push('\n\tvirtual ');
                                types_1981.push(this.printFunctionReturnType(funcType_2037));
                                types_1981.push(' ' + name_2033 + '_');
                                types_1981.push(this.printFunctionArguments(args_2035, funcType_2037));
                                types_1981.push(';');
                                out_1980.push(this.printFunctionReturnType(funcType_2037));
                                out_1980.push(' ' + c.name + '_::' + name_2033 + '_');
                                out_1980.push(this.printFunctionArguments(args_2035, funcType_2037));
                                const _currentReturnType_2047 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2037);
                                out_1980.push(' ' + this.printBlock(expr_2034) + ';\n');
                                this.currentReturnType = _currentReturnType_2047;
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2048 = v;
                    switch (temp_2048&&temp_2048[0]) {
                    case 5: {
                        {
                            const name_2049 = temp_2048[1];
                            const expr_2050 = temp_2048[2];
                            const type_2051 = temp_2048[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_2051)) + ' ') + name_2049 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_2051)) + ' ') + c.name + '_::' + name_2049 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2052 = temp_2048[1];
                            const expr_2053 = temp_2048[2];
                            const type_2054 = temp_2048[3];
                            {
                                types_1981.push(('\n\tstatic ' + (this.stringifyType(type_2054)) + ' ') + name_2052 + '_;');
                                out_1980.push(('' + (this.stringifyType(type_2054)) + ' ') + c.name + '_::' + name_2052 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2055 = v;
                    switch (temp_2055&&temp_2055[0]) {
                    case 7: {
                        {
                            const name_2056 = temp_2055[1];
                            const expr_2057 = temp_2055[2];
                            const args_2058 = temp_2055[3];
                            const defaults_2059 = temp_2055[4];
                            const funcType_2060 = temp_2055[5];
                            {
                                types_1981.push('\n\tstatic ');
                                types_1981.push(this.printFunctionReturnType(funcType_2060));
                                types_1981.push(' ' + name_2056 + '_');
                                types_1981.push(this.printFunctionArguments(args_2058, funcType_2060));
                                types_1981.push(';');
                            };
                        }
                    } break;
                    };
                };
                types_1981.push('\n};\n');
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2061 = v;
                    switch (temp_2061&&temp_2061[0]) {
                    case 7: {
                        {
                            const name_2062 = temp_2061[1];
                            const expr_2063 = temp_2061[2];
                            const args_2064 = temp_2061[3];
                            const defaults_2065 = temp_2061[4];
                            const funcType_2066 = temp_2061[5];
                            {
                                out_1980.push(this.printFunctionReturnType(funcType_2066));
                                out_1980.push(' ' + c.name + '_::' + name_2062 + '_');
                                out_1980.push(this.printFunctionArguments(args_2064, funcType_2066));
                                const _currentReturnType_2067 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2066);
                                out_1980.push(' ' + this.printBlock(expr_2063) + ';\n');
                                this.currentReturnType = _currentReturnType_2067;
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_2068 = g;
                switch (temp_2068&&temp_2068[0]) {
                case 7: {
                    {
                        const name_2069 = temp_2068[1];
                        const expr_2070 = temp_2068[2];
                        const args_2071 = temp_2068[3];
                        const defaults_2072 = temp_2068[4];
                        const funcType_2073 = temp_2068[5];
                        {
                            types_1981.push(this.printFunctionReturnType(funcType_2073));
                            types_1981.push(' ' + name_2069 + '_');
                            types_1981.push(this.printFunctionArguments(args_2071, funcType_2073));
                            types_1981.push(';\n');
                            out_1980.push(this.printFunctionReturnType(funcType_2073));
                            out_1980.push(' ' + name_2069 + '_');
                            out_1980.push(this.printFunctionArguments(args_2071, funcType_2073));
                            const _currentReturnType_2074 = this.currentReturnType;
                            this.currentReturnType = this.getFunctionReturnType(funcType_2073);
                            out_1980.push(' ' + this.printBlock(expr_2070) + ';\n');
                            this.currentReturnType = _currentReturnType_2074;
                        };
                    }
                } break;
                };
            };
            out_1980.push('int main(int argc, char **argv) {\n');
            out_1980.push('\tprintf("Starting...\\n");fflush(0);\n');
            this.pushTab();
            for (const e of $toIterator(this.project.enumsSimple)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2075 = v;
                    switch (temp_2075&&temp_2075[0]) {
                    case 5: {
                        {
                            const name_2076 = temp_2075[1];
                            const expr_2077 = temp_2075[2];
                            const type_2078 = temp_2075[3];
                            if (expr_2077 != null) { out_1980.push('\t' + e.name + '_::' + name_2076 + '_ = ' + this.printExpression(expr_2077) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2079 = temp_2075[1];
                            const expr_2080 = temp_2075[2];
                            const type_2081 = temp_2075[3];
                            if (expr_2080 != null) { out_1980.push('\t' + e.name + '_::' + name_2079 + '_ = ' + this.printExpression(expr_2080) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2082 = v;
                    switch (temp_2082&&temp_2082[0]) {
                    case 5: {
                        {
                            const name_2083 = temp_2082[1];
                            const expr_2084 = temp_2082[2];
                            const type_2085 = temp_2082[3];
                            if (expr_2084 != null) { out_1980.push('\t' + e.name + '_::' + name_2083 + '_ = ' + this.printExpression(expr_2084) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2086 = temp_2082[1];
                            const expr_2087 = temp_2082[2];
                            const type_2088 = temp_2082[3];
                            if (expr_2087 != null) { out_1980.push('\t' + e.name + '_::' + name_2086 + '_ = ' + this.printExpression(expr_2087) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.classes)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2089 = v;
                    switch (temp_2089&&temp_2089[0]) {
                    case 5: {
                        {
                            const name_2090 = temp_2089[1];
                            const expr_2091 = temp_2089[2];
                            const type_2092 = temp_2089[3];
                            if (expr_2091 != null) { out_1980.push('\t' + e.name + '_::' + name_2090 + '_ = ' + this.printExpression(expr_2091) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2093 = temp_2089[1];
                            const expr_2094 = temp_2089[2];
                            const type_2095 = temp_2089[3];
                            if (expr_2094 != null) { out_1980.push('\t' + e.name + '_::' + name_2093 + '_ = ' + this.printExpression(expr_2094) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_2096 = g;
                switch (temp_2096&&temp_2096[0]) {
                case 5: {
                    {
                        const name_2097 = temp_2096[1];
                        const expr_2098 = temp_2096[2];
                        const type_2099 = temp_2096[3];
                        {
                            types_1981.push(this.stringifyType(type_2099));
                            types_1981.push(' ' + name_2097 + '_;\n');
                            if (expr_2098 != null) { out_1980.push('\t' + name_2097 + '_ = ' + this.printExpression(expr_2098) + ';\n') };
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_2100 = temp_2096[1];
                        const expr_2101 = temp_2096[2];
                        const type_2102 = temp_2096[3];
                        {
                            types_1981.push(this.stringifyType(type_2102));
                            types_1981.push(' ' + name_2100 + '_;\n');
                            if (expr_2101 != null) { out_1980.push('\t' + name_2100 + '_ = ' + this.printExpression(expr_2101) + ';\n') };
                        };
                    }
                } break;
                };
            };
            if (this.project.init.length > 1) { throw 'project.init.length > 1' };
            const init_2103 = this.printStatement(this.project.init[0]);
            {
                let id_2104 = 0;
                let it_2105 = 0;
                let at_2106 = this.declarationsOfStrings.length;
                while (it_2105 < at_2106) {
                    id_2104 = it_2105;
                    it_2105++;
                    {
                        out_1980.push(('\tString_Strings[' + (id_2104) + '] = String_fromUTF8z(\"' + (this.declarationsOfStrings[id_2104]) + '\");\n'));
                    };
                };
            };
            out_1980.push('\t');
            out_1980.push(init_2103);
            this.popTab();
            out_1980.push('\tprintf("Exiting...\\n");fflush(0);\n');
            out_1980.push('\treturn 0;\n}\n/*}*/\n');
            return (header.join('\n') + '\n// Forward\n' + forward.join('\n') + ('\n\n// Strings\nString_* String_Strings[' + (this.declarationsOfStrings.length) + '] = {nullptr};\n') + '\n// Types\n' + types_1981.join('') + '\n// Statements\n' + out_1980.join('')).split('\n').join('\r\n');
            let out_2107 = '';
            for (const e of $toIterator(this.project.enumsSimple)) {
                this.declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name);
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2108 = v;
                    switch (temp_2108&&temp_2108[0]) {
                    case 5: {
                        {
                            const name_2109 = temp_2108[1];
                            const expr_2110 = temp_2108[2];
                            const type_2111 = temp_2108[3];
                            {
                                out_2107 += '\n' + this.stringifyType(type_2111) + ' _x' + e.name + '_' + name_2109;
                                if (expr_2110 != null) { out_2107 += ' = ' + this.printExpression(expr_2110) + ';' };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2112 = temp_2108[1];
                            const expr_2113 = temp_2108[2];
                            const type_2114 = temp_2108[3];
                            {
                                out_2107 += '\n' + this.stringifyType(type_2114) + ' _x' + e.name + '_' + name_2112;
                                out_2107 += ' = ' + this.printExpression(expr_2113) + ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2115 = v;
                    switch (temp_2115&&temp_2115[0]) {};
                };
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        out_2107 += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/';
                        continue;
                    };
                    header.push('typedef ' + ((() => {
                        const result_2116 = c.jsNative;
                        if (result_2116 != null) { return result_2116 };
                        return c.name;
                    })()) + ' _x' + c.name + ';');
                    continue;
                };
                const renamed_2117 = '_x' + c.name;
                const t_2118 = ['struct ', renamed_2117, ' {'];
                this.declarationsOfOpaqueTypes.push(('typedef struct ' + (renamed_2117) + '* ' + (renamed_2117) + ''));
                t_2118.push('\n _xclass _xclass;');
                for (const v of $toIterator(c.vars)) {
                    const temp_2119 = v;
                    switch (temp_2119&&temp_2119[0]) {
                    case 5: {
                        {
                            const name_2120 = temp_2119[1];
                            const expr_2121 = temp_2119[2];
                            const type_2122 = temp_2119[3];
                            t_2118.push('\n ' + this.stringifyType(type_2122) + ' _x' + name_2120 + ';');
                        }
                    } break;

                    case 6: {
                        {
                            const name_2123 = temp_2119[1];
                            const expr_2124 = temp_2119[2];
                            const type_2125 = temp_2119[3];
                            t_2118.push('\n ' + this.stringifyType(type_2125) + ' _x' + name_2123 + ';');
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2126 = v;
                    switch (temp_2126&&temp_2126[0]) {
                    case 7: {
                        {
                            const name_2127 = temp_2126[1];
                            const expr_2128 = temp_2126[2];
                            const args_2129 = temp_2126[3];
                            const defaults_2130 = temp_2126[4];
                            {
                                const types_2131 = null;
                                const returns_2132 = null;
                                let declaration = this.printType(returns_2132) + ' ';
                                const constructor = (name_2127 == null || name_2127 == 'new');
                                if (constructor) { declaration = renamed_2117 + ' ' };
                                declaration += renamed_2117 + '_' + name_2127;
                                if (constructor) { if (args_2129.length > 0) { declaration += '(void* _x' + args_2129.join(', void* _x') + ')' } else declaration += '()' } else {
                                    if (args_2129.length > 0) { declaration += ('(' + (renamed_2117) + ' _xthis, void* _x') + args_2129.join(', void* _x') + ')' } else declaration += ('(' + (renamed_2117) + ' _xthis)');
                                };
                                this.declarationsOfFunctions.push(declaration);
                                out_2107 += '\n' + declaration;
                                out_2107 += ' { ';
                                if (constructor) {
                                    out_2107 += ('\n ' + (renamed_2117) + ' _xthis = (' + (renamed_2117) + ')malloc(sizeof(struct ' + (renamed_2117) + '));');
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_2133 = v;
                                        switch (temp_2133&&temp_2133[0]) {
                                        case 5: {
                                            {
                                                const name_2134 = temp_2133[1];
                                                const expr_2135 = temp_2133[2];
                                                const type_2136 = temp_2133[3];
                                                if (expr_2135 != null) { out_2107 += '\n _xthis->_x' + name_2134 + ' = ' + this.printExpression(expr_2135) + ';' };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_2137 = temp_2133[1];
                                                const expr_2138 = temp_2133[2];
                                                const type_2139 = temp_2133[3];
                                                out_2107 += '\n _xthis->_x' + name_2137 + ' = ' + this.printExpression(expr_2138) + ';';
                                            }
                                        } break;
                                        };
                                    };
                                    out_2107 += '\n ';
                                    out_2107 += this.printStatement(expr_2128) + '\n return _xthis;\n};';
                                } else out_2107 += this.printStatement(expr_2128) + '\n};';
                            };
                        }
                    } break;
                    };
                };
                t_2118.push('\n}');
                this.declarationsOfFullTypes.push(t_2118.join(''));
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2140 = v;
                    switch (temp_2140&&temp_2140[0]) {
                    case 5: {
                        {
                            const name_2141 = temp_2140[1];
                            const expr_2142 = temp_2140[2];
                            const type_2143 = temp_2140[3];
                            {
                                out_2107 += '\n ' + this.stringifyType(type_2143) + ' ' + renamed_2117 + '_' + name_2141;
                                out_2107 += ';';
                            };
                        }
                    } break;
                    };
                };
            };
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_2144) {
            const temp_2145 = s_2144;
            switch (temp_2145&&temp_2145[0]) {
            case 1: {
                {
                    const el_2146 = temp_2145[1];
                    {
                        if (el_2146.length == 1) {
                            const temp_2147 = el_2146[0];
                            switch (temp_2147&&temp_2147[0]) {
                            case 1: {
                                return this.printBlock(el_2146[0])
                            } break;

                            default:
                            return '{ ' + this.printStatement(el_2146[0]) + '; }'
                            };
                        };
                        if (el_2146.length == 0) { return '{}' };
                        return this.printStatement(s_2144);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_2144) + '; }'
            };
        };
        printStatement(s_2148) {
            this.last = (() => {
                const result_2149 = s_2148;
                if (result_2149 != null) { return result_2149 };
                return this.last;
            })();
            {
                const temp_2150 = s_2148;
                switch (temp_2150&&temp_2150[0]) {
                case 0: {
                    {
                        const els_2151 = temp_2150[1];
                        {
                            let r_2152 = '';
                            for (const s of $toIterator(els_2151)) if (s != null) { r_2152 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_2152;
                        };
                    }
                } break;

                case 26: {
                    return 'break'
                } break;

                case 25: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_2153 = temp_2150[1];
                        {
                            this.pushTab();
                            let r_2154 = '{';
                            for (const e of $toIterator(el_2153)) {
                                const temp_2155 = e;
                                switch (temp_2155&&temp_2155[0]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_2156 = temp_2155[1];
                                        for (const s of $toIterator(els_2156)) if (s != null) { r_2154 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_2154 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_2154 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_2157 = temp_2150[1];
                        const args_2158 = temp_2150[2];
                        return '' + this.printExpression(e_2157) + '::new_' + this.printCallArguments(args_2158);
                    }
                } break;

                case 6: {
                    {
                        const name_2159 = temp_2150[1];
                        const expr_2160 = temp_2150[2];
                        const type_2161 = temp_2150[3];
                        return this.stringifyType(type_2161) + ' ' + name_2159 + '_' + (expr_2160 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2160), this.getType(expr_2160), type_2161));
                    }
                } break;

                case 5: {
                    {
                        const name_2162 = temp_2150[1];
                        const expr_2163 = temp_2150[2];
                        const type_2164 = temp_2150[3];
                        return this.stringifyType(type_2164) + ' ' + name_2162 + '_' + (expr_2163 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2163), this.getType(expr_2163), type_2164));
                    }
                } break;

                case 7: {
                    {
                        const name_2165 = temp_2150[1];
                        const expr_2166 = temp_2150[2];
                        const args_2167 = temp_2150[3];
                        const defaults_2168 = temp_2150[4];
                        const funcType_2169 = temp_2150[5];
                        {
                            const _currentReturnType_2170 = this.currentReturnType;
                            this.currentReturnType = this.getFunctionReturnType(funcType_2169);
                            const result_2171 = ('auto ' + (name_2165) + '_ = [&]') + this.printFunctionArguments(args_2167, defaults_2168) + '->' + this.printFunctionReturnType(funcType_2169) + ' ' + this.printBlock(expr_2166);
                            this.currentReturnType = _currentReturnType_2170;
                            return result_2171;
                        };
                    }
                } break;

                case 8: {
                    {
                        const e_2172 = temp_2150[1];
                        {
                            if (e_2172 == null) { return 'return' };
                            return 'return ' + this.printTypeConverter(this.printExpression(e_2172), this.getType(e_2172), this.currentReturnType);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_2173 = temp_2150[1];
                        const eif_2174 = temp_2150[2];
                        const eelse_2175 = temp_2150[3];
                        {
                            let r_2176 = 'if (' + this.printExpression(econd_2173) + ') ' + this.printBlock(eif_2174);
                            if (eelse_2175 != null) { r_2176 += ' else ' + this.printStatement(eelse_2175) };
                            return r_2176;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_2177 = temp_2150[1];
                        const args_2178 = temp_2150[2];
                        const expects_2179 = temp_2150[3];
                        return this.printExpression(e_2177) + this.printCallArguments(args_2178, expects_2179);
                    }
                } break;

                case 12: {
                    {
                        const expr_2180 = temp_2150[1];
                        const t_2181 = temp_2150[2];
                        const v_2182 = temp_2150[3];
                        const catches_2183 = temp_2150[4];
                        {
                            this.pushTab();
                            let r_2184 = '_try {\n' + this.tabs;
                            r_2184 += this.printStatement(expr_2180);
                            this.popTab();
                            r_2184 += '\n' + this.tabs + '} _catch(' + this.printType(t_2181[0]) + ' _x' + v_2182[0] + ') {\n' + this.tabs + ' ';
                            this.pushTab();
                            r_2184 += this.printStatement(catches_2183[0]);
                            this.popTab();
                            return r_2184 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 14: {
                    {
                        const a_2185 = temp_2150[1];
                        const v_2186 = temp_2150[2];
                        {
                            {
                                const temp_2187 = a_2185;
                                switch (temp_2187&&temp_2187[0]) {
                                case 10: {
                                    {
                                        const expr_2188 = temp_2187[1];
                                        const name_2189 = temp_2187[2];
                                        {
                                            const type_2190 = this.getType(expr_2188);
                                            if ((type_2190 == this.project.typer.typeAny) || (type_2190 == null)) { return this.printExpression(expr_2188) + '->var_(String_fromUTF8z("' + name_2189 + '"), ' + this.printToAnyConverter(this.printExpression(v_2186), this.getType(v_2186)) + ')' };
                                        };
                                    }
                                } break;
                                };
                            };
                            return this.printExpression(a_2185) + ' = ' + this.printExpression(v_2186);
                        };
                    }
                } break;

                case 13: {
                    {
                        const e_2191 = temp_2150[1];
                        return '_throw(' + this.printExpression(e_2191) + ')';
                    }
                } break;

                case 20: {
                    {
                        const name_2192 = temp_2150[1];
                        const over_2193 = temp_2150[2];
                        const by_2194 = temp_2150[3];
                        return 'for (Any_* ' + name_2192 + '_; ' + this.printExpression(over_2193) + ';) ' + this.printStatement(by_2194);
                    }
                } break;

                case 22: {
                    {
                        const e_2195 = temp_2150[1];
                        return this.printExpression(e_2195) + '++';
                    }
                } break;

                case 23: {
                    {
                        const e_2196 = temp_2150[1];
                        return this.printExpression(e_2196) + '--';
                    }
                } break;

                case 21: {
                    {
                        const econd_2197 = temp_2150[1];
                        const e_2198 = temp_2150[2];
                        const pre_2199 = temp_2150[3];
                        {
                            if (pre_2199) { return 'while (' + this.printExpression(econd_2197) + ') ' + this.printStatement(e_2198) };
                            return 'do {' + this.printStatement(e_2198) + '} while (' + this.printExpression(econd_2197) + ')';
                        };
                    }
                } break;

                case 15: {
                    {
                        const a_2200 = temp_2150[1];
                        const op_2201 = temp_2150[2];
                        const value_2202 = temp_2150[3];
                        return this.printExpression(a_2200) + ' ' + Token.stringify(op_2201) + '= ' + this.printExpression(value_2202);
                    }
                } break;

                case 16: {
                    {
                        const expr_2203 = temp_2150[1];
                        const name_2204 = temp_2150[2];
                        {
                            {
                                const temp_2205 = expr_2203;
                                switch (temp_2205&&temp_2205[0]) {
                                case 7: {
                                    {
                                        const id_2206 = temp_2205[1];
                                        if (id_2206.charAt(0) == id_2206.charAt(0).toUpperCase()) { return id_2206 + '_::' + name_2204 + '_' };
                                    }
                                } break;
                                };
                            };
                            return this.printExpression(expr_2203) + '->' + name_2204;
                        };
                    }
                } break;

                case 24: {
                    {
                        const expr_2207 = temp_2150[1];
                        const cases_2208 = temp_2150[2];
                        const statements_2209 = temp_2150[3];
                        {
                            let r_2210 = '{ auto switch_ = ' + this.printExpression(expr_2207) + ';';
                            let else_ = false;
                            {
                                let i_2211 = 0;
                                let it_2212 = 0;
                                let at_2213 = cases_2208.length;
                                while (it_2212 < at_2213) {
                                    i_2211 = it_2212;
                                    it_2212++;
                                    if (cases_2208[i_2211].length > 1) {
                                        if (else_) { r_2210 += ' else' };
                                        r_2210 += '\n' + this.tabs + 'if ((';
                                        const conds_2214 = [];
                                        for (const cc of $toIterator(cases_2208[i_2211])) {
                                            const temp_2215 = cc;
                                            switch (temp_2215&&temp_2215[0]) {
                                            case 8: {
                                                conds_2214.push('switch_ == -1')
                                            } break;

                                            default:
                                            conds_2214.push('switch_ == ' + this.printExpression(cc))
                                            };
                                        };
                                        r_2210 += conds_2214.join(') || (') + ')) ';
                                        this.pushTab();
                                        r_2210 += this.printBlock(statements_2209[i_2211]);
                                        this.popTab();
                                        else_ = true;
                                    } else {
                                        let step_2216 = 0;
                                        const cc_2217 = cases_2208[i_2211][0];
                                        if (step_2216 == 0 && cc_2217 != null) { step_2216 = 1 };
                                        if (step_2216 == 1) {
                                            if (else_) { r_2210 += ' else' };
                                            r_2210 += '\n' + this.tabs + 'if (';
                                            {
                                                const temp_2218 = cc_2217;
                                                switch (temp_2218&&temp_2218[0]) {
                                                case 8: {
                                                    r_2210 += 'switch_ == -1) '
                                                } break;

                                                default:
                                                r_2210 += 'switch_ == ' + this.printExpression(cc_2217) + ') '
                                                };
                                            };
                                            this.pushTab();
                                            r_2210 += this.printBlock(statements_2209[i_2211]);
                                            this.popTab();
                                            else_ = true;
                                        };
                                    };
                                };
                            };
                            {
                                let i_2219 = 0;
                                let it_2220 = 0;
                                let at_2221 = cases_2208.length;
                                while (it_2220 < at_2221) {
                                    i_2219 = it_2220;
                                    it_2220++;
                                    if (cases_2208[i_2219].length == 0) {
                                        if (else_) { r_2210 += ' else' };
                                        r_2210 += '\n' + this.tabs;
                                        r_2210 += this.printBlock(statements_2209[i_2219]);
                                    };
                                };
                            };
                            r_2210 += ';\n' + this.tabs;
                            return r_2210 + '}';
                            let r_2222 = 'switch (' + this.printExpression(expr_2207) + ') {';
                            {
                                let i_2223 = 0;
                                let it_2224 = 0;
                                let at_2225 = cases_2208.length;
                                while (it_2224 < at_2225) {
                                    i_2223 = it_2224;
                                    it_2224++;
                                    if (cases_2208[i_2223].length > 0) {
                                        r_2222 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_2208[i_2223])) r_2222 += 'case ' + this.printExpression(cc) + ': ';
                                        this.pushTab();
                                        r_2222 += this.printBlock(statements_2209[i_2223]);
                                        this.popTab();
                                        r_2222 += ' break;';
                                    };
                                };
                            };
                            {
                                let i_2226 = 0;
                                let it_2227 = 0;
                                let at_2228 = cases_2208.length;
                                while (it_2227 < at_2228) {
                                    i_2226 = it_2227;
                                    it_2227++;
                                    if (cases_2208[i_2226].length == 0) {
                                        r_2222 += '\n' + this.tabs + 'default:';
                                        r_2222 += '\n' + this.tabs;
                                        r_2222 += this.printBlock(statements_2209[i_2226]);
                                    };
                                };
                            };
                            r_2222 += '\n' + this.tabs;
                            return r_2222 + '}';
                        };
                    }
                } break;

                default:
                {
                    console.error('Unknown statement kind (GenCxx):', s_2148);
                    console.trace('Here I am!');
                }
                };
            };
        };
        printCallArguments(args_2229, expects_2230) {
            {
                let step_2231 = 0;
                const exp_2232 = expects_2230;
                if (step_2231 == 0 && exp_2232 != null) { step_2231 = 1 };
                if (step_2231 == 1) { return '(' + (() => {
                    const result_2233 = [];
                    const value_2234 = args_2229.length;
                    for (const i of $toIterator(value_2234)) result_2233.push(this.printTypeConverter(this.printExpression(args_2229[i]), this.getType(args_2229[i]), exp_2232[i]));
                    return result_2233;
                })().join(', ') + ')' };
            };
            return '(' + (() => {
                const result_2235 = [];
                const value_2236 = args_2229;
                for (const a of $toIterator(value_2236)) result_2235.push(this.printExpression(a));
                return result_2235;
            })().join(', ') + ')';
        };
        getFunctionReturnType(funcType_2237) {
            const temp_2238 = funcType_2237;
            switch (temp_2238&&temp_2238[0]) {
            case 12: {
                {
                    const args_2239 = temp_2238[1];
                    const returns_2240 = temp_2238[2];
                    return returns_2240;
                }
            } break;

            default:
            return null
            };
        };
        printFunctionReturnType(funcType_2241) {
            const temp_2242 = funcType_2241;
            switch (temp_2242&&temp_2242[0]) {
            case 12: {
                {
                    const args_2243 = temp_2242[1];
                    const returns_2244 = temp_2242[2];
                    return this.stringifyType(returns_2244);
                }
            } break;

            default:
            return 'void'
            };
        };
        printToAnyConverter(string_2245, type_2246) {
            if (type_2246 == this.project.typer.typeAny) { return string_2245 };
            if (type_2246 == this.project.typer.typeBool) { return 'Any_fromBool(' + string_2245 + ')' };
            if (type_2246 == this.project.typer.typeInt) { return 'Any_fromInt(' + string_2245 + ')' };
            return string_2245;
        };
        printTypeConverter(string_2247, from_2248, to_2249) {
            if (from_2248 == to_2249) { return string_2247 };
            if ((from_2248 == this.project.typer.typeBool) && (to_2249 == this.project.typer.typeAny)) { return 'Any_fromBool(' + string_2247 + ')' };
            if ((from_2248 == this.project.typer.typeAny) && (to_2249 == this.project.typer.typeBool)) { return '(' + string_2247 + ')->_toBool()' };
            if ((from_2248 == this.project.typer.typeAny) && (to_2249 == this.project.typer.typeInt)) { return '(' + string_2247 + ')->_toInt()' };
            if ((from_2248 == this.project.typer.typeAny) && (to_2249 == this.project.typer.typeFloat)) { return '(' + string_2247 + ')->_toFloat()' };
            if ((from_2248 == this.project.typer.typeInt) && (to_2249 == this.project.typer.typeString)) { return 'String_fromInt(' + string_2247 + ')' };
            if (to_2249 == this.project.typer.typeAny) { return this.printToAnyConverter(string_2247, from_2248) };
            if (from_2248 != to_2249) { return '(' + this.stringifyType(to_2249) + ')(' + string_2247 + ')' };
            return string_2247;
        };
        printFunctionArguments(args_2250, funcType_2251, defaults_2252) {
            if (args_2250.length == 0) { return '(void)' };
            {
                const temp_2253 = funcType_2251;
                switch (temp_2253&&temp_2253[0]) {
                case 12: {
                    {
                        const types_2254 = temp_2253[1];
                        return '(' + (() => {
                            const result_2255 = [];
                            const value_2256 = args_2250.length;
                            for (const a of $toIterator(value_2256)) result_2255.push((() => {
                                let result_2257 = this.stringifyType(types_2254[a]) + ' ' + args_2250[a] + '_';
                                if (defaults_2252) {
                                    const temp_2258 = types_2254[a];
                                    switch (temp_2258&&temp_2258[0]) {
                                    case 2: {
                                        result_2257 += ' = nullptr'
                                    } break;

                                    case 1: {
                                        result_2257 += ' = nullptr'
                                    } break;
                                    };
                                };
                                return result_2257;
                            })());
                            return result_2255;
                        })().join(', ') + ')';
                    }
                } break;
                };
            };
            return '(' + (() => {
                const result_2259 = [];
                const value_2260 = args_2250.length;
                for (const a of $toIterator(value_2260)) result_2259.push('Any_* ' + args_2250[a] + '_');
                return result_2259;
            })().join(', ') + ')';
        };
        stringType(t_2261, prefix_2262) {
            if (t_2261 == null) { return 'void*' };
            {
                const temp_2263 = t_2261;
                switch (temp_2263&&temp_2263[0]) {
                case 2: {
                    {
                        const name_2264 = temp_2263[1];
                        const params_2265 = temp_2263[2];
                        return '_x' + name_2264;
                    }
                } break;

                case 1: {
                    {
                        const name_2266 = temp_2263[1];
                        return '_x' + name_2266;
                    }
                } break;

                case 5: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const t_2267 = temp_2263[1];
                        return this.stringType(t_2267, '');
                    }
                } break;
                };
            };
            return prefix_2262 + 'void*';
        };
        printType(t_2268) {
            const type_2269 = this.stringType(t_2268, '');
            return type_2269;
        };
        stringifyType(t_2270) {
            const temp_2271 = t_2270;
            switch (temp_2271&&temp_2271[0]) {
            case 2: {
                {
                    const t_2272 = temp_2271[1];
                    {
                        const name_2273 = this.stringifyType(t_2272);
                        if (name_2273 == 'int32_t') { return 'int32_t*' };
                        if (name_2273 == 'bool') { return 'bool*' };
                        if (name_2273 == 'double') { return 'double*' };
                        return name_2273;
                    };
                }
            } break;

            case 1: {
                {
                    const handle_2274 = temp_2271[1];
                    return this.stringifyType(handle_2274.value);
                }
            } break;

            case 4: {
                {
                    const type_2275 = temp_2271[1];
                    {
                        if (type_2275.name == 'Int') { return 'int32_t' };
                        if (type_2275.name == 'Bool') { return 'bool' };
                        if (type_2275.name == 'Void') { return 'void' };
                        if (type_2275.name == 'Float') { return 'double' };
                        return type_2275.name + '_*';
                    };
                }
            } break;

            case 3: {
                {
                    const type_2276 = temp_2271[1];
                    return type_2276.name + '_*';
                }
            } break;

            case 6: {
                {
                    const type_2277 = temp_2271[1];
                    {
                        {
                            let step_2278 = 0;
                            const sub = type_2277.fieldsTypeSimple;
                            if (step_2278 == 0 && sub != null) { step_2278 = 1 };
                            if (step_2278 == 1) { return this.stringifyType(sub) };
                        };
                        return type_2277.name + '_*';
                    };
                }
            } break;

            case 7: {
                {
                    const type_2279 = temp_2271[1];
                    return type_2279.name + '_*';
                }
            } break;

            case 19: {
                return 'Any_*'
            } break;

            case 12: {
                return 'Any_*'
            } break;

            case null: case undefined: {
                return 'Any_*/*?*/'
            } break;

            default:
            throw 'stringifyType ' + t_2270
            };
        };
        getType(e_2280) {
            const temp_2281 = e_2280;
            switch (temp_2281&&temp_2281[0]) {
            case 3: {
                return this.project.typer.typeInt
            } break;

            case 4: {
                return this.project.typer.typeFloat
            } break;

            case 2: {
                return this.project.typer.typeString
            } break;

            case 5: {
                return this.project.typer.typeBool
            } break;

            case 6: {
                return this.project.typer.typeBool
            } break;

            case 7: {
                {
                    const type_2282 = temp_2281[2];
                    return type_2282;
                }
            } break;

            case 16: {
                {
                    const expr_2283 = temp_2281[1];
                    return this.getType(expr_2283);
                }
            } break;

            case 11: {
                {
                    const type_2284 = temp_2281[3];
                    return type_2284;
                }
            } break;

            case 13: {
                {
                    const type_2285 = temp_2281[4];
                    return type_2285;
                }
            } break;

            case 10: {
                {
                    const type_2286 = temp_2281[3];
                    return type_2286;
                }
            } break;

            default:
            return this.project.typer.typeAny
            };
        };
        registerString(string_2287) {
            this.declarationsOfStrings.push(string_2287);
            return this.declarationsOfStrings.length - 1;
        };
        printExpression(e_2288) {
            const temp_2289 = e_2288;
            switch (temp_2289&&temp_2289[0]) {
            case 9: {
                return 'this'
            } break;

            case 7: {
                {
                    const name_2290 = temp_2289[1];
                    return '' + name_2290 + '_';
                }
            } break;

            case 8: {
                return 'nullptr'
            } break;

            case 3: {
                {
                    const v_2291 = temp_2289[1];
                    return v_2291;
                }
            } break;

            case 4: {
                {
                    const v_2292 = temp_2289[1];
                    {
                        if (v_2292.indexOf('.') == -1) { return v_2292 + '.0' };
                        return v_2292;
                    };
                }
            } break;

            case 2: {
                {
                    const string_2293 = temp_2289[1];
                    {
                        {
                            let step_2294 = 0;
                            const id_2295 = this.declarationsOfStringsMap.get(string_2293);
                            if (step_2294 == 0 && id_2295 != null) { step_2294 = 1 };
                            if (step_2294 == 1) { return ('String_Strings[' + (id_2295) + ']') + '/*has:' + string_2293.split('*').join('#') + '*/' };
                        };
                        const s_2296 = string_2293.split('');
                        const charsOut_2297 = [];
                        while (s_2296.length > 0) {
                            const temp_2298 = s_2296[0];
                            switch (temp_2298) {
                            case '\'': {
                                {
                                    charsOut_2297.push('\\\'');
                                    s_2296.shift();
                                }
                            } break;

                            case '"': {
                                {
                                    charsOut_2297.push('\\"');
                                    s_2296.shift();
                                }
                            } break;

                            case '\n': {
                                {
                                    charsOut_2297.push('\\n');
                                    s_2296.shift();
                                }
                            } break;

                            case '\r': {
                                {
                                    charsOut_2297.push('\\r');
                                    s_2296.shift();
                                }
                            } break;

                            case '\\': {
                                {
                                    s_2296.shift();
                                    if (s_2296[0] == '\'') {
                                        charsOut_2297.push('\\\'');
                                        s_2296.shift();
                                    } else if (s_2296[0] == '"') {
                                        charsOut_2297.push('\\"');
                                        s_2296.shift();
                                    } else if (s_2296[0] == '\\') {
                                        charsOut_2297.push('\\\\');
                                        s_2296.shift();
                                    } else {
                                        charsOut_2297.push('\\');
                                    };
                                }
                            } break;

                            default:
                            {
                                charsOut_2297.push(s_2296[0]);
                                s_2296.shift();
                            }
                            };
                        };
                        const id_2299 = this.registerString(charsOut_2297.join(''));
                        this.declarationsOfStringsMap.set(string_2293, id_2299);
                        return ('String_Strings[' + (id_2299) + ']') + '/*new:' + string_2293.split('*').join('#') + '*/';
                    };
                }
            } break;

            case 5: {
                return 'true'
            } break;

            case 6: {
                return 'false'
            } break;

            case 10: {
                {
                    const expr_2300 = temp_2289[1];
                    const name_2301 = temp_2289[2];
                    {
                        const temp_2302 = expr_2300;
                        switch (temp_2302&&temp_2302[0]) {
                        case 9: {
                            return 'this->' + name_2301 + '_'
                        } break;

                        case 7: {
                            {
                                const id_2303 = temp_2302[1];
                                {
                                    if (id_2303.charAt(0) == id_2303.charAt(0).toUpperCase()) { return id_2303 + '_::' + name_2301 + '_' };
                                    const type_2304 = this.getType(expr_2300);
                                    if ((type_2304 == this.project.typer.typeAny) || (type_2304 == null)) { return this.printExpression(expr_2300) + '->let_(String_fromUTF8z("' + name_2301 + '"))' };
                                    return this.printExpression(expr_2300) + '->' + name_2301 + '_';
                                };
                            }
                        } break;

                        default:
                        return this.printExpression(expr_2300) + '->' + name_2301 + '_'
                        };
                    };
                }
            } break;

            case 11: {
                {
                    const e_2305 = temp_2289[1];
                    const args_2306 = temp_2289[2];
                    return this.printExpression(e_2305) + this.printCallArguments(args_2306);
                }
            } break;

            case 14: {
                {
                    const name_2307 = temp_2289[1];
                    const expr_2308 = temp_2289[2];
                    const args_2309 = temp_2289[3];
                    const defaults_2310 = temp_2289[4];
                    const funcType_2311 = temp_2289[5];
                    {
                        const _currentReturnType_2312 = this.currentReturnType;
                        this.currentReturnType = this.getFunctionReturnType(funcType_2311);
                        const result_2313 = '[&]' + this.printFunctionArguments(args_2309, defaults_2310) + '->' + this.printFunctionReturnType(funcType_2311) + ' ' + this.printBlock(expr_2308);
                        this.currentReturnType = _currentReturnType_2312;
                        return result_2313;
                    };
                }
            } break;

            case 12: {
                {
                    const e_2314 = temp_2289[1];
                    const args_2315 = temp_2289[2];
                    return '' + this.printExpression(e_2314) + '::new_' + this.printCallArguments(args_2315);
                }
            } break;

            case 18: {
                {
                    const el_2316 = temp_2289[1];
                    {
                        if (el_2316.length == 0) { return 'Array_::new_(0)' };
                        return 'Array_from(' + (() => {
                            const result_2317 = [];
                            const value_2318 = el_2316;
                            for (const a of $toIterator(value_2318)) result_2317.push(this.printExpression(a));
                            return result_2317;
                        })().join(', ') + ')';
                    };
                }
            } break;

            case 20: {
                {
                    const op_2319 = temp_2289[1];
                    const postfix_2320 = temp_2289[2];
                    const e_2321 = temp_2289[3];
                    {
                        if (postfix_2320) { return this.printExpression(e_2321) + Token.stringify(op_2319) };
                        return Token.stringify(op_2319) + this.printExpression(e_2321);
                    };
                }
            } break;

            case 21: {
                {
                    const nullable_2322 = temp_2289[1];
                    const othewise_2323 = temp_2289[2];
                    return '((' + this.printExpression(nullable_2322) + ')||(' + this.printExpression(othewise_2323) + '))';
                }
            } break;

            case 16: {
                {
                    const e_2324 = temp_2289[1];
                    return '(' + this.printExpression(e_2324) + ')';
                }
            } break;

            case 13: {
                {
                    const a_2325 = temp_2289[1];
                    const op_2326 = temp_2289[2];
                    const b_2327 = temp_2289[3];
                    {
                        if (op_2326 == 111) {
                            if (this.getType(a_2325) == this.project.typer.typeString) { return 'String_opAdd(' + this.printExpression(a_2325) + ', ' + this.printTypeConverter(this.printExpression(b_2327), this.getType(b_2327), this.project.typer.typeString) + ')' };
                            if (this.getType(b_2327) == this.project.typer.typeString) { return 'String_opAdd(' + this.printTypeConverter(this.printExpression(a_2325), this.getType(a_2325), this.project.typer.typeString) + ', ' + this.printExpression(b_2327) + ')' };
                        };
                        return this.printExpression(a_2325) + ' ' + Token.stringify(op_2326) + ' ' + this.printExpression(b_2327);
                    };
                }
            } break;

            case 23: {
                {
                    const expr_2328 = temp_2289[1];
                    const index_2329 = temp_2289[2];
                    return this.printExpression(expr_2328) + '->get_(' + this.printTypeConverter(this.printExpression(index_2329), this.getType(index_2329), this.project.typer.typeInt) + ')';
                }
            } break;

            case 22: {
                {
                    const econd_2330 = temp_2289[1];
                    const eif_2331 = temp_2289[2];
                    const eelse_2332 = temp_2289[3];
                    {
                        let r_2333 = '';
                        try {
                            r_2333 += '(' + this.printExpression(econd_2330) + ')?';
                            r_2333 += '(' + this.printExpression(eif_2331) + ')';
                            r_2333 += ':' + this.printExpression(eelse_2332);
                            return r_2333;
                        } catch (temp_2334) {
                            if (true) {
                            const error = temp_2334
                            {
                                console.log('If =>', e_2288, error);
                                return r_2333 + '<!-- If => error -->';
                            } } else

                            throw temp_2334;
                        };
                    };
                }
            } break;

            case 33: {
                {
                    const expr_2335 = temp_2289[1];
                    {
                        const e_2336 = this.printExpression(expr_2335);
                        return '(' + e_2336 + ' == nullptr? -1 : ' + e_2336 + '->is_)';
                    };
                }
            } break;

            case 17: {
                {
                    const names_2337 = temp_2289[1];
                    const el_2338 = temp_2289[2];
                    return 'Object_from(' + (() => {
                        const result_2339 = [];
                        const value_2340 = el_2338.length;
                        for (const i of $toIterator(value_2340)) result_2339.push(((names_2337[i]) + ', ' + this.printExpression(el_2338[i])));
                        return result_2339;
                    })().join(', ') + ')';
                }
            } break;

            case 19: {
                {
                    const keys_2341 = temp_2289[1];
                    const values_2342 = temp_2289[2];
                    {
                        if (keys_2341.length == 0) { return 'Map_::new_()' };
                        return 'Map_from(' + (() => {
                            const result_2343 = [];
                            const value_2344 = keys_2341.length;
                            for (const i of $toIterator(value_2344)) result_2343.push('' + this.printExpression(keys_2341[i]) + ', ' + this.printExpression(values_2342[i]) + '');
                            return result_2343;
                        })().join(', ') + ')';
                    };
                }
            } break;

            case 31: {
                {
                    const a_2345 = temp_2289[1];
                    const op_2346 = temp_2289[2];
                    const value_2347 = temp_2289[3];
                    return this.printExpression(a_2345) + ' ' + Token.stringify(op_2346) + '= ' + this.printExpression(value_2347);
                }
            } break;

            case 32: {
                {
                    const kind_2348 = temp_2289[1];
                    const args_2349 = temp_2289[2];
                    const s_2350 = temp_2289[3];
                    {
                        const temp_2351 = kind_2348;
                        switch (temp_2351) {
                        case 0: {
                            return '((' + this.printExpression(args_2349[0]) + ')' + s_2350 + '(' + this.printExpression(args_2349[1]) + '))'
                        } break;

                        case 1: {
                            return s_2350 + this.printCallArguments(args_2349)
                        } break;

                        case 2: {
                            return '(' + s_2350 + '(' + this.printExpression(args_2349[0]) + '))'
                        } break;

                        case 3: {
                            return '((' + this.printExpression(args_2349[1]) + ')' + s_2350 + ')'
                        } break;
                        };
                    };
                }
            } break;

            case 24: {
                {
                    const e_2352 = temp_2289[1];
                    const to_2353 = temp_2289[2];
                    {
                        {
                            const temp_2354 = e_2352;
                            switch (temp_2354&&temp_2354[0]) {
                            case 8: {
                                return 'nullptr'
                            } break;
                            };
                        };
                        return 'reinterpret_cast<' + this.stringifyType(to_2353) + '>(' + this.printExpression(e_2352) + '))';
                    };
                }
            } break;

            case 34: {
                {
                    const typeName = temp_2289[1];
                    const tagName_2355 = temp_2289[2];
                    const tag_2356 = temp_2289[3];
                    const args_2357 = temp_2289[4];
                    return '' + typeName + '_::' + tagName_2355 + '_(' + (() => {
                        const result_2358 = [];
                        const value_2359 = args_2357;
                        for (const a of $toIterator(value_2359)) result_2358.push(this.printExpression(a));
                        return result_2358;
                    })().join(', ') + ')';
                }
            } break;

            case 35: {
                {
                    const expr_2360 = temp_2289[1];
                    const index_2361 = temp_2289[2];
                    return this.printExpression(expr_2360) + '->enum_[' + index_2361 + ']';
                }
            } break;

            default:
            {
                console.error('Unknown expression kind:', e_2288);
                return '<!-- ' + ((() => {
                    const result_2362 = e_2288;
                    if (result_2362 != null) { return result_2362 };
                    return [];
                })())[0] + ' -->';
            }
            };
        };
    }
    GenCxx.spawn = () => { return new GenCxx() };
    var Rename = class {
        constructor(defaults_2365) {
        this.name = defaults_2365 };
    }
    var NiceComplexEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceSimpleEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceClass = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
            this.methods = []
            this.vars = []
            this.property = []
            this.jsRequire = null
            this.jsNative = null
        {
        } };
    }
    var NiceProject = class {
        constructor() {
            this.interfaces = []
            this.classes = []
            this.enumsSimple = []
            this.enumsComplex = []
            this.globalVars = []
            this.globalFuncs = []
            this.globalFunctions = []
            this.externalFunctions = []
            this.init = []
        {
        } };
    }
    var DataHelper = class {
    }
    DataHelper.varName = (v_2497) => {
            const temp_2498 = v_2497;
            switch (temp_2498&&temp_2498[0]) {
            case 23: {
                {
                    const name_2499 = temp_2498[1];
                    return name_2499;
                }
            } break;

            default:
            throw ('varName got not a TVar, but `' + (v_2497) + '`')
            };
        };
    DataHelper.nameOf = (v_2500) => {
            const temp_2501 = v_2500;
            switch (temp_2501&&temp_2501[0]) {
            case 44: {
                {
                    const node_2502 = temp_2501[1];
                    return DataHelper.nameOf(node_2502);
                }
            } break;

            case 26: {
                {
                    const node_2503 = temp_2501[1];
                    return DataHelper.nameOf(node_2503);
                }
            } break;

            case 23: {
                {
                    const name_2504 = temp_2501[1];
                    return name_2504;
                }
            } break;

            case 37: {
                {
                    const t_2505 = temp_2501[1];
                    {
                        {
                            const temp_2506 = t_2505;
                            switch (temp_2506&&temp_2506[0]) {
                            case 1: {
                                {
                                    const name_2507 = temp_2506[1];
                                    return name_2507;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2508 = temp_2506[1];
                                    return name_2508;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 21: {
                {
                    const name_2509 = temp_2501[1];
                    return name_2509;
                }
            } break;

            case 25: {
                {
                    const t_2510 = temp_2501[1];
                    {
                        {
                            const temp_2511 = t_2510;
                            switch (temp_2511&&temp_2511[0]) {
                            case 1: {
                                {
                                    const name_2512 = temp_2511[1];
                                    return name_2512;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2513 = temp_2511[1];
                                    return name_2513;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 8: {
                {
                    const t_2514 = temp_2501[1];
                    {
                        const temp_2515 = t_2514;
                        switch (temp_2515&&temp_2515[0]) {
                        case 1: {
                            {
                                const name_2516 = temp_2515[1];
                                return name_2516;
                            }
                        } break;

                        case 2: {
                            {
                                const name_2517 = temp_2515[1];
                                return name_2517;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 43: {
                {
                    const field_2518 = temp_2501[1];
                    return DataHelper.nameOf(field_2518);
                }
            } break;

            default:
            throw ('nameOf expected named node, but got `' + (v_2500) + '`')
            };
        };
    DataHelper.asStringAttValue = (a_2519, index_2520) => {
            const temp_2521 = a_2519.values[index_2520];
            switch (temp_2521&&temp_2521[0]) {
            case null: case undefined: {
                throw 'Got null, not a string'
            } break;

            case 0: {
                {
                    const s_2522 = temp_2521[1];
                    return s_2522;
                }
            } break;

            default:
            throw ('Got `' + (a_2519.values[index_2520]) + '`, not a string')
            };
        };
    DataHelper.getLastOfBlock = (block_2523) => {
            const temp_2524 = block_2523;
            switch (temp_2524&&temp_2524[0]) {
            case null: case undefined: {
                throw 'Got null, not a block'
            } break;

            case 11: {
                {
                    const el_2525 = temp_2524[1];
                    return el_2525[el_2525.length - 1];
                }
            } break;

            default:
            throw ('Got `' + (block_2523) + '`, not a block')
            };
        };
    DataHelper.isVoidValue = (block_2526) => {
            {
                const temp_2527 = block_2526;
                switch (temp_2527&&temp_2527[0]) {
                case null: case undefined: {
                    return true
                } break;

                case 15: {
                    return true
                } break;

                case 17: {
                    return true
                } break;

                case 18: {
                    return true
                } break;

                case 23: {
                    return true
                } break;

                case 13: {
                    {
                        const eelse_2528 = temp_2527[3];
                        if (eelse_2528 == null) { return true };
                    }
                } break;

                case 37: {
                    return true
                } break;

                case 25: {
                    return true
                } break;

                case 34: {
                    return true
                } break;

                case 11: {
                    {
                        const el_2529 = temp_2527[1];
                        {
                            if (el_2529.length == 0) { return true };
                            return DataHelper.isVoidValue(el_2529[el_2529.length - 1]);
                        };
                    }
                } break;

                default:
                return false
                };
            };
            return false;
        };
    DataHelper.extractTypeName = (t_2530) => {
            const temp_2531 = t_2530;
            switch (temp_2531&&temp_2531[0]) {
            case 1: {
                {
                    const name_2532 = temp_2531[1];
                    return name_2532;
                }
            } break;

            case 2: {
                {
                    const name_2533 = temp_2531[1];
                    return name_2533;
                }
            } break;

            case null: case undefined: {
                return null
            } break;

            default:
            throw 'Type has no name: ' + t_2530
            };
        };
    DataHelper.getAttribute = (atts_2534, name_2535) => {
            if (atts_2534 != null && atts_2534.length > 0) { for (const att of $toIterator(atts_2534)) {
                if (att.name == name_2535) { return att };
            } };
            return null;
        };
    var NodeData = class {
        constructor(atLine, atColumn, atFile) {
        {
            this.line = atLine;
            this.column = atColumn;
            this.fileName = atFile;
        } };
    }
    var Project = class {
    }
    Project.mapAttributes = new Map()
    Project.mapNames = new Map()
    Project.data = new Map()
    Project.hints = []
    Project.defines = {}
    var Attribute = class {
        constructor(name_2680, values_2681) {
        {
            this.name = name_2680;
            this.values = values_2681;
        } };
    }
    var EnumType = class {
        constructor() {
            this.fieldNames = []
            this.tagBindVars = []
            this.tagBindVarsNames = []
            this.fieldStatic = []
            this.fieldEnumConstructor = []
            this.fieldType = []
        {
        } };
        getIndex(name_2682) {
            let index_2683 = this.fieldNames.indexOf(name_2682);
            {
                let step_2684 = 0;
                const temp_2685 = index_2683 == -1;
                let extend_2686 = null;
                if (step_2684 == 0 && temp_2685 != false) {
                    extend_2686 = this.extend;
                    step_2684 = 1;
                };
                if (step_2684 == 1 && extend_2686 != null) { step_2684 = 2 };
                if (step_2684 == 2) {};
            };
            return index_2683;
        };
    }
    var ClassType = class {
        constructor() {
            this.implement = []
            this.isInterface = false
            this.owner = null
            this.fieldNames = []
            this.fieldRenames = []
            this.fieldStatic = []
            this.fieldNode = []
            this.fieldInitialized = []
            this.protected = []
            this.immutable = []
            this.lateAssignRequired = []
            this.constructor = -1
            this.indexKeyType = null
            this.indexValueType = null
            this.fields = new Map()
            this.genericParams = []
            this.useless = true
            this.nativeBasicType = false
            this.instanceCache = /*ClassInstance*/[4,this,null]
            this.genericCache = []
        {
        } };
        instantiate() { return this.instanceCache };
        instantiateGeneric(params_2687) {
            for (const cached of $toIterator(this.genericCache)) {
                if (cached.length != (params_2687.length + 1)) { continue };
                let found_2688 = true;
                {
                    let i_2689 = 0;
                    let it_2690 = 0;
                    let at_2691 = cached.length - 1;
                    while (it_2690 < at_2691) {
                        i_2689 = it_2690;
                        it_2690++;
                        {
                            if (params_2687[i_2689] != cached[i_2689 + 1]) {
                                found_2688 = false;
                                break;
                            };
                        };
                    };
                };
                if (found_2688) {
                    const result_2692 = cached[0];
                    return result_2692;
                };
            };
            const result_2693 = /*ClassInstance*/[4,this,params_2687];
            const cache = [result_2693];
            for (const param of $toIterator(params_2687)) cache.push(param);
            this.genericCache.push(cache);
            return result_2693;
        };
    }
    var CompilerError = class {
        constructor(except, details, line_2740, column_2741, filename_2742) {
        {
            this.exception = except;
            this.details = ((details == null))? ('') : details;
            this.line = ((line_2740 == null))? (0) : line_2740;
            this.column = ((column_2741 == null))? (0) : column_2741;
            this.fileName = ((filename_2742 == null))? ('') : filename_2742;
        } };
        toString() { return '[' + this.fileName + ':' + this.line + ':' + this.column + ']: ' + this.details };
    }
    var Hint = class {
        constructor(code_2743, details_2744, position_2745) {
        {
            this.code = code_2743;
            this.details = details_2744;
            this.at = position_2745;
        } };
        toString() { return '[' + this.at.fileName + ':' + this.at.line + ':' + this.at.column + ']: Hint #' + this.code + ': ' + this.details };
    }
    var Main = class {
        init() {
            if (Fs.existsSync('hexa.json')) {
                const create = Main.question('Hexa package \'hexa.json\' already exists here. Create new? (no)');
                if ((create.toLowerCase() != 'yes') && (create.toLowerCase() != 'y')) { process_22.exit(1) };
            };
            let currentDirTmp = process.cwd().split(path.sep);
            let packageFileName = currentDirTmp.splice(0, -1).join(path.sep) + path.sep + 'hexa.json';
            let currentDir = currentDirTmp[currentDirTmp.length - 1];
            let name_2755 = Main.question(('Enter package name (' + (currentDir) + '): '));
            if (name_2755 == '') { name_2755 = currentDir };
            let version_2756 = Main.question('Enter package version (1.0.0): ');
            if (version_2756 == '') { version_2756 = '1.0.0' };
            let description = Main.question('Enter package description: ');
            let main = Main.question('Enter main file (main.hexa): ');
            if (main == '') { main = 'main.hexa' };
            const target_2757 = {name:'default', generator:'js', output:name_2755, options:[]};
            const generatorstr = Main.question('Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n');
            if (generatorstr.toUpperCase() == 'C' || generatorstr == '2') { target_2757.generator = 'native' } else if (generatorstr.toUpperCase() == 'HAXE' || generatorstr == '3') { target_2757.generator = 'haxe' } else {
                target_2757.output += '.js';
                const option = Main.question('Select standard library (nodejs):\n1. no library\n2. nodejs\n3. browser\n');
                {
                    const temp_2758 = option;
                    switch (temp_2758) {
                    case '1': {
                        {
                        }
                    } break;

                    case '2': {
                        target_2757.options.push('nodejs')
                    } break;

                    case '3': {
                        target_2757.options.push('browser')
                    } break;

                    default:
                    target_2757.options.push('nodejs')
                    };
                };
            };
            while (!(main.endsWith('.hexa'))) {
                process_22.stdout.write('Wrong file name. Must end with \'.hexa\'.\n');
                main = Main.question('Enter main file (main.hexa): ');
            };
            const author = Main.question('Enter package author name: ');
            const license = Main.question('Enter license: ');
            const pack = {name:name_2755, version:version_2756, description:description, author:author, license:license, targets:[target_2757], files:[main]};
            const extras = [];
            let addGit = false;
            if (Fs.existsSync('.git')) { if (!Fs.existsSync('.gitignore') || !Fs.existsSync('.gitattributes')) { if (['y', 'yes', ''].includes(Main.question('Create additional git files? (.gitignore, .gitattributes) (yes)').toLowerCase().trim())) {
                if (!Fs.existsSync('.gitignore')) { extras.push('.gitignore') };
                if (!Fs.existsSync('.gitattributes')) { extras.push('.gitattributes') };
                addGit = true;
            } } };
            const addMain = Fs.existsSync(main) == false;
            if (addMain) { extras.push(main) };
            const packageStr = JSON.stringify(pack, (null), '\t').split('\r\n').join('\n').split('\n').join('\r\n');
            const extrasStr = extras.length > (0)? ('\nAnd \'' + extras.join('\', \'') + '\'') : '';
            const answ = Main.question(('About to write to: ' + (packageFileName) + ':\n' + (packageStr) + '' + (extrasStr) + '\nIs this ok? (yes)'));
            if ((answ != '') && (answ.toLowerCase() != 'yes') && (answ.toLowerCase() != 'y')) {
                console.log('Exiting without changes');
                process_22.exit(1);
            };
            Fs.writeFileSync('hexa.json', packageStr + '\r\n');
            if ((addMain) && (!Fs.existsSync(main))) { Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")') };
            if ((addGit) && (!Fs.existsSync('.gitattributes'))) { Fs.writeFileSync('.gitattributes', ['# Auto detect text files and perform LF normalization', '* text=auto', ''].join('\r\n')) };
            if ((addGit) && (!Fs.existsSync('.gitignore'))) { Fs.writeFileSync('.gitignore', ['# Mac & Win', '*~', '._*', '*DS_Store*', '.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', 'ehthumbs.db', 'Thumbs.db', '*Thumbs.db', '__MACOSX', '', '# Custom', '*.map', target_2757.output, 'node_modules', ''].join('\r\n')) };
            process_22.stdout.write('Hexa package initialized!');
        };
        processFile(target_2759) {
            const content = Fs.readFileSync(target_2759);
            const tokens_2760 = Lexer.tokenize(content, target_2759);
            if (tokens_2760.length > 0) { this.lines += tokens_2760.line[tokens_2760.length - 1] };
            const parsed_2761 = Parser.parseNodes(tokens_2760);
            return parsed_2761;
        };
        repl() {
            const js = this.processFile(__dirname + '/library/js/js.hexa');
            const nodejs = this.processFile(__dirname + '/library/nodejs/nodejs.hexa');
            const lines_2762 = [];
            let lines_2763 = [];
            while (true) {
                let line_2764 = Main.question('> ');
                if (line_2764.length == 0) { continue };
                lines_2763.push(line_2764);
                lines_2763 = [line_2764];
                try {
                    let code_2766 = '"use strict"\r\n';
                    try {
                        const content_2768 = lines_2763.join('\n');
                        const tokens_2769 = Lexer.tokenize(Buffer.from(content_2768), 'REPL');
                        const parser_2770 = Parser.toNode(Parser.parseNodes(tokens_2769));
                        let collected_2771 = /*TBlock*/[11,[js, nodejs, parser_2770]];
                        if (parser_2770 == null) { continue };
                    } catch (temp_2767) {
                        if (true) {
                        const e = temp_2767
                        {
                            lines_2763.pop();
                            console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m');
                            continue;
                        } } else

                        throw temp_2767;
                    };
                    const result_2772 = eval(code_2766);
                    if (result_2772 == null) { console.log('\x1b[90m' + result_2772, '\x1b[0m') } else if (result_2772 == true) { console.log('\x1b[33m' + result_2772, '\x1b[0m') } else if (result_2772 == false) { console.log('\x1b[33m' + result_2772, '\x1b[0m') } else console.log(result_2772);
                } catch (temp_2765) {
                    if (true) {
                    const e = temp_2765
                    {
                        console.error('Error: ' + e);
                    } } else

                    throw temp_2765;
                };
            };
        };
        processFiles(targets) {
            let res_2773 = [];
            if (false) {
                let targets_2774;
                for (const target of $toIterator(targets_2774)) {
                };
                targets_2774.pop();
            };
            for (const target of $toIterator(targets)) {
                if (!Fs.existsSync(target)) {
                    console.log(('No such source file on disk `' + (target) + '`'));
                    continue;
                };
                try { res_2773.push(this.processFile(target)) } catch (temp_2775) {
                    if (true) {
                    const e = temp_2775
                    {
                        console.log(e.toString());
                    } } else

                    throw temp_2775;
                };
            };
            if (targets.length != res_2773.length) {
                console.log('[Stopped on errors]');
                process_22.exit(1);
            };
            return res_2773;
        };
        incorrect(what) {
            process_22.stdout.write(('Incorrect package file! Field `' + (what) + '` does not exists\n'));
            process_22.exit(1);
        };
        loadPackage(filename_2776, target_2777) {
            const pack_2778 = JSON.parse(Fs.readFileSync(path.resolve(filename_2776)).toString('utf8').split('\r\n').join('\n'));
            if (pack_2778.name == null) { this.incorrect('name') };
            if (pack_2778.targets == null) { this.incorrect('targets') };
            {
                let step_2779 = 0;
                const define = pack_2778.define;
                if (step_2779 == 0 && define != null) { step_2779 = 1 };
                if (step_2779 == 1) { for (const key of $toIterator(Reflect.ownKeys(define))) {
                    if (!Reflect.has(Project.defines, key)) { Reflect.set(Project.defines, key, Reflect.get(define, key)) };
                } };
            };
            const t_2780 = (() => {
                {
                    let t_2781 = 0;
                    let it_2782 = 0;
                    let at_2783 = pack_2778.targets.length;
                    while (it_2782 < at_2783) {
                        t_2781 = it_2782;
                        it_2782++;
                        {
                            if (pack_2778.targets[t_2781].name == target_2777) {
                                this.targetIndex = t_2781;
                                return pack_2778.targets[t_2781];
                            };
                        };
                    };
                };
                process_22.stdout.write(('Cannot find `' + (target_2777) + '` target in package file\n'));
                process_22.exit(1);
            })();
            const generator = availableGenerators(t_2780.generator);
            if (generator == null) {
                process_22.stdout.write(('Generator `' + (t_2780.generator) + '` not available or not supported by this compiler version\n'));
                process_22.exit(1);
            };
            if (pack_2778.files == null) { pack_2778.files = [] };
            if (pack_2778.noLib == true) {} else {
                setLibrary(generator, t_2780.options, pack_2778.files, Project.defines);
                {
                    let step_2784 = 0;
                    const extra = pack_2778.targets[this.targetIndex].files;
                    if (step_2784 == 0 && extra != null) { step_2784 = 1 };
                    if (step_2784 == 1) { for (const file of $toIterator(extra)) pack_2778.files.push(file) };
                };
            };
            if (pack_2778.addLicenseNoticeToOutput == null) { pack_2778.addLicenseNoticeToOutput = true };
            return pack_2778;
        };
        constructor() {
            this.lines = 0
            this.targetName = 'default'
            this.targetIndex = 0
        {
            const begin = Date.now();
            Lexer.init();
            if (process_22.argv[0].endsWith('node.exe') || process_22.argv[0].endsWith('node')) {
                process_22.argv.shift();
                process_22.argv.shift();
            } else if (process_22.argv[0].endsWith('.exe')) { process_22.argv.shift() };
            const defines_2785 = {};
            while (process_22.argv[0] == '--define') {
                if (process_22.argv.length < 2) {
                    console.log('Usage: `--define name=value`');
                    process_22.exit(1);
                };
                process_22.argv.shift();
                const kv = process_22.argv.shift().split('=');
                if (kv.length < 2) {
                    console.log('Usage: `--define name=value`');
                    process_22.exit(1);
                };
                const k_2786 = kv[0];
                const v_2787 = JSON.parse(kv[1]);
                defines_2785[k_2786] = v_2787;
            };
            Project.defines = defines_2785;
            if (process_22.argv[0] == '--syntax-linter') {
                if (process_22.argv.length < 2) { console.log('Usage: `hexa --syntax-linter file.hexa`') } else {
                    const file = process_22.argv[1];
                    try {
                        const content_2789 = Fs.readFileSync(file);
                        try {
                            const tokens_2791 = Lexer.tokenize(content_2789, file);
                            try { const parser_2793 = Parser.parseNodes(tokens_2791) } catch (temp_2792) {
                                if (true) {
                                const e = temp_2792
                                console.log(('' + (e) + '')) } else

                                throw temp_2792;
                            };
                        } catch (temp_2790) {
                            if (true) {
                            const e = temp_2790
                            console.log(('' + (e) + '')) } else

                            throw temp_2790;
                        };
                    } catch (temp_2788) {
                        if (true) {
                        const e = temp_2788
                        console.log(('ERROR: Unable to open file ' + (file) + '')) } else

                        throw temp_2788;
                    };
                };
                process_22.exit(0);
            };
            const beginTests = Date.now();
            //TestLexer.test();
            //TestParser.test();
            //TestTyper.test();
            console.log(('[Tests finished in ' + (Date.now() - beginTests) + ' ms]'));
            const ignoreArguments = (from_2794) => {
                if (from_2794 == process_22.argv.length) { return };
                const args_2795 = [];
                const count = process_22.argv.length - from_2794;
                let i_2796 = 0;
                while (i_2796 < count) args_2795.push(process_22.argv[i_2796++ + from_2794]);
                console.log('Arguments `' + args_2795.join('`, `') + '` ignored');
            };
            if (process_22.argv[0] == '--version') {
                console.log(('Hexa ' + (version) + ' on node.js ') + process_22.versions.node);
                ignoreArguments(1);
                process_22.exit(0);
            } else if (process_22.argv[0] == '--help') {
                console.log('Usage: `hexa project.json` or `hexa init`');
                ignoreArguments(3);
                process_22.exit(0);
            } else if (process_22.argv[0] == null) {
                this.repl();
                process_22.exit(0);
            } else if (process_22.argv[0] == 'init') {
                this.init();
                ignoreArguments(3);
                process_22.exit(0);
            };
            let currentFile = path.resolve(process_22.argv[0]);
            let currentParsedFile = path.parse(currentFile);
            let input_2797 = (null);
            let packageFolder = currentParsedFile.dir;
            if (currentParsedFile.ext == '.json') {
                process.argv.shift();
                if (process.argv[0] == '--target') {
                    process.argv.shift();
                    this.targetName = (() => {
                        const result_2798 = process.argv[0];
                        if (result_2798 != null) { return result_2798 };
                        return 'default';
                    })();
                };
                input_2797 = this.loadPackage(currentFile, this.targetName);
                ignoreArguments(0);
                if (this.targetName != 'default') { console.log(('[Building ' + (input_2797.name) + ' - ' + (this.targetName) + ']')) } else console.log(('[Building ' + (input_2797.name) + ']'));
            } else if ((Fs.existsSync(currentFile)) && (Fs.lstatSync(currentFile).isDirectory())) {
                ignoreArguments(3);
                input_2797 = this.loadPackage(currentFile + path.sep + 'hexa.json', this.targetName);
                packageFolder = currentFile;
            } else if (currentParsedFile.ext == '.hexa') { return } else {
                console.error(('Unknown command: ' + (process_22.argv[0]) + ''));
                console.error('Try --help');
                process_22.exit(1);
                return;
            };
            const beginParsing = Date.now();
            let files_2799 = [];
            if (input_2797.files != null) {
                const fileList = input_2797.files.map((file_2800) => {
                    if (file_2800.startsWith('/') || file_2800.charAt(1) == ':') { return path.resolve(file_2800) };
                    return path.resolve(packageFolder + path.sep + file_2800);
                });
                files_2799 = this.processFiles(fileList);
            };
            console.log(('[Parsing finished in ' + (Date.now() - beginParsing) + ' ms]'));
            const beginTyper = Date.now();
            const typer = new Typer();
            try { typer.fillFiles(files_2799) } catch (temp_2801) {
                if (true) {
                const e = temp_2801
                {
                    console.log(e.toString());
                    process_22.exit(1);
                } } else

                throw temp_2801;
            };
            console.log(('[Typer finished in ' + (Date.now() - beginTyper) + ' ms]'));
            const normalizer_2802 = new Normalizer();
            const generators = new Map();
            const registerTarget = (name_2803, generator_2804) => {
                {
                    let step_2805 = 0;
                    const generator_2806 = generators.get(name_2803);
                    if (step_2805 == 0 && generator_2806 != null) { step_2805 = 1 };
                    if (step_2805 == 1) { console.log(('Note: generator `' + (name_2803) + '` was overridden')) };
                };
                generators.set(name_2803, generator_2804);
            };
            registerTarget('js', GenJs.spawn);
            registerTarget('native', GenCxx.spawn);
            {
                let step_2807 = 0;
                const generatorName = input_2797.targets[this.targetIndex].generator;
                if (step_2807 == 0 && generatorName != null) { step_2807 = 1 };
                if (step_2807 == 1) {
                    let step_2808 = 0;
                    const generatorSpawner = generators.get(generatorName);
                    if (step_2808 == 0 && generatorSpawner != null) { step_2808 = 1 };
                    if (step_2808 == 1) {
                        const generator_2809 = generatorSpawner();
                        if (input_2797.targets[this.targetIndex].output == null) { this.incorrect('targets[' + this.targetIndex + '].output') };
                        const target_2810 = packageFolder + path.sep + path.parse(input_2797.targets[this.targetIndex].output).name + generator_2809.extension;
                        const target_2811 = path.join(packageFolder, input_2797.targets[this.targetIndex].output);
                        normalizer_2802.keywords = generator_2809.reserved;
                        normalizer_2802.collected = files_2799;
                        normalizer_2802.nativeEnums = generator_2809.nativeEnums;
                        normalizer_2802.reservedGlobals = (() => {
                            const result_2812 = generator_2809.reservedGlobals;
                            if (result_2812 != null) { return result_2812 };
                            return normalizer_2802.reservedGlobals;
                        })();
                        normalizer_2802.package = input_2797;
                        {
                            let step_2813 = 0;
                            const randomSeed = input_2797.randomSeed;
                            if (step_2813 == 0 && randomSeed != null) { step_2813 = 1 };
                            if (step_2813 == 1) { normalizer_2802.id = randomSeed };
                        };
                        {
                            let step_2814 = 0;
                            const globalAccessor = generator_2809.globalAccessor;
                            if (step_2814 == 0 && globalAccessor != null) { step_2814 = 1 };
                            if (step_2814 == 1) { normalizer_2802.globalAccessor = globalAccessor };
                        };
                        normalizer_2802.typer = typer;
                        const beginNormalizer = Date.now();
                        const normal = normalizer_2802.normalize();
                        console.log(('[Normalizer finished in ' + (Date.now() - beginNormalizer) + ' ms]'));
                        const beginGenerator = Date.now();
                        for (const hint of $toIterator(Project.hints)) {
                            console.log(hint.toString());
                        };
                        const outs = generator_2809.perform(normal);
                        console.log(('[Generator finished in ' + (Date.now() - beginGenerator) + ' ms]'));
                        Fs.writeFileSync(target_2811, outs);
                    } else {
                        console.log(('Generator for `' + (generatorName) + '` is not registered.'));
                        process_22.exit(1);
                    };
                } else {
                    console.log('Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?');
                    process_22.exit(1);
                };
            };
            const delta = Date.now() - begin;
            const lps = Math.round(this.lines / (delta / 1000));
            console.log(('[Finished in ' + (delta) + ' ms, ' + (this.lines) + ' lines, ' + (lps) + ' lines per second]'));
            process_22.stdout.once('drain', () => { process_22.exit(0) });
            process_22.stdout.write('');
        } };
    }
    Main.question = (query) => {
            process_22.stdout.write(query);
            let bufsize_2752 = 256;
            let buf = new Buffer(bufsize_2752);
            let bytesRead = 0;
            try { bytesRead = Fs.readSync(process_22.stdin.fd, buf, 0, bufsize_2752) } catch (temp_2753) {
                if (true) {
                const e = temp_2753
                {
                    const e_2754 = e;
                    if (e_2754.code == 'EAGAIN') { return 'ERROR: interactive stdin input not supported.' };
                    if (e_2754.code == 'EOF') { return '' };
                    throw e_2754;
                } } else

                throw temp_2753;
            };
            if (bytesRead == 0) { return '' };
            const answer = buf.toString('utf8', 0, bytesRead).trim();
            return answer;
        };
    var Dumper = class {
        constructor() {
            this.tabs = ''
        {
        } };
        dumpFiles(collected, types) {
            this.types = types;
            const out = [];
            for (const file of $toIterator(collected)) {
                out.push('// file\n');
                for (const e of $toIterator(file)) {
                    out.push('// file.node\n');
                    out.push(this.dump(e));
                };
            };
            return out.join('\n');
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        dump(node) { return '〈' + this.dumpWrapped(node) + '⭐⎰' + this.dumpType(this.types.get(node)) + '⎱〉' };
        dumpWrapped(node_2815) {
            const temp = node_2815;
            switch (temp&&temp[0]) {
            case 35: {
                {
                    const path_2816 = temp[1];
                    const el = temp[2];
                    return 'module ' + path_2816.join('.') + '{\n' + (() => {
                        const result = [];
                        const value = el;
                        for (const e of $toIterator(value)) result.push(this.dump(e));
                        return result;
                    })().join('\n') + '\n}';
                }
            } break;

            case 23: {
                return 'var'
            } break;

            case 9: {
                return 'TBinop'
            } break;

            case 25: {
                return '⋉'
            } break;

            case 12: {
                return 'call()'
            } break;

            case 37: {
                return 'enum'
            } break;

            case 21: {
                return 'function'
            } break;

            case 11: {
                return '{}'
            } break;

            case 13: {
                return 'if'
            } break;

            case 27: {
                return 'try'
            } break;

            case 8: {
                return 'declare'
            } break;

            case 30: {
                return 'new'
            } break;

            case null: case undefined: {
                throw 'Trying to dump null node'
            } break;

            default:
            throw 'Trying to dump unknown node: ' + node_2815
            };
        };
        dumpType(type) { return type };
    }
    var Normalizer = class {
        constructor() {
            this.project = new NiceProject()
            this.keywords = []
            this.reservedGlobals = []
            this.collected = []
            this.nativeEnums = false
            this.globalAccessor = '<!-- global -->'
            this.scopes = [new Map()]
            this.globals = []
            this.id = Math.round(Math.random() * 123.0)
            this.parentNames = new Map()
        {
        } };
        normalize() {
            for (const global of $toIterator(this.reservedGlobals)) this.addToScope(global);
            for (const file of $toIterator(this.collected)) for (const e of $toIterator(file)) {
                const temp = e;
                switch (temp&&temp[0]) {
                case 35: {
                    {
                        const path_107 = temp[1];
                        const el = temp[2];
                        for (const e of $toIterator(el)) {
                            const temp_108 = e;
                            switch (temp_108&&temp_108[0]) {
                            case 25: {
                                {
                                    const t = temp_108[1];
                                    const ext = temp_108[2];
                                    const impl = temp_108[3];
                                    const fields = temp_108[4];
                                    const external = temp_108[5];
                                    this.renameClassFields(fields);
                                }
                            } break;

                            case 37: {
                                {
                                    const t_109 = temp_108[1];
                                    const fields_110 = temp_108[2];
                                    const valuesType = temp_108[3];
                                    this.renameClassFields(fields_110);
                                }
                            } break;

                            case 23: {
                                {
                                    const name_111 = temp_108[1];
                                    const t_112 = temp_108[2];
                                    const expr = temp_108[3];
                                    const const_113 = temp_108[4];
                                    const external_114 = temp_108[5];
                                    {
                                        const atts = Project.mapAttributes.get(e);
                                        const native = this.getAtt(atts, 'native');
                                        if (native != null) {
                                            const temp_115 = native.values[0];
                                            switch (temp_115&&temp_115[0]) {
                                            case 0: {
                                                {
                                                    const s = temp_115[1];
                                                    this.uniqueNative(s, e);
                                                }
                                            } break;

                                            default:
                                            throw '@native takes string as argument'
                                            };
                                        } else this.unique(name_111, e);
                                    };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_116 = temp_108[1];
                                    const expr_117 = temp_108[2];
                                    const vars = temp_108[3];
                                    const rettype = temp_108[4];
                                    const external_118 = temp_108[5];
                                    {
                                        let step = 0;
                                        const name_119 = name_116;
                                        if (step == 0 && name_119 != null) { step = 1 };
                                        if (step == 1) { this.unique(name_119, e) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            const init = [];
            for (const file of $toIterator(this.collected)) {
                const initial = [];
                this.pushScope();
                for (const e of $toIterator(file)) {
                    const temp_120 = e;
                    switch (temp_120&&temp_120[0]) {
                    case 35: {
                        {
                            const path_121 = temp_120[1];
                            const el_122 = temp_120[2];
                            {
                                this.pushScope();
                                for (const e of $toIterator(el_122)) {
                                    const temp_123 = e;
                                    switch (temp_123&&temp_123[0]) {
                                    case 21: {
                                        {
                                            let step_124 = 0;
                                            const s_125 = this.nodeToStatement(e);
                                            if (step_124 == 0 && s_125 != null) { step_124 = 1 };
                                            if (step_124 == 1) { this.project.globalFuncs.push(s_125) };
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            let step_126 = 0;
                                            const s_127 = this.nodeToStatement(e);
                                            if (step_126 == 0 && s_127 != null) { step_126 = 1 };
                                            if (step_126 == 1) { this.project.globalVars.push(s_127) };
                                        }
                                    } break;

                                    case 24: {
                                        {
                                            const vars_128 = temp_123[1];
                                            for (const v of $toIterator(vars_128)) {
                                                let step_129 = 0;
                                                const s_130 = this.nodeToStatement(v);
                                                if (step_129 == 0 && s_130 != null) { step_129 = 1 };
                                                if (step_129 == 1) { this.project.globalVars.push(s_130) };
                                            };
                                        }
                                    } break;

                                    default:
                                    this.fillStatement(e, path_121)
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    {
                        const statement = this.fillStatement(e, null);
                        {
                            const temp_131 = statement;
                            switch (temp_131&&temp_131[0]) {
                            case null: case undefined: {
                                {
                                }
                            } break;

                            case 1: {
                                {
                                    const el_132 = temp_131[1];
                                    if (el_132.length > 0) { initial.push(statement) };
                                }
                            } break;

                            default:
                            initial.push(statement)
                            };
                        };
                    }
                    };
                };
                this.popScope();
                if (initial.length > 0) { init.push(/*Block*/[1,initial]) };
            };
            this.project.init.push(/*Block*/[1,init]);
            if (this.project.init.length > 1) { throw 'too many inits' };
            this.project.package = this.package;
            this.project.typer = this.typer;
            this.project.classes.sort((a_133, b_134) => {
                if (a_133.external == true) { return -1 };
                if (a_133.extend == null) { return 0 };
                return 1;
            });
            return this.project;
        };
        nodeToExpression(e) {
            if (e == null) { return null };
            {
                const temp_135 = e;
                switch (temp_135&&temp_135[0]) {
                case 0: {
                    {
                        const v_136 = temp_135[1];
                        return /*String*/[2,v_136];
                    }
                } break;

                case 5: {
                    {
                        const v_137 = temp_135[1];
                        return /*Int*/[3,v_137];
                    }
                } break;

                case 6: {
                    {
                        const v_138 = temp_135[1];
                        return /*Float*/[4,v_138];
                    }
                } break;

                case 2: {
                    {
                        const v_139 = temp_135[1];
                        {
                            if (v_139) { return /*True*/[5] };
                            return /*False*/[6];
                        };
                    }
                } break;

                case 7: {
                    return /*Null*/[8]
                } break;

                case 48: {
                    {
                        const t_140 = temp_135[1];
                        {
                            const temp_141 = t_140;
                            switch (temp_141&&temp_141[0]) {
                            case 1: {
                                {
                                    const name_142 = temp_141[1];
                                    return /*Ident*/[7,(() => {
                                        const result = this.parentNames.get(this.typer.parents.get(e));
                                        if (result != null) { return result };
                                        return name_142;
                                    })()];
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_143 = temp_135[1];
                        {
                            let source = this.typer.parents.get(e);
                            {
                                const temp_144 = source;
                                switch (temp_144&&temp_144[0]) {
                                case null: case undefined: {
                                    throw ('Unmapped `' + (e) + '` of name `' + (name_143) + '` ') + JSON.stringify(Project.data.get(e))
                                } break;

                                case 23: {
                                    {
                                        const name_145 = temp_144[1];
                                        {
                                            let step_146 = 0;
                                            const map = this.typer.parents.get(source);
                                            if (step_146 == 0 && map != null) { step_146 = 1 };
                                            if (step_146 == 1) {
                                                const temp_147 = map;
                                                switch (temp_147&&temp_147[0]) {
                                                case 35: {
                                                    {
                                                        const path_148 = temp_147[1];
                                                        {
                                                            const name_149 = (() => {
                                                                const result_150 = this.parentNames.get(source);
                                                                if (result_150 != null) { return result_150 };
                                                                return name_145;
                                                            })();
                                                            return /*Ident*/[7,this.globalAccessor + name_149,this.typer.types.get(source)];
                                                        };
                                                    }
                                                } break;

                                                default:
                                                return /*Dot*/[10,/*This*/[9],name_145,this.typer.types.get(e)]
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_151 = temp_144[1];
                                        {
                                            let step_152 = 0;
                                            const map_153 = this.typer.parents.get(source);
                                            if (step_152 == 0 && map_153 != null) { step_152 = 1 };
                                            if (step_152 == 1) {
                                                const temp_154 = map_153;
                                                switch (temp_154&&temp_154[0]) {
                                                case 35: {
                                                    {
                                                        const path_155 = temp_154[1];
                                                        return /*Ident*/[7,this.globalAccessor + name_151];
                                                    }
                                                } break;

                                                default:
                                                return /*Dot*/[10,/*This*/[9],name_151,this.typer.types.get(e)]
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const f_156 = temp_144[1];
                                        {
                                            const staticSource = this.typer.parents.get(source);
                                            {
                                                const temp_157 = staticSource;
                                                switch (temp_157&&temp_157[0]) {
                                                case 25: {
                                                    {
                                                        const t_158 = temp_157[1];
                                                        return /*Dot*/[10,/*Ident*/[7,DataHelper.extractTypeName(t_158)],this.getClassDotField(staticSource, name_143),this.typer.types.get(e)];
                                                    }
                                                } break;

                                                case 37: {
                                                    {
                                                        const t_159 = temp_157[1];
                                                        return /*Dot*/[10,/*Ident*/[7,DataHelper.extractTypeName(t_159)],this.getClassDotField(staticSource, name_143),this.typer.types.get(e)];
                                                    }
                                                } break;

                                                default:
                                                throw ('staticSource is ' + (staticSource) + ' for ' + (name_143) + '')
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Ident*/[7,(() => {
                                const result_160 = this.parentNames.get(source);
                                if (result_160 != null) { return result_160 };
                                return name_143;
                            })(),this.typer.types.get(e)];
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_161 = temp_135[1];
                        const name_162 = temp_135[2];
                        {
                            const parent = this.typer.parents.get(expr_161);
                            const hasNoSideEffects = (expr_163) => { return true };
                            if ((name_162 == 'length') && (false)) {
                                const temp_164 = expr_161;
                                switch (temp_164&&temp_164[0]) {
                                case 31: {
                                    {
                                        const el_165 = temp_164[1];
                                        return /*Int*/[3,el_165.length];
                                    }
                                } break;

                                case 0: {
                                    {
                                        const s_166 = temp_164[1];
                                        return /*Int*/[3,s_166.length];
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_167 = temp_164[1];
                                        {
                                            const temp_168 = parent;
                                            switch (temp_168&&temp_168[0]) {
                                            case 23: {
                                                {
                                                    const name_169 = temp_168[1];
                                                    const t_170 = temp_168[2];
                                                    const expr_171 = temp_168[3];
                                                    const const_172 = temp_168[4];
                                                    if (const_172) {
                                                        const temp_173 = expr_171;
                                                        switch (temp_173&&temp_173[0]) {
                                                        case 0: {
                                                            {
                                                                const s_174 = temp_173[1];
                                                                return /*Int*/[3,s_174.length];
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            {
                                const temp_175 = parent;
                                switch (temp_175&&temp_175[0]) {
                                case 37: {
                                    {
                                        const t_176 = temp_175[1];
                                        const fields_177 = temp_175[2];
                                        const valuesType_178 = temp_175[3];
                                        {
                                            {
                                                let step_179 = 0;
                                                const temp_180 = !this.nativeEnums;
                                                let vt = null;
                                                if (step_179 == 0 && temp_180 != false) {
                                                    vt = valuesType_178;
                                                    step_179 = 1;
                                                };
                                                let tag = null;
                                                if (step_179 == 1 && vt != null) {
                                                    tag = this.getTag(parent, name_162);
                                                    step_179 = 2;
                                                };
                                                if (step_179 == 2 && tag != null) { step_179 = 3 };
                                                if (step_179 == 3) { return tag };
                                            };
                                            return /*Dot*/[10,this.nodeToExpression(expr_161),(() => {
                                                const result_181 = this.getClassDotField(parent, name_162);
                                                if (result_181 != null) { return result_181 };
                                                return name_162;
                                            })(),this.typer.types.get(e)];
                                        };
                                    }
                                } break;

                                case 25: {
                                    return /*Dot*/[10,this.nodeToExpression(expr_161),(() => {
                                        const result_182 = this.getClassDotField(parent, name_162);
                                        if (result_182 != null) { return result_182 };
                                        return name_162;
                                    })(),this.typer.types.get(e)]
                                } break;
                                };
                            };
                            {
                                let step_183 = 0;
                                const type = this.typer.types.get(expr_161);
                                if (step_183 == 0 && type != null) { step_183 = 1 };
                                if (step_183 == 1) {
                                    const temp_184 = type;
                                    switch (temp_184&&temp_184[0]) {
                                    case 4: {
                                        {
                                            const type_185 = temp_184[1];
                                            {
                                                const renamed = type_185.fieldRenames[type_185.fieldNames.indexOf(name_162)];
                                                {
                                                    let step_186 = 0;
                                                    const rename = renamed;
                                                    if (step_186 == 0 && rename != null) { step_186 = 1 };
                                                    if (step_186 == 1) { return /*Dot*/[10,this.nodeToExpression(expr_161),rename,this.typer.types.get(e)] };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                            };
                            return /*Dot*/[10,this.nodeToExpression(expr_161),name_162,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 29: {
                    {
                        const expr_187 = temp_135[1];
                        const name_188 = temp_135[2];
                        {
                            const parent_189 = this.typer.parents.get(expr_187);
                            {
                                const temp_190 = parent_189;
                                switch (temp_190&&temp_190[0]) {
                                case 37: {
                                    {
                                        const t_191 = temp_190[1];
                                        const fields_192 = temp_190[2];
                                        const valuesType_193 = temp_190[3];
                                        {
                                            {
                                                let step_194 = 0;
                                                const temp_195 = !this.nativeEnums;
                                                let vt_196 = null;
                                                if (step_194 == 0 && temp_195 != false) {
                                                    vt_196 = valuesType_193;
                                                    step_194 = 1;
                                                };
                                                let tag_197 = null;
                                                if (step_194 == 1 && vt_196 != null) {
                                                    tag_197 = this.getTag(parent_189, name_188);
                                                    step_194 = 2;
                                                };
                                                if (step_194 == 2 && tag_197 != null) { step_194 = 3 };
                                                if (step_194 == 3) { return tag_197 };
                                            };
                                            {
                                                let step_198 = 0;
                                                const temp_199 = !this.nativeEnums;
                                                let temp_200 = null;
                                                if (step_198 == 0 && temp_199 != false) {
                                                    temp_200 = valuesType_193 == null;
                                                    step_198 = 1;
                                                };
                                                let tag_201 = null;
                                                if (step_198 == 1 && temp_200 != false) {
                                                    tag_201 = this.getTag(parent_189, name_188);
                                                    step_198 = 2;
                                                };
                                                if (step_198 == 2 && tag_201 != null) { step_198 = 3 };
                                                if (step_198 == 3) { return /*Enum*/[34,DataHelper.extractTypeName(t_191),name_188,tag_201,[]] };
                                            };
                                            return /*Dot*/[10,this.nodeToExpression(expr_187),(() => {
                                                const result_202 = this.getClassDotField(parent_189, name_188);
                                                if (result_202 != null) { return result_202 };
                                                return name_188;
                                            })()];
                                        };
                                    }
                                } break;

                                case 25: {
                                    return /*Dot*/[10,this.nodeToExpression(expr_187),(() => {
                                        const result_203 = this.getClassDotField(parent_189, name_188);
                                        if (result_203 != null) { return result_203 };
                                        return name_188;
                                    })()]
                                } break;
                                };
                            };
                            return /*Dot*/[10,this.nodeToExpression(expr_187),name_188];
                        };
                    }
                } break;

                case 12: {
                    {
                        const expr_204 = temp_135[1];
                        const args = temp_135[2];
                        const argNames = temp_135[3];
                        {
                            if (args.length == 1) {
                                const temp_205 = expr_204;
                                switch (temp_205&&temp_205[0]) {
                                case 28: {
                                    {
                                        const expr_206 = temp_205[1];
                                        const name_207 = temp_205[2];
                                        if (name_207 == 'charCodeAt') {
                                            const temp_208 = expr_206;
                                            switch (temp_208&&temp_208[0]) {
                                            case 0: {
                                                {
                                                    const s_209 = temp_208[1];
                                                    if (s_209.indexOf('\\') == -1) {
                                                        const temp_210 = args[0];
                                                        switch (temp_210&&temp_210[0]) {
                                                        case 5: {
                                                            {
                                                                const v_211 = temp_210[1];
                                                                {
                                                                    const i = parseInt(v_211);
                                                                    if ((i < s_209.length) && (i > -1)) { return /*Int*/[3,s_209.charCodeAt(i)] };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const a_212 = [];
                            for (const arg of $toIterator(args)) {
                                a_212.push(this.nodeToExpression(arg));
                            };
                            if (!this.nativeEnums) {
                                const temp_213 = expr_204;
                                switch (temp_213&&temp_213[0]) {
                                case 29: {
                                    {
                                        const expr_214 = temp_213[1];
                                        const name_215 = temp_213[2];
                                        {
                                            const parent_216 = this.typer.parents.get(expr_214);
                                            {
                                                const temp_217 = parent_216;
                                                switch (temp_217&&temp_217[0]) {
                                                case 37: {
                                                    {
                                                        const t_218 = temp_217[1];
                                                        const fields_219 = temp_217[2];
                                                        const valuesType_220 = temp_217[3];
                                                        {
                                                            let step_221 = 0;
                                                            const tag_222 = this.getTag(parent_216, name_215);
                                                            if (step_221 == 0 && tag_222 != null) { step_221 = 1 };
                                                            if (step_221 == 1) { return /*Enum*/[34,DataHelper.extractTypeName(t_218),name_215,tag_222,a_212] };
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const atts_223 = Project.mapAttributes.get(this.typer.parents.get(expr_204));
                            const infix = this.getAtt(atts_223, 'infix');
                            if (infix != null) {
                                const temp_224 = infix.values[0];
                                switch (temp_224&&temp_224[0]) {
                                case 0: {
                                    {
                                        const s_225 = temp_224[1];
                                        return /*NativeOperator*/[32,0,a_212,s_225];
                                    }
                                } break;

                                default:
                                throw '@infix takes string as argument'
                                };
                            };
                            const operator = this.getAtt(atts_223, 'operator');
                            if (operator != null) {
                                const temp_226 = operator.values[0];
                                switch (temp_226&&temp_226[0]) {
                                case 0: {
                                    {
                                        const s_227 = temp_226[1];
                                        return /*NativeOperator*/[32,1,a_212,s_227];
                                    }
                                } break;

                                default:
                                throw '@operator takes string as argument'
                                };
                            };
                            const v_228 = this.nodeToExpression(expr_204);
                            return /*Call*/[11,v_228,a_212,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 9: {
                    {
                        const a_229 = temp_135[1];
                        const op = temp_135[2];
                        const b_230 = temp_135[3];
                        {
                            const ea = this.nodeToExpression(a_229);
                            const eb = this.nodeToExpression(b_230);
                            if (op == 111) {
                                const temp_231 = ea;
                                switch (temp_231&&temp_231[0]) {
                                case 2: {
                                    {
                                        const sa = temp_231[1];
                                        {
                                            const temp_232 = eb;
                                            switch (temp_232&&temp_232[0]) {
                                            case 2: {
                                                {
                                                    const sb = temp_232[1];
                                                    return /*String*/[2,sa + sb];
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Binop*/[13,ea,op,eb,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 30: {
                    {
                        const path_233 = temp_135[1];
                        const t_234 = temp_135[2];
                        const args_235 = temp_135[3];
                        const fields_236 = temp_135[4];
                        const el_237 = temp_135[5];
                        {
                            const v_238 = /*Ident*/[7,(() => {
                                const result_239 = this.parentNames.get(this.typer.parents.get(e));
                                if (result_239 != null) { return result_239 };
                                return DataHelper.extractTypeName(t_234);
                            })()];
                            const a_240 = [];
                            for (const arg of $toIterator(args_235)) {
                                a_240.push(this.nodeToExpression(arg));
                            };
                            return /*New*/[12,v_238,a_240];
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_241 = temp_135[1];
                        const expr_242 = temp_135[2];
                        const vars_243 = temp_135[3];
                        const rettype_244 = temp_135[4];
                        {
                            const a_245 = [];
                            const defaults = [];
                            const types = [];
                            for (const arg of $toIterator(vars_243)) {
                                const temp_246 = arg;
                                switch (temp_246&&temp_246[0]) {
                                case 23: {
                                    {
                                        const name_247 = temp_246[1];
                                        const t_248 = temp_246[2];
                                        const expr_249 = temp_246[3];
                                        const const_250 = temp_246[4];
                                        {
                                            a_245.push(this.unique(name_247, arg));
                                            types.push(t_248);
                                            if (expr_249 != null) { defaults.push(this.nodeToExpression(expr_249)) } else defaults.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Function*/[14,name_241 != (null)? (this.unique(name_241, e)) : (null),this.nodeToStatement(expr_242),a_245,defaults,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 22: {
                    {
                        const expr_251 = temp_135[1];
                        const vars_252 = temp_135[2];
                        const rettype_253 = temp_135[3];
                        {
                            const a_254 = [];
                            const defaults_255 = [];
                            const types_256 = [];
                            for (const arg of $toIterator(vars_252)) {
                                const temp_257 = arg;
                                switch (temp_257&&temp_257[0]) {
                                case 23: {
                                    {
                                        const name_258 = temp_257[1];
                                        const t_259 = temp_257[2];
                                        const expr_260 = temp_257[3];
                                        const const_261 = temp_257[4];
                                        {
                                            a_254.push(this.unique(name_258, arg));
                                            types_256.push(t_259);
                                            if (expr_260 != null) { defaults_255.push(this.nodeToExpression(expr_260)) } else defaults_255.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Arrow*/[15,this.nodeToExpression(expr_251),a_254,defaults_255,types_256,rettype_253];
                        };
                    }
                } break;

                case 11: {
                    {
                        const el_262 = temp_135[1];
                        {
                            if (el_262.length == 0) { return /*Object*/[17,[],[]] };
                            if (el_262.length == 1) { return this.nodeToExpression(el_262[0]) };
                            const block = [];
                            let i_263 = 0;
                            while (i_263 < el_262.length - 1) {
                                {
                                    let step_264 = 0;
                                    const s_265 = this.nodeToStatement(el_262[i_263]);
                                    if (step_264 == 0 && s_265 != null) { step_264 = 1 };
                                    if (step_264 == 1) { block.push(s_265) };
                                };
                                i_263++;
                            };
                            block.push(/*Return*/[8,this.nodeToExpression(el_262[el_262.length - 1])]);
                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,block],[]]],[]];
                        };
                    }
                } break;

                case 36: {
                    {
                        const names = temp_135[1];
                        const el_266 = temp_135[2];
                        {
                            const els = [];
                            for (const e of $toIterator(el_266)) {
                                els.push(this.nodeToExpression(e));
                            };
                            return /*Object*/[17,names,els];
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner = temp_135[1];
                        {
                            const unwrapNestedParens = (inner_267) => {
                                const temp_268 = inner_267;
                                switch (temp_268&&temp_268[0]) {
                                case 14: {
                                    {
                                        const i_269 = temp_268[1];
                                        return unwrapNestedParens(i_269);
                                    }
                                } break;

                                default:
                                return inner_267
                                };
                            };
                            const value_270 = unwrapNestedParens(inner);
                            return /*Parenthesis*/[16,this.nodeToExpression(value_270)];
                        };
                    }
                } break;

                case 31: {
                    {
                        const el_271 = temp_135[1];
                        {
                            if (el_271.length == 1) {
                                const temp_272 = el_271[0];
                                switch (temp_272&&temp_272[0]) {
                                case 46: {
                                    {
                                        const name_273 = temp_272[1];
                                        const over = temp_272[2];
                                        const by = temp_272[3];
                                        {
                                            const block_274 = [];
                                            const result_275 = this.unique('result');
                                            block_274.push(/*Const*/[6,result_275,/*Array*/[18,[]],this.typer.types.get(e)]);
                                            const value_276 = this.unique('value');
                                            block_274.push(/*Const*/[6,value_276,this.nodeToExpression(over),this.typer.types.get(el_271[0])]);
                                            const push = /*Call*/[2,/*Dot*/[10,/*Ident*/[7,result_275,this.typer.types.get(e)],'push'],[this.nodeToExpression(by)]];
                                            const fillLoop = () => {
                                                {
                                                    const temp_277 = over;
                                                    switch (temp_277&&temp_277[0]) {
                                                    case 5: {
                                                        {
                                                            const s_278 = temp_277[1];
                                                            {
                                                                const i_279 = name_273;
                                                                block_274.push(/*Const*/[6,i_279,/*Int*/[3,-1]]);
                                                                block_274.push(/*While*/[21,/*Binop*/[13,/*Parenthesis*/[16,/*Binop*/[13,/*Ident*/[7,i_279],111,/*Int*/[3,1]]],99,/*Ident*/[7,value_276]],/*Block*/[1,[/*Increment*/[22,/*Ident*/[7,i_279]], push]],true]);
                                                                return;
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                block_274.push(/*For*/[20,name_273,/*Ident*/[7,value_276],push]);
                                            };
                                            fillLoop();
                                            block_274.push(/*Return*/[8,/*Ident*/[7,result_275]]);
                                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,block_274],[],[],/*Function*/[12,[],this.typer.types.get(e)]]],[]];
                                        };
                                    }
                                } break;
                                };
                            };
                            const els_280 = [];
                            for (const e of $toIterator(el_271)) els_280.push(this.nodeToExpression(e));
                            return /*Array*/[18,els_280];
                        };
                    }
                } break;

                case 47: {
                    {
                        const nullable = temp_135[1];
                        const otherwise = temp_135[2];
                        {
                            const result_281 = this.unique('result');
                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,[/*Const*/[6,result_281,this.nodeToExpression(nullable)], /*If*/[9,/*Binop*/[13,/*Ident*/[7,result_281],103,/*Null*/[8]],/*Return*/[8,/*Ident*/[7,result_281]],null], /*Return*/[8,this.nodeToExpression(otherwise)]]],[],[],/*Function*/[12,[],this.typer.types.get(otherwise)]]],[],this.typer.types.get(otherwise)];
                            return /*Elvis*/[21,this.nodeToExpression(nullable),this.nodeToExpression(otherwise)];
                        };
                    }
                } break;

                case 19: {
                    {
                        const op_282 = temp_135[1];
                        const postfix = temp_135[2];
                        const e_283 = temp_135[3];
                        return /*Unop*/[20,op_282,postfix,this.nodeToExpression(e_283)];
                    }
                } break;

                case 3: {
                    return /*This*/[9]
                } break;

                case 32: {
                    {
                        const keys = temp_135[1];
                        const values_284 = temp_135[2];
                        {
                            const k_285 = [];
                            const v_286 = [];
                            for (const key of $toIterator(keys)) k_285.push(this.nodeToExpression(key));
                            for (const value of $toIterator(values_284)) v_286.push(this.nodeToExpression(value));
                            return /*Map*/[19,k_285,v_286];
                        };
                    }
                } break;

                case 10: {
                    {
                        const a_287 = temp_135[1];
                        const op_288 = temp_135[2];
                        const b_289 = temp_135[3];
                        return /*Assignop*/[31,this.nodeToExpression(a_287),op_288,this.nodeToExpression(b_289)];
                    }
                } break;

                case 13: {
                    {
                        const econd = temp_135[1];
                        const eif = temp_135[2];
                        const eelse = temp_135[3];
                        {
                            let binds = false;
                            for (const cond of $toIterator(econd)) {
                                const temp_290 = cond;
                                switch (temp_290&&temp_290[0]) {
                                case 23: {
                                    binds = true
                                } break;
                                };
                            };
                            if (!binds && econd.length == 1) { return /*If*/[22,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)] };
                            if (!binds) {
                                let parens = /*Parenthesis*/[16,this.nodeToExpression(econd[0])];
                                let i_291 = 1;
                                while (i_291 < econd.length) {
                                    parens = /*Binop*/[13,parens,92,/*Parenthesis*/[16,this.nodeToExpression(econd[i_291])]];
                                    i_291++;
                                };
                                return /*If*/[22,parens,this.nodeToExpression(eif),this.nodeToExpression(eelse)];
                            };
                            return /*If*/[22,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)];
                        };
                    }
                } break;

                case 33: {
                    {
                        const expr_292 = temp_135[1];
                        const index_293 = temp_135[2];
                        return /*Index*/[23,this.nodeToExpression(expr_292),this.nodeToExpression(index_293)];
                    }
                } break;

                case 41: {
                    {
                        const e_294 = temp_135[1];
                        const kind = temp_135[2];
                        const t_295 = temp_135[3];
                        {
                            const temp_296 = kind;
                            switch (temp_296) {
                            case 81: {
                                console.log('`as?` is not yet supported by normalizer, only `as!`')
                            } break;

                            case 89: {
                                return /*UnsafeBitCast*/[24,this.nodeToExpression(e_294),this.typer.types.get(t_295)]
                            } break;

                            default:
                            console.log('`as` is not yet supported by normalizer, only `as!`')
                            };
                        };
                    }
                } break;

                case 40: {
                    {
                        const e_297 = temp_135[1];
                        const t_298 = temp_135[2];
                        return /*Is*/[30,this.nodeToExpression(e_297),this.typer.types.get(t_298)];
                    }
                } break;

                case 34: {
                    {
                        const exprs = temp_135[1];
                        const conds = temp_135[2];
                        const guards = temp_135[3];
                        const cases = temp_135[4];
                        {
                            const block_299 = [];
                            const caseRet = [];
                            for (const c of $toIterator(cases)) caseRet.push(/*TReturn*/[15,c]);
                            block_299.push(this.nodeToStatement(/*TSwitch*/[34,exprs,conds,guards,caseRet]));
                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,block_299],[]]],[]];
                        };
                    }
                } break;

                default:
                console.error('(internal warning) Unknown node type for expression:', e, Project.data.get(e))
                };
            };
            console.log('normalizer: unprocessed expression ' + e + Typer.positionOf(e));
            return null;
        };
        nodeToStatement(e_300) {
            if (e_300 == null) { return null };
            {
                const temp_301 = e_300;
                switch (temp_301&&temp_301[0]) {
                case 11: {
                    {
                        const el_302 = temp_301[1];
                        {
                            let els_303 = [];
                            for (const e of $toIterator(el_302)) {
                                const statement_304 = this.nodeToStatement(e);
                                if (statement_304 != null) { els_303.push(statement_304) };
                            };
                            if (els_303.length == 1) {
                                const temp_305 = els_303[0];
                                switch (temp_305&&temp_305[0]) {
                                case 1: {
                                    return els_303[0]
                                } break;
                                };
                            };
                            return /*Block*/[1,els_303];
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_306 = temp_301[1];
                        const fields_307 = temp_301[2];
                        const valuesType_308 = temp_301[3];
                        {
                            this.renameClassFields(fields_307);
                            const typed = this.typer.types.get(e_300);
                            const isComplexEnum = valuesType_308 == null;
                            if (isComplexEnum) {
                                const type_309 = new NiceComplexEnum();
                                type_309.name = this.unique(DataHelper.extractTypeName(t_306), e_300);
                                this.globals.push(type_309.name);
                                const names_310 = [];
                                const constructors = [];
                                const constructorsTypes = [];
                                const types_311 = [];
                                for (const f of $toIterator(fields_307)) {
                                    const temp_312 = f;
                                    switch (temp_312&&temp_312[0]) {
                                    case 48: {
                                        {
                                            const t_313 = temp_312[1];
                                            {
                                                const temp_314 = t_313;
                                                switch (temp_314&&temp_314[0]) {
                                                case 1: {
                                                    {
                                                        const name_315 = temp_314[1];
                                                        {
                                                            names_310.push(name_315);
                                                            constructors.push(null);
                                                            constructorsTypes.push(null);
                                                            types_311.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_316 = temp_312[1];
                                            const args_317 = temp_312[2];
                                            const argNames_318 = temp_312[3];
                                            {
                                                {
                                                    const temp_319 = e_316;
                                                    switch (temp_319&&temp_319[0]) {
                                                    case 48: {
                                                        {
                                                            const t_320 = temp_319[1];
                                                            {
                                                                const temp_321 = t_320;
                                                                switch (temp_321&&temp_321[0]) {
                                                                case 1: {
                                                                    {
                                                                        const name_322 = temp_321[1];
                                                                        names_310.push(name_322);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                constructors.push((() => {
                                                    const result_323 = [];
                                                    const value_324 = argNames_318;
                                                    for (const arg of $toIterator(value_324)) result_323.push(this.unique((arg)));
                                                    return result_323;
                                                })());
                                                constructorsTypes.push((() => {
                                                    const result_325 = [];
                                                    const value_326 = args_317;
                                                    for (const arg of $toIterator(value_326)) result_325.push(this.typer.toType(Typer.nodeToNodeType(arg), arg));
                                                    return result_325;
                                                })());
                                                types_311.push((() => {
                                                    const result_327 = [];
                                                    const value_328 = args_317;
                                                    for (const arg of $toIterator(value_328)) result_327.push(this.unique((arg)));
                                                    return result_327;
                                                })());
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field = temp_312[1];
                                            {
                                                const temp_329 = field;
                                                switch (temp_329&&temp_329[0]) {
                                                case 23: {
                                                    {
                                                        const name_330 = temp_329[1];
                                                        const t_331 = temp_329[2];
                                                        const expr_332 = temp_329[3];
                                                        const const_333 = temp_329[4];
                                                        {
                                                            const uname = (() => {
                                                                const result_334 = this.parentNames.get(field);
                                                                if (result_334 != null) { return result_334 };
                                                                return this.unique(name_330, field);
                                                            })();
                                                            if (const_333) { type_309.staticVars.push(/*Const*/[6,uname,this.nodeToExpression(expr_332),this.typer.types.get(field)]) } else type_309.staticVars.push(/*Var*/[5,uname,this.nodeToExpression(expr_332),this.typer.types.get(field)]);
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_335 = temp_329[1];
                                                        const expr_336 = temp_329[2];
                                                        const vars_337 = temp_329[3];
                                                        const rettype_338 = temp_329[4];
                                                        {
                                                            const uname_339 = (() => {
                                                                const result_340 = this.parentNames.get(field);
                                                                if (result_340 != null) { return result_340 };
                                                                return this.unique(name_335, field);
                                                            })();
                                                            const a_341 = [];
                                                            const defaults_342 = [];
                                                            const types_343 = [];
                                                            for (const arg of $toIterator(vars_337)) {
                                                                const temp_344 = arg;
                                                                switch (temp_344&&temp_344[0]) {
                                                                case 23: {
                                                                    {
                                                                        const name_345 = temp_344[1];
                                                                        const t_346 = temp_344[2];
                                                                        const expr_347 = temp_344[3];
                                                                        const const_348 = temp_344[4];
                                                                        {
                                                                            a_341.push(this.unique(name_345, arg));
                                                                            types_343.push(t_346);
                                                                            if (expr_347 != null) { defaults_342.push(this.nodeToExpression(expr_347)) } else defaults_342.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_309.staticMethods.push(/*Function*/[7,uname_339,this.unwrapNestingBlocks(this.nodeToStatement(expr_336)),a_341,defaults_342,this.typer.types.get(field)]);
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown complex enum static field kind:', field)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown complex enum field kind:', f)
                                    };
                                };
                                type_309.names = names_310;
                                type_309.constructors = constructors;
                                type_309.constructorsTypes = constructorsTypes;
                                type_309.types = types_311;
                                this.project.enumsComplex.push(type_309);
                                return null;
                            } else {
                                const type_349 = new NiceSimpleEnum();
                                type_349.name = DataHelper.extractTypeName(t_306);
                                const names_350 = [];
                                const values_351 = [];
                                for (const f of $toIterator(fields_307)) {
                                    const temp_352 = f;
                                    switch (temp_352&&temp_352[0]) {
                                    case 9: {
                                        {
                                            const a_353 = temp_352[1];
                                            const op_354 = temp_352[2];
                                            const b_355 = temp_352[3];
                                            {
                                                {
                                                    const temp_356 = a_353;
                                                    switch (temp_356&&temp_356[0]) {
                                                    case 48: {
                                                        {
                                                            const t_357 = temp_356[1];
                                                            {
                                                                const temp_358 = t_357;
                                                                switch (temp_358&&temp_358[0]) {
                                                                case 1: {
                                                                    {
                                                                        const name_359 = temp_358[1];
                                                                        names_350.push(name_359);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                {
                                                    const temp_360 = b_355;
                                                    switch (temp_360&&temp_360[0]) {
                                                    case 0: {
                                                        {
                                                            const s_361 = temp_360[1];
                                                            values_351.push(/*String*/[2,s_361]);
                                                        }
                                                    } break;

                                                    case 5: {
                                                        {
                                                            const s_362 = temp_360[1];
                                                            values_351.push(/*Int*/[3,s_362]);
                                                        }
                                                    } break;

                                                    default:
                                                    console.error('(internal warning) Unknown node field value kind:', b_355)
                                                    };
                                                };
                                            };
                                        }
                                    } break;

                                    case 48: {
                                        {
                                            const t_363 = temp_352[1];
                                            {
                                                const temp_364 = t_363;
                                                switch (temp_364&&temp_364[0]) {
                                                case 1: {
                                                    {
                                                        const name_365 = temp_364[1];
                                                        {
                                                            names_350.push(name_365);
                                                            if (typed.fieldsTypeSimple == this.typer.typeString) { values_351.push(/*String*/[2,name_365]) };
                                                            if (typed.fieldsTypeSimple == this.typer.typeInt) { values_351.push(/*Int*/[3,values_351.length]) };
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field_366 = temp_352[1];
                                            {
                                                const temp_367 = field_366;
                                                switch (temp_367&&temp_367[0]) {
                                                case 23: {
                                                    {
                                                        const name_368 = temp_367[1];
                                                        const t_369 = temp_367[2];
                                                        const expr_370 = temp_367[3];
                                                        const const_371 = temp_367[4];
                                                        {
                                                            const uname_372 = (() => {
                                                                const result_373 = this.parentNames.get(field_366);
                                                                if (result_373 != null) { return result_373 };
                                                                return this.unique(name_368, field_366);
                                                            })();
                                                            if (const_371) { type_349.staticVars.push(/*Const*/[6,uname_372,this.nodeToExpression(expr_370),this.typer.types.get(field_366)]) } else type_349.staticVars.push(/*Var*/[5,uname_372,this.nodeToExpression(expr_370),this.typer.types.get(field_366)]);
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_374 = temp_367[1];
                                                        const expr_375 = temp_367[2];
                                                        const vars_376 = temp_367[3];
                                                        const rettype_377 = temp_367[4];
                                                        {
                                                            const uname_378 = (() => {
                                                                const result_379 = this.parentNames.get(field_366);
                                                                if (result_379 != null) { return result_379 };
                                                                return this.unique(name_374, field_366);
                                                            })();
                                                            const a_380 = [];
                                                            const defaults_381 = [];
                                                            const types_382 = [];
                                                            for (const arg of $toIterator(vars_376)) {
                                                                const temp_383 = arg;
                                                                switch (temp_383&&temp_383[0]) {
                                                                case 23: {
                                                                    {
                                                                        const name_384 = temp_383[1];
                                                                        const t_385 = temp_383[2];
                                                                        const expr_386 = temp_383[3];
                                                                        const const_387 = temp_383[4];
                                                                        {
                                                                            a_380.push(this.unique(name_384, arg));
                                                                            types_382.push(t_385);
                                                                            if (expr_386 != null) { defaults_381.push(this.nodeToExpression(expr_386)) } else defaults_381.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_349.staticMethods.push(/*Function*/[7,uname_378,this.unwrapNestingBlocks(this.nodeToStatement(expr_375)),a_380,defaults_381,this.typer.types.get(field_366)]);
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown simple enum static field kind:', field_366)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown simple enum field kind:', f)
                                    };
                                };
                                type_349.names = names_350;
                                type_349.values = values_351;
                                this.project.enumsSimple.push(type_349);
                                return null;
                            };
                        };
                    }
                } break;

                case 25: {
                    {
                        const t_388 = temp_301[1];
                        const ext_389 = temp_301[2];
                        const impl_390 = temp_301[3];
                        const fields_391 = temp_301[4];
                        const external_392 = temp_301[5];
                        {
                            this.renameClassFields(fields_391);
                            const type_393 = new NiceClass();
                            {
                                const temp_394 = this.typer.types.get(e_300);
                                switch (temp_394&&temp_394[0]) {
                                case 3: {
                                    {
                                        const the = temp_394[1];
                                        type_393.useless = the.useless;
                                    }
                                } break;
                                };
                            };
                            type_393.external = external_392;
                            type_393.extend = DataHelper.extractTypeName(ext_389);
                            for (const implement of $toIterator(impl_390)) {
                                const temp_395 = implement;
                                switch (temp_395&&temp_395[0]) {
                                case 1: {
                                    {
                                        const name_396 = temp_395[1];
                                        type_393.implement = name_396;
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_397 = temp_395[1];
                                        const params = temp_395[2];
                                        {
                                            type_393.implement = name_397;
                                            type_393.implementParams = (() => {
                                                const result_398 = [];
                                                const value_399 = params;
                                                for (const param of $toIterator(value_399)) result_398.push(DataHelper.extractTypeName(param));
                                                return result_398;
                                            })();
                                        };
                                    }
                                } break;
                                };
                            };
                            {
                                const temp_400 = t_388;
                                switch (temp_400&&temp_400[0]) {
                                case 1: {
                                    {
                                        const name_401 = temp_400[1];
                                        {
                                        };
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_402 = temp_400[1];
                                        const params_403 = temp_400[2];
                                        type_393.genericParams = (() => {
                                            const result_404 = [];
                                            const value_405 = params_403;
                                            for (const param of $toIterator(value_405)) result_404.push(DataHelper.extractTypeName(param));
                                            return result_404;
                                        })();
                                    }
                                } break;
                                };
                            };
                            const atts_406 = Project.mapAttributes.get(e_300);
                            const require_407 = this.getAtt(atts_406, 'require');
                            if (require_407 != null) {
                                const temp_408 = require_407.values[0];
                                switch (temp_408&&temp_408[0]) {
                                case 0: {
                                    {
                                        const s_409 = temp_408[1];
                                        type_393.jsRequire = s_409;
                                    }
                                } break;

                                default:
                                throw '@require takes string as argument'
                                };
                            };
                            const native_410 = this.getAtt(atts_406, 'native');
                            if (native_410 != null) {
                                const temp_411 = native_410.values[0];
                                switch (temp_411&&temp_411[0]) {
                                case 0: {
                                    {
                                        const s_412 = temp_411[1];
                                        {
                                            type_393.jsNative = s_412;
                                            type_393.name = this.unique(s_412, e_300);
                                        };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else type_393.name = this.unique(DataHelper.extractTypeName(t_388), e_300);
                            this.globals.push(type_393.name);
                            for (const f of $toIterator(fields_391)) {
                                const temp_413 = f;
                                switch (temp_413&&temp_413[0]) {
                                case 23: {
                                    {
                                        const name_414 = temp_413[1];
                                        const t_415 = temp_413[2];
                                        const expr_416 = temp_413[3];
                                        const const_417 = temp_413[4];
                                        {
                                            const uname_418 = (() => {
                                                const result_419 = this.parentNames.get(f);
                                                if (result_419 != null) { return result_419 };
                                                return this.unique(name_414, f);
                                            })();
                                            if (const_417) { type_393.vars.push(/*Const*/[6,uname_418,this.nodeToExpression(expr_416),this.typer.types.get(f)]) } else type_393.vars.push(/*Var*/[5,uname_418,this.nodeToExpression(expr_416),this.typer.types.get(f)]);
                                        };
                                    }
                                } break;

                                case 26: {
                                    {
                                        const field_420 = temp_413[1];
                                        {
                                            const temp_421 = field_420;
                                            switch (temp_421&&temp_421[0]) {
                                            case 23: {
                                                {
                                                    const name_422 = temp_421[1];
                                                    const t_423 = temp_421[2];
                                                    const expr_424 = temp_421[3];
                                                    const const_425 = temp_421[4];
                                                    {
                                                        const uname_426 = (() => {
                                                            const result_427 = this.parentNames.get(f);
                                                            if (result_427 != null) { return result_427 };
                                                            return this.unique(name_422, f);
                                                        })();
                                                        if (const_425) { type_393.vars.push(/*Const*/[6,uname_426,this.nodeToExpression(expr_424),this.typer.types.get(field_420)]) } else type_393.vars.push(/*Var*/[5,uname_426,this.nodeToExpression(expr_424),this.typer.types.get(field_420)]);
                                                        type_393.property.push(uname_426);
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_428 = temp_413[1];
                                        const expr_429 = temp_413[2];
                                        const vars_430 = temp_413[3];
                                        const rettype_431 = temp_413[4];
                                        {
                                            const uname_432 = ((name_428 == 'new'))? ('new') : ((() => {
                                                const result_433 = this.parentNames.get(f);
                                                if (result_433 != null) { return result_433 };
                                                return this.unique(name_428, f);
                                            })());
                                            const a_434 = [];
                                            const defaults_435 = [];
                                            const types_436 = [];
                                            for (const arg of $toIterator(vars_430)) {
                                                const temp_437 = arg;
                                                switch (temp_437&&temp_437[0]) {
                                                case 23: {
                                                    {
                                                        const name_438 = temp_437[1];
                                                        const t_439 = temp_437[2];
                                                        const expr_440 = temp_437[3];
                                                        const const_441 = temp_437[4];
                                                        {
                                                            a_434.push(this.unique(name_438, arg));
                                                            types_436.push(t_439);
                                                            if (expr_440 != null) { defaults_435.push(this.nodeToExpression(expr_440)) } else defaults_435.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                            type_393.methods.push(/*Function*/[7,uname_432,this.unwrapNestingBlocks(this.nodeToStatement(expr_429)),a_434,defaults_435,this.typer.types.get(f)]);
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const field_442 = temp_413[1];
                                        {
                                            const temp_443 = field_442;
                                            switch (temp_443&&temp_443[0]) {
                                            case 23: {
                                                {
                                                    const name_444 = temp_443[1];
                                                    const t_445 = temp_443[2];
                                                    const expr_446 = temp_443[3];
                                                    const const_447 = temp_443[4];
                                                    {
                                                        const uname_448 = (() => {
                                                            const result_449 = this.parentNames.get(field_442);
                                                            if (result_449 != null) { return result_449 };
                                                            return this.unique(name_444, field_442);
                                                        })();
                                                        if (const_447) { type_393.staticVars.push(/*Const*/[6,uname_448,this.nodeToExpression(expr_446),this.typer.types.get(field_442)]) } else type_393.staticVars.push(/*Var*/[5,uname_448,this.nodeToExpression(expr_446),this.typer.types.get(field_442)]);
                                                    };
                                                }
                                            } break;

                                            case 21: {
                                                {
                                                    const name_450 = temp_443[1];
                                                    const expr_451 = temp_443[2];
                                                    const vars_452 = temp_443[3];
                                                    const rettype_453 = temp_443[4];
                                                    {
                                                        const uname_454 = (() => {
                                                            const result_455 = this.parentNames.get(field_442);
                                                            if (result_455 != null) { return result_455 };
                                                            return this.unique(name_450, field_442);
                                                        })();
                                                        const a_456 = [];
                                                        const defaults_457 = [];
                                                        const types_458 = [];
                                                        for (const arg of $toIterator(vars_452)) {
                                                            const temp_459 = arg;
                                                            switch (temp_459&&temp_459[0]) {
                                                            case 23: {
                                                                {
                                                                    const name_460 = temp_459[1];
                                                                    const t_461 = temp_459[2];
                                                                    const expr_462 = temp_459[3];
                                                                    const const_463 = temp_459[4];
                                                                    {
                                                                        a_456.push(this.unique(name_460, arg));
                                                                        types_458.push(t_461);
                                                                        if (expr_462 != null) { defaults_457.push(this.nodeToExpression(expr_462)) } else defaults_457.push(null);
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        };
                                                        type_393.staticMethods.push(/*Function*/[7,uname_454,this.unwrapNestingBlocks(this.nodeToStatement(expr_451)),a_456,defaults_457,this.typer.types.get(field_442)]);
                                                    };
                                                }
                                            } break;

                                            default:
                                            console.error('(internal warning) Unknown class static field kind:', field_442)
                                            };
                                        };
                                    }
                                } break;

                                default:
                                console.error('(internal warning) Unknown class field kind:', f)
                                };
                            };
                            this.project.classes.push(type_393);
                            return null;
                        };
                    }
                } break;

                case 8: {
                    {
                    }
                } break;

                case 30: {
                    {
                        const path_464 = temp_301[1];
                        const t_465 = temp_301[2];
                        const args_466 = temp_301[3];
                        const fields_467 = temp_301[4];
                        const values_468 = temp_301[5];
                        {
                            const v_469 = /*Ident*/[7,(() => {
                                const result_470 = this.parentNames.get(this.typer.parents.get(e_300));
                                if (result_470 != null) { return result_470 };
                                return DataHelper.extractTypeName(t_465);
                            })()];
                            const a_471 = [];
                            for (const arg of $toIterator(args_466)) {
                                a_471.push(this.nodeToExpression(arg));
                            };
                            const result_472 = /*New*/[3,v_469,a_471];
                            if (fields_467.length > 0) {
                                const temp_473 = this.unique('temp');
                                const block_474 = [/*Const*/[6,temp_473,/*New*/[12,v_469,a_471]]];
                                {
                                    let field_475 = 0;
                                    let it = 0;
                                    let at = fields_467.length;
                                    while (it < at) {
                                        field_475 = it;
                                        it++;
                                        block_474.push(/*Assign*/[14,/*Dot*/[10,/*Ident*/[7,temp_473],fields_467[field_475]],this.nodeToExpression(values_468[field_475])]);
                                    };
                                };
                                return /*Block*/[1,block_474];
                            };
                            return result_472;
                        };
                    }
                } break;

                case 12: {
                    {
                        const e_476 = temp_301[1];
                        const args_477 = temp_301[2];
                        const argNames_478 = temp_301[3];
                        {
                            {
                                const temp_479 = e_476;
                                switch (temp_479&&temp_479[0]) {
                                case 4: {
                                    {
                                        const a_480 = [];
                                        for (const arg of $toIterator(args_477)) {
                                            a_480.push(this.nodeToExpression(arg));
                                        };
                                        return /*SuperConstructor*/[27,a_480];
                                    }
                                } break;
                                };
                            };
                            const v_481 = this.nodeToExpression(e_476);
                            const a_482 = [];
                            for (const arg of $toIterator(args_477)) {
                                a_482.push(this.nodeToExpression(arg));
                            };
                            let expects = [];
                            {
                                const temp_483 = this.typer.types.get(e_476);
                                switch (temp_483&&temp_483[0]) {
                                case 12: {
                                    {
                                        const args_484 = temp_483[1];
                                        expects = args_484;
                                    }
                                } break;
                                };
                            };
                            return /*Call*/[2,v_481,a_482,expects];
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_485 = temp_301[1];
                        const t_486 = temp_301[2];
                        const expr_487 = temp_301[3];
                        const const_488 = temp_301[4];
                        const external_489 = temp_301[5];
                        {
                            const uname_490 = (() => {
                                const result_491 = this.parentNames.get(e_300);
                                if (result_491 != null) { return result_491 };
                                return this.unique(name_485, e_300);
                            })();
                            if (external_489) { return null };
                            if (const_488) { return /*Const*/[6,uname_490,this.nodeToExpression(expr_487),this.typer.types.get(e_300)] };
                            return /*Var*/[5,uname_490,this.nodeToExpression(expr_487),this.typer.types.get(e_300)];
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_492 = temp_301[1];
                        const expr_493 = temp_301[2];
                        const vars_494 = temp_301[3];
                        const rettype_495 = temp_301[4];
                        const external_496 = temp_301[5];
                        {
                            const uname_497 = ((name_492 != null))? (((() => {
                                const result_498 = this.parentNames.get(e_300);
                                if (result_498 != null) { return result_498 };
                                return this.unique(name_492, e_300);
                            })())) : (null);
                            if (external_496) { return null };
                            let rettype_499 = rettype_495;
                            const a_500 = [];
                            const defaults_501 = [];
                            let types_502 = [];
                            for (const arg of $toIterator(vars_494)) {
                                const temp_503 = arg;
                                switch (temp_503&&temp_503[0]) {
                                case 23: {
                                    {
                                        const name_504 = temp_503[1];
                                        const t_505 = temp_503[2];
                                        const expr_506 = temp_503[3];
                                        const const_507 = temp_503[4];
                                        {
                                            a_500.push(this.unique(name_504, arg));
                                            types_502.push(t_505);
                                            if (expr_506 != null) { defaults_501.push(this.nodeToExpression(expr_506)) } else defaults_501.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            if (name_492 == 'new') { return /*Function*/[7,null,this.unwrapNestingBlocks(this.nodeToStatement(expr_493)),a_500,defaults_501,this.typer.types.get(e_300)] };
                            return /*Function*/[7,uname_497,this.unwrapNestingBlocks(this.nodeToStatement(expr_493)),a_500,defaults_501,this.typer.types.get(e_300)];
                        };
                    }
                } break;

                case 46: {
                    {
                        const name_508 = temp_301[1];
                        const over_509 = temp_301[2];
                        const by_510 = temp_301[3];
                        const range = temp_301[4];
                        {
                            const data_511 = Project.data.get(over_509);
                            const ov = (Node.stringify)? (Node.stringify(over_509)) : ('' + over_509);
                            const type_512 = (() => {
                                const result_513 = this.typer.types.get(over_509);
                                if (result_513 != null) { return result_513 };
                                return this.typer.types.get(this.typer.parents.get(over_509));
                            })();
                            if (type_512 == null) { console.log(data_511.fileName, data_511.line, ('for ' + (name_508) + ' over `' + (ov) + '` no type')) } else {
                                const nameOf = (type_512[1].parent)? (DataHelper.nameOf(type_512[1].parent)) : '<undefined>';
                                if (this.typer.types.get(e_300) == null) { console.log(data_511.fileName, data_511.line, ('++++++++++++++++++++++++++++for ' + (name_508) + ' over `' + (ov) + '` type ='), Type.stringify(type_512), ' iterator type =', this.typer.types.get(e_300), nameOf) };
                            };
                            if (range == null) {
                                const temp_514 = over_509;
                                switch (temp_514&&temp_514[0]) {
                                case 5: {
                                    {
                                        const s_515 = temp_514[1];
                                        {
                                            const i_516 = this.unique(name_508, e_300);
                                            const it_517 = this.unique('it');
                                            return /*Block*/[1,[/*Var*/[5,i_516,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_517,/*Int*/[3,0],this.typer.typeInt], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_517],99,/*Int*/[3,s_515]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_516],/*Ident*/[7,it_517]], /*Increment*/[22,/*Ident*/[7,it_517]], this.nodeToStatement(by_510)]],true]]];
                                        };
                                    }
                                } break;

                                default:
                                {
                                    let iteratorOverInt = false;
                                    {
                                        const temp_518 = this.typer.types.get(over_509);
                                        switch (temp_518&&temp_518[0]) {
                                        case 4: {
                                            {
                                                const type_519 = temp_518[1];
                                                const generic = temp_518[2];
                                                if ((generic == null || generic.length == 0) && (type_519.name == 'Int')) { iteratorOverInt = true };
                                            }
                                        } break;
                                        };
                                    };
                                    if (iteratorOverInt) {
                                        const i_520 = this.unique(name_508, e_300);
                                        const it_521 = this.unique('it');
                                        const finish = this.unique('at');
                                        return /*Block*/[1,[/*Var*/[5,i_520,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_521,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,finish,this.nodeToExpression(over_509),this.typer.types.get(over_509)], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_521],99,/*Ident*/[7,finish]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_520],/*Ident*/[7,it_521]], /*Increment*/[22,/*Ident*/[7,it_521]], this.nodeToStatement(by_510)]],true]]];
                                    };
                                }
                                };
                            };
                            {
                                let step_522 = 0;
                                const range_523 = range;
                                if (step_522 == 0 && range_523 != null) { step_522 = 1 };
                                if (step_522 == 1) {
                                    const i_524 = this.unique(name_508, e_300);
                                    const it_525 = this.unique('it');
                                    const finish_526 = this.unique('at');
                                    return /*Block*/[1,[/*Var*/[5,i_524,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_525,this.nodeToExpression(over_509),this.typer.typeInt], /*Var*/[5,finish_526,this.nodeToExpression(range_523),this.typer.typeInt], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_525],99,/*Ident*/[7,finish_526]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_524],/*Ident*/[7,it_525]], /*Increment*/[22,/*Ident*/[7,it_525]], this.nodeToStatement(by_510)]],true]]];
                                };
                            };
                            return /*For*/[20,name_508,this.nodeToExpression(over_509),this.nodeToStatement(by_510)];
                        };
                    }
                } break;

                case 15: {
                    {
                        const e_527 = temp_301[1];
                        {
                            if (e_527 == null) { return /*Return*/[8,null] };
                            return /*Return*/[8,this.nodeToExpression(e_527)];
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_528 = temp_301[1];
                        const name_529 = temp_301[2];
                        return /*Dot*/[16,this.nodeToExpression(expr_528),name_529];
                    }
                } break;

                case 29: {
                    {
                        const expr_530 = temp_301[1];
                        const name_531 = temp_301[2];
                        return /*Dot*/[16,this.nodeToExpression(expr_530),name_531];
                    }
                } break;

                case 13: {
                    {
                        const econd_532 = temp_301[1];
                        const eif_533 = temp_301[2];
                        const eelse_534 = temp_301[3];
                        {
                            let binds_535 = false;
                            for (const cond of $toIterator(econd_532)) {
                                const temp_536 = cond;
                                switch (temp_536&&temp_536[0]) {
                                case 23: {
                                    binds_535 = true
                                } break;
                                };
                            };
                            if (!binds_535 && econd_532.length == 1) { return /*If*/[9,this.nodeToExpression(econd_532[0]),this.nodeToStatement(eif_533),this.nodeToStatement(eelse_534)] };
                            if (!binds_535) {
                                let parens_537 = /*Parenthesis*/[16,this.nodeToExpression(econd_532[0])];
                                let i_538 = 1;
                                while (i_538 < econd_532.length) {
                                    parens_537 = /*Binop*/[13,parens_537,92,/*Parenthesis*/[16,this.nodeToExpression(econd_532[i_538])]];
                                    i_538++;
                                };
                                return /*If*/[9,parens_537,this.nodeToStatement(eif_533),this.nodeToStatement(eelse_534)];
                            };
                            const block_539 = [];
                            let current = 0;
                            const step_540 = this.unique('step');
                            block_539.push(/*Var*/[5,step_540,/*Int*/[3,0],this.typer.typeInt]);
                            let nullable_541 = false;
                            let last = '';
                            {
                                const temp_542 = econd_532[0];
                                switch (temp_542&&temp_542[0]) {
                                case 23: {
                                    {
                                        const name_543 = temp_542[1];
                                        const t_544 = temp_542[2];
                                        const expr_545 = temp_542[3];
                                        const const_546 = temp_542[4];
                                        {
                                            last = this.unique(name_543, econd_532[0]);
                                            nullable_541 = true;
                                            block_539.push(/*Const*/[6,last,this.nodeToExpression(expr_545),this.typer.types.get(econd_532[0])]);
                                        };
                                    }
                                } break;

                                default:
                                {
                                    last = this.unique('temp');
                                    block_539.push(/*Const*/[6,last,this.nodeToExpression(econd_532[0])]);
                                }
                                };
                            };
                            while (current < econd_532.length - 1) {
                                const temp_547 = econd_532[current + 1];
                                switch (temp_547&&temp_547[0]) {
                                case 23: {
                                    {
                                        const vname = temp_547[1];
                                        const t_548 = temp_547[2];
                                        const expr_549 = temp_547[3];
                                        const const_550 = temp_547[4];
                                        {
                                            const name_551 = this.unique(vname, econd_532[current + 1]);
                                            block_539.push(/*Var*/[5,name_551,/*Null*/[8]]);
                                            block_539.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_540],95,/*Int*/[3,current + 0]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_541)? (/*Null*/[8]) : /*False*/[6]]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,name_551],this.nodeToExpression(expr_549)], /*Assign*/[14,/*Ident*/[7,step_540],/*Int*/[3,current + 1]], null]],null]);
                                            current++;
                                            last = name_551;
                                            nullable_541 = true;
                                        };
                                    }
                                } break;

                                default:
                                {
                                    const next = this.unique('temp');
                                    block_539.push(/*Var*/[5,next,/*Null*/[8]]);
                                    block_539.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_540],95,/*Int*/[3,current + 0]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_541)? (/*Null*/[8]) : /*False*/[6]]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,next],this.nodeToExpression(econd_532[current + 1])], /*Assign*/[14,/*Ident*/[7,step_540],/*Int*/[3,current + 1]], null]],null]);
                                    current++;
                                    last = next;
                                    nullable_541 = false;
                                }
                                };
                            };
                            block_539.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_540],95,/*Int*/[3,econd_532.length - 1]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_541)? (/*Null*/[8]) : /*False*/[6]]],/*Assign*/[14,/*Ident*/[7,step_540],/*Int*/[3,econd_532.length]],null]);
                            block_539.push(/*If*/[9,/*Binop*/[13,/*Ident*/[7,step_540],95,/*Int*/[3,econd_532.length]],this.nodeToStatement(eif_533),this.nodeToStatement(eelse_534)]);
                            return /*Block*/[1,block_539];
                        };
                    }
                } break;

                case 27: {
                    {
                        const expr_552 = temp_301[1];
                        const t_553 = temp_301[2];
                        const v_554 = temp_301[3];
                        const catches = temp_301[4];
                        {
                            let temp_555 = this.unique('temp');
                            let tt = [];
                            let vv = [];
                            for (const c of $toIterator(v_554)) vv.push(DataHelper.nameOf(c));
                            let cc = [];
                            for (const c of $toIterator(catches)) cc.push(this.nodeToStatement(c));
                            for (const c of $toIterator(t_553)) tt.push(this.typer.types.get(c));
                            return /*Try*/[12,this.nodeToStatement(expr_552),tt,vv,cc,temp_555];
                        };
                    }
                } break;

                case 16: {
                    {
                        const value_556 = temp_301[1];
                        return /*Throw*/[13,this.nodeToExpression(value_556)];
                    }
                } break;

                case 10: {
                    {
                        const a_557 = temp_301[1];
                        const op_558 = temp_301[2];
                        const b_559 = temp_301[3];
                        return /*Assignop*/[15,this.nodeToExpression(a_557),op_558,this.nodeToExpression(b_559)];
                    }
                } break;

                case 9: {
                    {
                        const a_560 = temp_301[1];
                        const op_561 = temp_301[2];
                        const b_562 = temp_301[3];
                        {
                            const temp_563 = op_561;
                            switch (temp_563) {
                            case 91: {
                                return /*Assign*/[14,this.nodeToExpression(a_560),this.nodeToExpression(b_562)]
                            } break;

                            default:
                            {
                                const sa_564 = this.nodeToStatement(a_560);
                                const sb_565 = this.nodeToStatement(b_562);
                                if ((sa_564 == null) && (sb_565 == null)) { return null };
                                if ((sa_564 == null) || (sb_565 == null)) { return (() => {
                                    const result_566 = sa_564;
                                    if (result_566 != null) { return result_566 };
                                    return sb_565;
                                })() };
                                return /*Statements*/[0,[sa_564, sb_565]];
                            }
                            };
                        };
                    }
                } break;

                case 18: {
                    return /*Continue*/[25]
                } break;

                case 17: {
                    return /*Break*/[26]
                } break;

                case 20: {
                    {
                        const econd_567 = temp_301[1];
                        const e_568 = temp_301[2];
                        const pre = temp_301[3];
                        return /*While*/[21,this.nodeToExpression(econd_567),this.nodeToStatement(e_568),pre];
                    }
                } break;

                case 19: {
                    {
                        const op_569 = temp_301[1];
                        const postfix_570 = temp_301[2];
                        const e_571 = temp_301[3];
                        {
                            const temp_572 = op_569;
                            switch (temp_572) {
                            case 87: {
                                return /*Increment*/[22,this.nodeToExpression(e_571)]
                            } break;

                            case 86: {
                                return /*Decrement*/[23,this.nodeToExpression(e_571)]
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner_573 = temp_301[1];
                        {
                            const unwrapNestedParens_574 = (inner_575) => {
                                const temp_576 = inner_575;
                                switch (temp_576&&temp_576[0]) {
                                case 14: {
                                    {
                                        const i_577 = temp_576[1];
                                        return unwrapNestedParens_574(i_577);
                                    }
                                } break;

                                default:
                                return inner_575
                                };
                            };
                            return this.nodeToStatement(unwrapNestedParens_574(inner_573));
                        };
                    }
                } break;

                case 34: {
                    {
                        const exprs_578 = temp_301[1];
                        const conds_579 = temp_301[2];
                        const guards_580 = temp_301[3];
                        const cases_581 = temp_301[4];
                        {
                            if (exprs_578.length > 1) { console.error('Multiple switch values not yet supported:', e_300, Project.data.get(e_300)) };
                            const s_582 = [];
                            const c = [];
                            if (this.nativeEnums) {
                                const index_583 = this.nodeToExpression(exprs_578[0]);
                                {
                                    let i_584 = 0;
                                    let it_585 = 0;
                                    let at_586 = cases_581.length;
                                    while (it_585 < at_586) {
                                        i_584 = it_585;
                                        it_585++;
                                        {
                                            const toCase = (co) => {
                                                const temp_587 = co;
                                                switch (temp_587&&temp_587[0]) {
                                                case 7: {
                                                    return /*Null*/[8]
                                                } break;

                                                case 42: {
                                                    return /*Underscore*/[36]
                                                } break;

                                                case 0: {
                                                    {
                                                        const v_588 = temp_587[1];
                                                        return /*String*/[2,v_588];
                                                    }
                                                } break;

                                                case 5: {
                                                    {
                                                        const v_589 = temp_587[1];
                                                        return /*Int*/[3,v_589];
                                                    }
                                                } break;

                                                case 6: {
                                                    {
                                                        const v_590 = temp_587[1];
                                                        return /*Float*/[4,v_590];
                                                    }
                                                } break;

                                                case 2: {
                                                    {
                                                        const v_591 = temp_587[1];
                                                        {
                                                            if (v_591) { return /*True*/[5] };
                                                            return /*False*/[6];
                                                        };
                                                    }
                                                } break;

                                                case 28: {
                                                    {
                                                        const expr_592 = temp_587[1];
                                                        const name_593 = temp_587[2];
                                                        return /*Dot*/[10,this.nodeToExpression(expr_592),name_593];
                                                    }
                                                } break;

                                                case 29: {
                                                    {
                                                        const expr_594 = temp_587[1];
                                                        const name_595 = temp_587[2];
                                                        return /*Dot*/[10,this.nodeToExpression(expr_594),name_595];
                                                    }
                                                } break;

                                                case 9: {
                                                    {
                                                        const a_596 = temp_587[1];
                                                        const op_597 = temp_587[2];
                                                        const b_598 = temp_587[3];
                                                        {
                                                            const temp_599 = op_597;
                                                            switch (temp_599) {
                                                            case 104: {
                                                                return /*Binop*/[13,toCase(a_596),104,toCase(b_598)]
                                                            } break;

                                                            default:
                                                            console.error('(internal warning) Unknown native case binop kind:', e_300, this.typer.parents.get(e_300))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                case 12: {
                                                    {
                                                        const e_600 = temp_587[1];
                                                        const args_601 = temp_587[2];
                                                        const argNames_602 = temp_587[3];
                                                        {
                                                            const temp_603 = e_600;
                                                            switch (temp_603&&temp_603[0]) {
                                                            case 29: {
                                                                {
                                                                    const expr_604 = temp_603[1];
                                                                    const name_605 = temp_603[2];
                                                                    {
                                                                        const a_606 = [];
                                                                        {
                                                                            let arg = 0;
                                                                            let it_607 = 0;
                                                                            let at_608 = args_601.length;
                                                                            while (it_607 < at_608) {
                                                                                arg = it_607;
                                                                                it_607++;
                                                                                {
                                                                                    const temp_609 = args_601[arg];
                                                                                    switch (temp_609&&temp_609[0]) {
                                                                                    case 1: {
                                                                                        {
                                                                                            const name_610 = temp_609[1];
                                                                                            a_606.push(/*Ident*/[7,this.unique(name_610, args_601[arg])]);
                                                                                        }
                                                                                    } break;

                                                                                    case 42: {
                                                                                        a_606.push(/*Underscore*/[36])
                                                                                    } break;

                                                                                    default:
                                                                                    console.log('(internal warning) Unknown native case extract value kind:', args_601[arg])
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        return /*Call*/[11,this.nodeToExpression(e_600),a_606];
                                                                    };
                                                                }
                                                            } break;

                                                            default:
                                                            console.error('(internal warning) Unknown case extract kind:', e_600, this.typer.parents.get(e_600))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown native enum case kind:', co, Project.data.get(co))
                                                };
                                            };
                                            c.push([toCase(conds_579[i_584])]);
                                            s_582.push(this.nodeToStatement(cases_581[i_584]));
                                        };
                                    };
                                };
                                return /*Switch*/[24,index_583,c,s_582];
                            };
                            const temp_611 = this.unique('temp');
                            const value_612 = this.nodeToExpression(exprs_578[0]);
                            let index_613 = /*Ident*/[7,temp_611];
                            let promoted = false;
                            {
                                const temp_614 = this.typer.types.get(exprs_578[0]);
                                switch (temp_614&&temp_614[0]) {
                                case 6: {
                                    {
                                        const type_615 = temp_614[1];
                                        if (type_615.fieldsTypeSimple == null) {
                                            index_613 = /*EnumTag*/[33,index_613];
                                            promoted = true;
                                        };
                                    }
                                } break;

                                case 7: {
                                    {
                                        const type_616 = temp_614[1];
                                        if (type_616.fieldsTypeSimple == null) {
                                            index_613 = /*EnumTag*/[33,index_613];
                                            promoted = true;
                                        };
                                    }
                                } break;
                                };
                            };
                            let i_617 = 0;
                            for (const ec of $toIterator(cases_581)) {
                                const block_618 = [];
                                const co_619 = conds_579[i_617];
                                const cx = [];
                                const addTag = (co_620) => {
                                    const temp_621 = co_620;
                                    switch (temp_621&&temp_621[0]) {
                                    case 7: {
                                        cx.push(/*Null*/[8])
                                    } break;

                                    case 42: {
                                        {
                                        }
                                    } break;

                                    case 0: {
                                        {
                                            const v_622 = temp_621[1];
                                            cx.push(/*String*/[2,v_622]);
                                        }
                                    } break;

                                    case 5: {
                                        {
                                            const v_623 = temp_621[1];
                                            cx.push(/*Int*/[3,v_623]);
                                        }
                                    } break;

                                    case 6: {
                                        {
                                            const v_624 = temp_621[1];
                                            cx.push(/*Float*/[4,v_624]);
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const v_625 = temp_621[1];
                                            if (v_625) { cx.push(/*True*/[5]) } else cx.push(/*False*/[6]);
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_626 = temp_621[1];
                                            const args_627 = temp_621[2];
                                            const argNames_628 = temp_621[3];
                                            {
                                                const temp_629 = e_626;
                                                switch (temp_629&&temp_629[0]) {
                                                case 29: {
                                                    {
                                                        const expr_630 = temp_629[1];
                                                        const name_631 = temp_629[2];
                                                        {
                                                            const parent_632 = this.typer.parents.get(expr_630);
                                                            const tag_633 = this.getTag(parent_632, name_631);
                                                            cx.push(tag_633);
                                                            if (!promoted) { index_613 = /*EnumTag*/[33,index_613] };
                                                            promoted = true;
                                                            {
                                                                let arg_634 = 0;
                                                                let it_635 = 0;
                                                                let at_636 = args_627.length;
                                                                while (it_635 < at_636) {
                                                                    arg_634 = it_635;
                                                                    it_635++;
                                                                    {
                                                                        const temp_637 = args_627[arg_634];
                                                                        switch (temp_637&&temp_637[0]) {
                                                                        case 1: {
                                                                            {
                                                                                const name_638 = temp_637[1];
                                                                                block_618.push(/*Const*/[6,this.unique(name_638, args_627[arg_634]),/*EnumParameter*/[35,/*Ident*/[7,temp_611,this.typer.types.get(args_627[arg_634])],arg_634],this.typer.types.get(args_627[arg_634])]);
                                                                            }
                                                                        } break;

                                                                        case 42: {
                                                                            {
                                                                            }
                                                                        } break;

                                                                        default:
                                                                        console.log('(internal warning) Unknown case extract value kind:', arg_634)
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown case extract kind:', e_626, this.typer.parents.get(e_626))
                                                };
                                            };
                                        }
                                    } break;

                                    case 29: {
                                        {
                                            const expr_639 = temp_621[1];
                                            const name_640 = temp_621[2];
                                            cx.push(this.getTag(this.typer.parents.get(expr_639), name_640));
                                        }
                                    } break;

                                    case 9: {
                                        {
                                            const a_641 = temp_621[1];
                                            const op_642 = temp_621[2];
                                            const b_643 = temp_621[3];
                                            {
                                                const temp_644 = op_642;
                                                switch (temp_644) {
                                                case 104: {
                                                    {
                                                        addTag(a_641);
                                                        addTag(b_643);
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown case binop kind:', e_300, this.typer.parents.get(e_300))
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown case kind:', co_620, Project.data.get(co_620))
                                    };
                                };
                                addTag(co_619);
                                c.push(cx);
                                block_618.push(this.unwrapNestingBlocks(this.nodeToStatement(ec)));
                                s_582.push(this.unwrapNestingBlocks(/*Block*/[1,block_618]));
                                i_617++;
                            };
                            return /*Block*/[1,[/*Const*/[6,temp_611,value_612,this.typer.types.get(exprs_578[0])], /*Switch*/[24,index_613,c,s_582]]];
                        };
                    }
                } break;

                case 24: {
                    {
                        const vars_645 = temp_301[1];
                        {
                            const s_646 = [];
                            for (const v of $toIterator(vars_645)) {
                                let step_647 = 0;
                                const st = this.nodeToStatement(v);
                                if (step_647 == 0 && st != null) { step_647 = 1 };
                                if (step_647 == 1) { s_646.push(st) };
                            };
                            return /*Statements*/[0,s_646];
                        };
                    }
                } break;

                case 33: {
                    {
                        const v_648 = temp_301[1];
                        const index_649 = temp_301[2];
                        {
                            Project.hints.push(new Hint(10, ('Unused value of index `' + (Node.stringify(e_300)) + '`'), Project.data.get(e_300)));
                            {
                                const temp_650 = index_649;
                                switch (temp_650&&temp_650[0]) {
                                case 0: {
                                    return this.nodeToStatement(v_648)
                                } break;

                                case 5: {
                                    return this.nodeToStatement(v_648)
                                } break;

                                case 2: {
                                    return this.nodeToStatement(v_648)
                                } break;

                                case 6: {
                                    return this.nodeToStatement(v_648)
                                } break;
                                };
                            };
                            return /*Statements*/[0,[this.nodeToStatement(v_648), this.nodeToStatement(index_649)]];
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_651 = temp_301[1];
                        Project.hints.push(new Hint(10, ('Unused value `' + (name_651) + '`'), Project.data.get(e_300)));
                    }
                } break;

                case 22: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const v_652 = temp_301[1];
                        Project.hints.push(new Hint(10, ('Unused string `\"' + (v_652) + '\"`'), Project.data.get(e_300)));
                    }
                } break;

                case 2: {
                    {
                        const v_653 = temp_301[1];
                        Project.hints.push(new Hint(10, ('Unused boolean `' + (v_653) + '`'), Project.data.get(e_300)));
                    }
                } break;

                case 5: {
                    {
                        const v_654 = temp_301[1];
                        Project.hints.push(new Hint(10, ('Unused number `' + (v_654) + '`'), Project.data.get(e_300)));
                    }
                } break;

                case 6: {
                    {
                        const v_655 = temp_301[1];
                        Project.hints.push(new Hint(10, ('Unused float `' + (v_655) + '`'), Project.data.get(e_300)));
                    }
                } break;

                case 7: {
                    Project.hints.push(new Hint(10, 'Unused `null`', Project.data.get(e_300)))
                } break;

                default:
                {
                    console.log('normalizer: unprocessed statement ' + e_300 + Typer.positionOf(e_300));
                    return /*UnusedExpression*/[4,this.nodeToExpression(e_300)];
                }
                };
            };
            return null;
        };
        getTag(enumNode, name_656) {
            const temp_657 = enumNode;
            switch (temp_657&&temp_657[0]) {
            case 37: {
                {
                    const t_658 = temp_657[1];
                    const fields_659 = temp_657[2];
                    const valuesType_660 = temp_657[3];
                    {
                        let typed_661 = (null);
                        {
                            const temp_662 = this.typer.types.get(enumNode);
                            switch (temp_662&&temp_662[0]) {
                            case 6: {
                                {
                                    const type_663 = temp_662[1];
                                    typed_661 = type_663;
                                }
                            } break;
                            };
                        };
                        let i_664 = 0;
                        for (const f of $toIterator(fields_659)) {
                            {
                                const temp_665 = f;
                                switch (temp_665&&temp_665[0]) {
                                case 48: {
                                    {
                                        const t_666 = temp_665[1];
                                        {
                                            const temp_667 = t_666;
                                            switch (temp_667&&temp_667[0]) {
                                            case 1: {
                                                {
                                                    const n = temp_667[1];
                                                    {
                                                        if (n == name_656) { if (typed_661.fieldsTypeSimple == this.typer.typeString) { return /*String*/[2,n] } };
                                                        if (n == name_656) { return /*Int*/[3,i_664] };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 12: {
                                    {
                                        const e_668 = temp_665[1];
                                        {
                                            const temp_669 = e_668;
                                            switch (temp_669&&temp_669[0]) {
                                            case 48: {
                                                {
                                                    const t_670 = temp_669[1];
                                                    {
                                                        const temp_671 = t_670;
                                                        switch (temp_671&&temp_671[0]) {
                                                        case 1: {
                                                            {
                                                                const n_672 = temp_671[1];
                                                                if (n_672 == name_656) { return /*Int*/[3,i_664] };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_673 = temp_665[1];
                                        const op_674 = temp_665[2];
                                        const b_675 = temp_665[3];
                                        {
                                            const temp_676 = a_673;
                                            switch (temp_676&&temp_676[0]) {
                                            case 48: {
                                                {
                                                    const t_677 = temp_676[1];
                                                    {
                                                        const temp_678 = t_677;
                                                        switch (temp_678&&temp_678[0]) {
                                                        case 1: {
                                                            {
                                                                const n_679 = temp_678[1];
                                                                if (n_679 == name_656) { return this.nodeToExpression(b_675) };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    return null
                                } break;

                                default:
                                console.error('(internal warning) Unknown enum tag kind:', f)
                                };
                            };
                            i_664++;
                        };
                        {
                            let step_680 = 0;
                            const extend = typed_661.extend;
                            if (step_680 == 0 && extend != null) { step_680 = 1 };
                            if (step_680 == 1) { return this.getTag(extend.parent, name_656) };
                        };
                        throw ('Enum has no tag or field `' + (name_656) + '` ') + t_658;
                    };
                }
            } break;
            };
        };
        getAtt(atts_681, atname) {
            if (atts_681 != null && atts_681.length > 0) { for (const att of $toIterator(atts_681)) {
                if (att.name == atname) { return att };
            } };
            return null;
        };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        hasInScope(name_682) {
            for (const scope of $toIterator(this.scopes)) {
                if (scope.get(name_682) != null) { return true };
            };
            return false;
        };
        addToScope(name_683) { this.scopes[this.scopes.length - 1].set(name_683, true) };
        unique(name_684, node) {
            let uname_685 = name_684;
            while (this.hasInScope(uname_685) || (this.keywords.indexOf(uname_685) != -1) || (this.globals.indexOf(uname_685) != -1)) uname_685 = name_684 + '_' + (++this.id);
            this.addToScope(uname_685);
            {
                let step_686 = 0;
                const temp_687 = node != null;
                let already = null;
                if (step_686 == 0 && temp_687 != false) {
                    already = this.parentNames.get(node);
                    step_686 = 1;
                };
                if (step_686 == 1 && already != null) { step_686 = 2 };
                if (step_686 == 2) { throw ('unique ' + (name_684) + ' already set to ' + (already) + ' for ' + (node) + '') };
            };
            if (node != null) { this.parentNames.set(node, uname_685) };
            return uname_685;
        };
        uniqueNative(name_688, node_689) {
            {
                let step_690 = 0;
                const temp_691 = node_689 != null;
                let already_692 = null;
                if (step_690 == 0 && temp_691 != false) {
                    already_692 = this.parentNames.get(node_689);
                    step_690 = 1;
                };
                if (step_690 == 1 && already_692 != null) { step_690 = 2 };
                if (step_690 == 2) { throw ('unique ' + (name_688) + ' already set to ' + (already_692) + ' for ' + (node_689) + '') };
            };
            this.addToScope(name_688);
            this.parentNames.set(node_689, name_688);
        };
        fillStatement(e_693) { return this.nodeToStatement(e_693) };
        renameClassFields(fields_694) {
            this.pushScope();
            for (const f of $toIterator(fields_694)) {
                const temp_695 = f;
                switch (temp_695&&temp_695[0]) {
                case 23: {
                    {
                        const name_696 = temp_695[1];
                        const t_697 = temp_695[2];
                        const expr_698 = temp_695[3];
                        const const_699 = temp_695[4];
                        {
                            const atts_700 = Project.mapAttributes.get(f);
                            const native_701 = this.getAtt(atts_700, 'native');
                            if (native_701 != null) {
                                const temp_702 = native_701.values[0];
                                switch (temp_702&&temp_702[0]) {
                                case 0: {
                                    {
                                        const s_703 = temp_702[1];
                                        if (this.parentNames.get(f) == null) { this.unique(s_703, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_696, f) };
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_704 = temp_695[1];
                        const expr_705 = temp_695[2];
                        const vars_706 = temp_695[3];
                        const rettype_707 = temp_695[4];
                        if (name_704 == 'new') { this.parentNames.set(f, 'new') } else {
                            const atts_708 = Project.mapAttributes.get(f);
                            const native_709 = this.getAtt(atts_708, 'native');
                            if (native_709 != null) {
                                const temp_710 = native_709.values[0];
                                switch (temp_710&&temp_710[0]) {
                                case 0: {
                                    {
                                        const s_711 = temp_710[1];
                                        if (this.parentNames.get(f) == null) { this.unique(s_711, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_704, f) };
                        };
                    }
                } break;

                case 43: {
                    {
                        const field_712 = temp_695[1];
                        {
                            const temp_713 = field_712;
                            switch (temp_713&&temp_713[0]) {
                            case 23: {
                                {
                                    const name_714 = temp_713[1];
                                    const t_715 = temp_713[2];
                                    const expr_716 = temp_713[3];
                                    const const_717 = temp_713[4];
                                    if (this.parentNames.get(field_712) == null) { this.unique(name_714, field_712) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_718 = temp_713[1];
                                    const expr_719 = temp_713[2];
                                    const vars_720 = temp_713[3];
                                    const rettype_721 = temp_713[4];
                                    {
                                        const atts_722 = Project.mapAttributes.get(f);
                                        const native_723 = this.getAtt(atts_722, 'native');
                                        if (native_723 != null) {
                                            const temp_724 = native_723.values[0];
                                            switch (temp_724&&temp_724[0]) {
                                            case 0: {
                                                {
                                                    const s_725 = temp_724[1];
                                                    if (this.parentNames.get(field_712) == null) { this.unique(s_725, field_712) };
                                                }
                                            } break;

                                            default:
                                            throw '@native takes string as argument'
                                            };
                                        } else if (this.parentNames.get(field_712) == null) { this.unique(name_718, field_712) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            this.popScope();
        };
        getClassDotField(expr_726, name_727) {
            {
                const temp_728 = expr_726;
                switch (temp_728&&temp_728[0]) {
                case 25: {
                    {
                        const t_729 = temp_728[1];
                        const ext_730 = temp_728[2];
                        const impl_731 = temp_728[3];
                        const fields_732 = temp_728[4];
                        const external_733 = temp_728[5];
                        for (const f of $toIterator(fields_732)) {
                            const temp_734 = f;
                            switch (temp_734&&temp_734[0]) {
                            case 43: {
                                {
                                    const sf = temp_734[1];
                                    if (DataHelper.nameOf(sf) == name_727) { return (() => {
                                        const result_735 = this.parentNames.get(sf);
                                        if (result_735 != null) { return result_735 };
                                        return name_727;
                                    })() };
                                }
                            } break;

                            case 23: {
                                {
                                    const n_736 = temp_734[1];
                                    if (n_736 == name_727) { return (() => {
                                        const result_737 = this.parentNames.get(f);
                                        if (result_737 != null) { return result_737 };
                                        return name_727;
                                    })() };
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_738 = temp_728[1];
                        const fields_739 = temp_728[2];
                        const valuesType_740 = temp_728[3];
                        for (const f of $toIterator(fields_739)) {
                            const temp_741 = f;
                            switch (temp_741&&temp_741[0]) {
                            case 43: {
                                {
                                    const sf_742 = temp_741[1];
                                    if (DataHelper.nameOf(sf_742) == name_727) { return (() => {
                                        const result_743 = this.parentNames.get(sf_742);
                                        if (result_743 != null) { return result_743 };
                                        return name_727;
                                    })() };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            return null;
        };
        unwrapNestingBlocks(block_744) {
            const temp_745 = block_744;
            switch (temp_745&&temp_745[0]) {
            case 1: {
                {
                    const el_746 = temp_745[1];
                    {
                        if (el_746.length == 1) { return this.unwrapNestingBlocks(el_746[0]) };
                        return block_744;
                    };
                }
            } break;

            default:
            return block_744
            };
        };
    }
    function btoa(text_35) { return new Buffer(text_35, 'binary').toString('base64') };
    function atob(base64) { return new Buffer(base64, 'base64').toString('binary') };
    function exitProgramWithMessage(message) {};
    function hasOwnProperty(object_105, name_106) { return object_105.hasOwnProperty(name_106) };
    function setLibrary(target_2746, options, files, defines) {
            const temp_2747 = target_2746;
            switch (temp_2747) {
            case 'JavaScript': {
                {
                    defines.js = (() => {
                        const result_2748 = defines.js;
                        if (result_2748 != null) { return result_2748 };
                        return true;
                    })();
                    files.unshift(path.resolve(__dirname + '/library/js/js.hexa'));
                    if (options.includes('nodejs')) { files.unshift(path.resolve(__dirname + '/library/nodejs/nodejs.hexa')) };
                    if (options.includes('browser')) { files.unshift(path.resolve(__dirname + '/library/browser/html.hexa')) };
                }
            } break;

            case 'Native': {
                {
                    defines.native = (() => {
                        const result_2749 = defines.native;
                        if (result_2749 != null) { return result_2749 };
                        return true;
                    })();
                    files.unshift(path.resolve(__dirname + '/library/c/c.hexa'));
                }
            } break;
            };
        };
    function availableGenerators(name_2750) {
            const temp_2751 = name_2750;
            switch (temp_2751) {
            case 'js': {
                return 'JavaScript'
            } break;

            case 'native': {
                return 'Native'
            } break;

            case 'c#': {
                return 'Native'
            } break;

            default:
            return null
            };
        };
    var version = '0.0.1'
    {
        {
            new Main();
        }
    }
})();
