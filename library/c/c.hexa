// The MIT License
//
// Copyright (c) 2020 Oleg Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

module

// Basic
@final
//@native('void')
@nativeBasicType
declare class Void {}

@final
//@native('void*')
@unsupported
declare class Any {}

//@final
//@nativeArrayIndexRead(T)
////@nativeMapIndexRead(T)
//@nativeArrayIndexWrite(T)
//declare class PointerArray<T> {}

@keep class AnyRef {
	//var meta: UInt64
	//var ref: UInt32
	//var xxx: (()=>Void)? // TODO Expected `=>` before `?`
}
@keep function ref(object: AnyRef) {}
@keep function unref(object: AnyRef) {}

@final
//@native('int32_t')
@nativeBasicType // @keepFieldsOrder
@orderingSizeOf(32)
declare class Int {
}

@final
//@native('int32_t')
@nativeBasicType
declare	class Bool {}

/// Stored as `Int32` on native platforms
@nativeConvertibleTo(Bool)
@nativeConvertibleFrom(Bool)
declare	class CBool {}

//enum CBool32: Int32 {
//	False = 0
//	True = 1
//}

@final
//@native('double')
@nativeBasicType
declare	class Float {}

@final
@nativeConvertibleTo(String)
@nativeConvertibleFrom(String)
declare class CString8 {}
declare class StackAsciiString {}
declare class HeapAsciiString {}

@final
@nativeFrom(String)
@nativeTo(String)
declare class CString16 {}

/*
	#if external_std_dll // or attach different string.hexa/stringdll.hexa|stringlib.hexa
		declare private class ExtrenalBuiltinStringPointer {}
		declare private function ExtrenalBuiltinStringPointer_toUpperCase(...)
		@inline class String {
			let me: ExtrenalBuiltinStringPointer
			@inline new () {
			}
			@inline function toUpperCase(): String
				return ExtrenalBuiltinStringPointer_toUpperCase(me)
			...
		}
	#else
		class String { ...
	#end

	TODO syntax `markdonw` in multiline comments?
*/

@final // TODO optimize into non-virtual calls
class String {
	let length: Int
	/// Used for runtime purposes
	@keep private var next: String? = null
	@keep private var bytesLength: Int = 0
	@keep private var bytesHash: Int = 0
	@keep private var bytes: Int? = null
	function getBytesPointer(): Int {return 0}

	//function toUpperCase(): String TODO typer not errors here!
	function toUpperCase(): String {return''}
	function toLowerCase(): String {return''}
	function charAt(index: Int): String {return''}
	function indexOf(str: String, startIndex: Int?): Int {return 0}
	function lastIndexOf(str: String, startIndex: Int?): Int {return 0}
	function split(delimiter: String): [String] {return []}
	function toString(): String {return this}
	function substring(startIndex: Int, endIndex: Int?): String {return''}
	static function fromCharCode(code: Int): String {return''}
	function charCodeAt(index: Int): Int? {return 0}
	function trim(): String {return''}
	function substr(pos: Int, len: Int?): String {return''}
	function endsWith(str: String): Bool {return false}

	// Runtime functions
	private function fromInt() {}
}
//private
@keep
let rootString: String = ''

class Math {
	static function abs(v: Float): Float {return 0}
	static function acos(v: Float): Float {return 0}
	static function asin(v: Float): Float {return 0}
	static function atan(v: Float): Float {return 0}
	static function atan2(y: Float, x: Float): Float {return 0}
	static function ceil(v: Float): Int {return 0}
	static function cos(v: Float): Float {return 0}
	static function exp(v: Float): Float {return 0}
	static function floor(v: Float): Int {return 0}
	static function log(v: Float): Float {return 0}
	static function max(a: Float, b: Float): Float {return 0}
	static function min(a: Float, b: Float): Float {return 0}
	static function pow(v: Float, exp: Float): Float {return 0}
	static function random(): Float {return 0}
	static function round(v: Float): Int {return 0}
	static function sin(v: Float): Float {return 0}
	static function sqrt(v: Float): Float {return 0}
	static function tan(v: Float): Float {return 0}
}

class JSON {
	static function parse(text: String): Any {return null}
	static function stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String {return ''}
}

class Map<K, V> {
	//function get(k: K): V {}
	function get(k: K): V {return null}
	function set(k: K, v: V): Void {}
	function has(k: K): Bool {return false}
	function keys(): [K] {return [null]} // TODO what with [null]?
	new(/*...values:T*/) {} // TODO fix ... in parser
}

declare function ffflush(port: Int): Void
@native('fflush') declare function fflush(port: Int): Void
@native('printf') declare function printf(text: CString8): Void

/*
	#if linux
	@include('#include <stdio.h>', '#include <stdlib.h>')
	@link('-lc')
	#elseif windows
	@importDLL('ntdll.dll')
	#end
	module stdio {

	}

	or...

	/linux/stdio.hexa
	module stdio {}
*/

class Console {
	new() {}
	function log(str: Any): Void {
		//fflush(0)
	}
	function error(data: Any, message: String?): Void {}
}

let console: Console = new Console()

class Array<T> {
	// TODO do not store "capacity" - it can be always(?) calculated from length
	var length: Int
	//function get(index: Int): Int {} // TODO T?
	//function set(index: Int, value: T): Void {}
	function concat(a: [T]): [T] {return[]}
	function join(sep: String): String {return''}
	//function pop(): T? {}
	function pop(): T {return null}
	function push(x: T): Int {return 0}
	function reverse(): Void {}
	//function shift(): T? {}
	function shift(): T? {return null}
	function slice(pos: Int, end: Int?): [T] {return[]}
	function sort(f: (T, T)=>Int): Void {}
	function splice(pos: Int, len: Int): [T] {return[]}
	function toString(): String {return ''}
	function unshift(x: T): Void {}
	function includes(x: T): Bool {return false}
	function indexOf(x: T, fromIndex: Int?): Int {return 0}
	function lastIndexOf(x: T, fromIndex: Int?): Int {return 0}
	function filter(f: T=>Bool): [T] {return[]}
	function map(f: T=>T): [T] {return[]}
	//new(...values:T) {} // TODO fix ... in parser
	new(size: Int) {} // TODO fix ... in parser
	private function get(index: Int): T {return null}
	private function set(index: Int, value: T): T {return null}
	@operator('[]++') function incrementPost(index: Int): Float {return 0}
	@operator('++[]') function incrementPre(index: Int): Float {return 0}
}

class Date {
	static function now(): Float {return 0}
}

declare class Reflect { // TODO non-declare!!!
	static function has(object: Any, name: String): Bool
	static function get(object: Any, name: String): Any?
	static function set(object: Any, name: String, value: Any?): Bool
	static function ownKeys(object: Any): [String]
}

declare function require(package: String): Any
let __dirname: String = '.'
declare let __filename: String

class Buffer<T> /*implements ArrayAccess<T>*/ {
	static function alloc/*<T>*/(size: Int): Buffer<T> {return null as! Buffer<T>} // TODO handle `as!` in gen/typer
	var length: Int
	private new (bufsize: Int) {}//{return null} // TODO `new` cannot return value
	function readUInt16LE(offset: Int): Int {return 0}
	function writeUInt16LE(value: Int, offset: Int): Int {return 0}
	function readUInt32LE(offset: Int): Int {return 0}
	function toString(encoding: String): String {return 'null'}//: String, start: Int?, end: Int?): String {}
	static function from/*<T>*/(string: String, encoding: String?): Buffer<T> {return null as! Buffer<T>}
}

class ProcessStd {
	function write(text: String): Void {}
	function once(name: String, callback: ()=>Void): Void {}
	let fd: Any
}

class Process {
	static let stdin: ProcessStd
	static let stdout: ProcessStd
	static let stderr: ProcessStd
	static let argv: [String]
	static function exit(errorCode: Int): Void {}
	static let versions: { node: String }
	function cwd(): String {return 'null'}
	let env: Any
}

class ProcessT {
	let stdin: ProcessStd
	let stdout: ProcessStd
	let stderr: ProcessStd
	let argv: [String]
	function exit(errorCode: Int): Void {}
	function cwd(): String {return 'null'}
	let versions: { node: String } // todo not require value = for lets in declare
	let env: Any // todo not require value = for lets in declare
}

declare let process: ProcessT

class ParsedPath {
	var root: String
	var dir: String
	var base: String
	var ext: String
	var name: String
}

class Path {
	static let sep: String
	static function resolve(path: String): String {return 'null'}
	static function parse(path: String): ParsedPath {return null as! ParsedPath}
	static function join(...path: String): String {return 'null'}
}

class Fs {
	static function writeFileSync(path: String, data: String): Void {}
	static function readdirSync(path: String): [String] {return [null]}
	static function readFileSync(path: String): Buffer {return null as! Buffer}
	static function lstatSync(path: String): Any {return null}
	static function existsSync(path: String): Bool {return false}
	static function mkdirSync(path: String): Void {}
	static function readSync(fd: Int, buffer: Buffer, offset: Int, length: Int, position: Int): Int {return 0}
}

@require("fs")
declare let fssss: ProcessT

// Global
@native('undefined') declare let undefined: Any?
declare function encodeURIComponent(s: String): String
declare function decodeURIComponent(s: String): String
declare function typeof(v: Any): String
declare function __js__(code: String): Any
declare function eval(code: String): Any
// Special-case, returns `null` instead of `NaN`
declare function parseInt(text: String): Int

function btoa(text: String) {
	return Buffer.from(text, 'binary').toString('base64')
}

function atob(base64: String) {
	return Buffer.from(base64, 'base64').toString('binary')
}

// TODO atribute of module parsing @native('global')
module js
// Just native built-in `parseInt`, without special cases
declare function parseInt(text: String): Int
