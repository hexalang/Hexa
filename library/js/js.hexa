// The MIT License
//
// Copyright (c) 2020 Oleg Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


// Global constants
@native('undefined') declare let undefined: Any?
	@native('Infinity') declare let infinity: Float
	@native('NaN') declare let nan: Float
	declare function encodeURIComponent(s: String): String
	declare function decodeURIComponent(s: String): String
	declare function typeof(value: Any?): String
	declare function __js__(code: String): Any
	declare function eval(code: String): Any
	declare function parseInt(text: String): Int
	declare function parseFloat(text: String): Float
	@infix('instanceof') declare function instanceof(a: Any, b: Any): Bool
	@infix('===') declare function strictEqual(a: Any, b: Any): Bool
	@infix('!==') declare function strictNotEqual(a: Any, b: Any): Bool
	declare function delete(field: Any?): Bool

	// Wrappers for built-ins
	function hasOwnProperty(object: Any, name: String): Bool {
		return object.hasOwnProperty(name)
	}

// Basic
@final
declare class Void {}

@final
declare class Any {}

	@final
	declare class Int {
		function toString(format: Int?): String
	}

@final
declare	class Bool {}

@final
declare	class Float {}

@final
declare class String {
	let length: Int
	function toUpperCase(): String
	function toLowerCase(): String
	function endsWith(str: String): Bool
	function startsWith(str: String): Bool
	function replace(what: String, with: String): String
	function charAt(index: Int): String
	function indexOf(str: String, startIndex: Int?): Int
	function lastIndexOf(str: String, startIndex: Int?): Int
	function split(delimiter: String): [String]
	function toString(): String
	function substring(startIndex: Int, endIndex: Int?): String
	static function fromCharCode(code: Int): String
	function charCodeAt(index: Int): Int?
	function trim(): String
	function substr(pos: Int, len: Int?): String
}

	declare class Math {
		static function abs(v: Float): Float
		static function acos(v: Float): Float
		static function asin(v: Float): Float
		static function atan(v: Float): Float
		static function atan2(y: Float, x: Float): Float
		static function ceil(v: Float): Int
		static function cos(v: Float): Float
		static function exp(v: Float): Float
		static function floor(v: Float): Int
		static function log(v: Float): Float
		static function max(a: Float, b: Float): Float
		static function min(a: Float, b: Float): Float
		static function pow(v: Float, exp: Float): Float
		static function random(): Float
		static function round(v: Float): Int
		static function sin(v: Float): Float
		static function sqrt(v: Float): Float
		static function tan(v: Float): Float
	}

	@native('JSON')
	declare class JSON {
		static function parse(text: String): Any
		static function stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String
	}

	@native('Map')
	declare class Map<K, V> {
		new ()
		function get(k: K): V
		function set(k: K, v: V): Void
		function has(k: K): Bool
		function keys(): [K]
	}

	@native("console")
	declare class Console {
		function log(str: String): Void
		function trace(str: String): Void
		function error(data: Any, message: String?): Void
	}

	declare let console: Console

	declare class Array<T> {
		let length: Int
		function concat(a: [T]): [T]
		function join(sep: String): String
		function pop(): T?
		function push(x: T): Int
		function includes(x: T): Bool
		function reverse(): Void
		function shift(): T?
		function slice(pos: Int, end: Int?): [T]
		function sort(f: (T, T)=>Int): Void
		function splice(pos: Int, len: Int): [T]
		function toString(): String
		function unshift(x: T): Void
		function indexOf(x: T, fromIndex: Int?): Int
		function lastIndexOf(x: T, fromIndex: Int?): Int
		function filter(f: (element:T, index:Int)=>Bool): [T]
		function map(f: T=>T): [T]
		function reduce(f: (accumulator:T, currentValue:T)=>T): T
		function copyWithin(target: Int, start: Int?, end: Int?): [T]
		function fill(value: T, start: Int, end: Int): [T]
		static function isArray(value: Any): Bool
		static function of(...values: T): [T]
		@native('from')
		static function fromArrayLike(arrayLike: Any, mapFn: Any?, thisArg: Any?): [T]
		new (arrayLength: Int)
	}

	declare class Date {
		static function now(): Float
	}

	declare class Reflect {
		static function has(object: Any, name: String): Bool
		static function get(object: Any, name: String): Any?
		static function set(object: Any, name: String, value: Any?): Bool
		static function ownKeys(object: Any): [String]
	}

	@native('RegExp')
	declare class RegExp {
		var global: Bool
		var ignoreCase: Bool
		var multiline: Bool
		var source: String
		var lastIndex: Int
		function exec(str: String): RegExpMatch?
		function test(str: String): Bool
		function toString(): String
		new (pattern: String, flags: String?)
	}

declare class RegExpMatch extends Array< String > {
	var index: Int
	var input: String
}

// Typed Arrays
declare class Uint8Array {
	new ()
}

declare class Uint32Array {
	new ()
}

// Error
@native('Error')
declare class Error {
	var message: String
	var name: String
	var stack: String
	new (message: String?)
}

@native('EvalError')
declare class EvalError extends Error {
	new (message: String?)
}

@native('URIError')
declare class URIError extends Error {
	new (message: String?)
}

@native('TypeError')
declare class TypeError extends Error {
	new (message: String?)
}

@native('SyntaxError')
declare class SyntaxError extends Error {
	new (message: String?)
}

@native('ReferenceError')
declare class ReferenceError extends Error {
	new (message: String?)
}

@native('RangeError')
declare class RangeError extends Error {
	new (message: String?)
}
