// The Hexa Compiler
// Copyright (C) 2020  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// @name(values[0], ...values[n])
class Attribute {
	var name: String
	var values: [Node]
	new (name: String, values: [Node]) {
		this.name = name
		this.values = values
	}
}

declare Handle<T> = {value: T}

class Module {
	var file: String = '.hexa'
	var path: String = 'module'
	var nodes: [Node] = []
	let exported: [String : Node] = [:]
	let imported: [String : Node] = [:]
	// TODO private exports

	new () {
	}
}

// Global data container
class Project {
	let mapDecorators: [Node : [Attribute]] = [:]
	let mapNames: [Node : Node] = [:]
	let data: [Node : NodeData] = [:]
	let hints: [Hint] = []
	var defines: Any = {}
	var name: String = 'Hexa Project'
	var roots: [String] = []

	let globals: [String : Node] = [:]
	let moduleName: [String] = []
	let moduleInfo: [Module] = []

	new () {
	}
}

// Node position info
class NodeData {
	new(atLine, atColumn, atFile) {
		line = atLine
		column = atColumn
		fileName = atFile
	}
	var line: Int
	var column: Int
	var fileName: String
}

	// TODO move to nodes.hexa
// Syntax tree
enum Node {
		// Constants
		String(s: String)
		// ident
		Ident(name: String)
		// true/false
		Bool(b: Bool)
		// this
		This
		// super
		Super
		// 123
		Int(s: Int)
		// 123n
		// 123u32
		MetaInt(s: BigInt, meta: Meta)
		// 0.123
		Float(s: Float)
		// null
		Null

		///////////////////
		/// Syntax Tree ///
		///////////////////

		// declare T = V
		TypeAlias(alias: NodeType, value: NodeType)

		// a op b
		Binop(a: Node, op: Token, b: Node)

		// a op= b
		AssignOp(a: Node, op: Token, b: Node)

		// { el[0] ... el[n] }
		Block(el: [Node])

		// e(args[0], ...args[n])
		Call(e: Node, args: [Node], argNames: [String])

		// if (econd[0], ...econd[n]) { eif } [else { eelse }]
		TIf(econd: [Node], eif: Node, eelse: Node?)

		Parenthesis(inner: Node) // (inner)
		Return(e: Node?) // return e
		Throw(e: Node) // throw e
		Break // break
		Continue // continue

		// postfix ? e op : op e
		Unop(op: Token, postfix: Bool, e: Node)

		// while (econd) { e } or if pre == true then do { e } while (econd)
		While(econd: Node, e: Node, pre: Bool)

		// [declare] fun name(vars): rettype { expr }
		Function(name: String, expr: Node, vars: [Node], retType: NodeType, external: Bool)

		// (vars): rettype => { expr }
		Arrow(expr: Node, vars: [Node], retType: NodeType)

		// [declare] (const ? let : var) name: t = expr
		Var(name: String, t: NodeType, expr: Node, const: Bool, external: Bool)

		// var Var[0], ..., Var[n]
		Vars(vars: [Node])

		// external class t extends extend implements implement { fields }
		Class(t: NodeType, extend: NodeType?, implement: [NodeType], fields: [Node], external: Bool, kind: ClassKind)

		// var name: T { get { return x } set (v) {} }
		// Var, Function, Function
		Property(v: Node, g: Node, s: Node)

		// try { expr } catch(v[0]:t[0]) { catches[0] } ... catch(v[n]:t[n]) { catches[n] }
		Try(expr: Node, t: [NodeType], v: [Node], catches: [Node])

		// expr.name
		Dot(expr: Node, name: String)

		// expr.Name
		DotUpper(expr: Node, name: String)

		// new t { } (args)
		New(path: [String], t: NodeType, args: [Node], fields: [String], el: [Node], argNames: [String])

		// [elements[0], ...elements[n]]
		Array(elements: [Node])

		// [keys[0] : values[0], ... keys[n] : values[n]]
		Map(keys: [Node], values: [Node])

		// expr[index]
		Index(expr: Node, index: Node)

		// switch (exprs[0], exprs[n]) {
		//     case cases[0]: conds[0]
		//     case cases[n]: conds[n]
		// }
		Switch(exprs: [Node], conds: [Node], guards: [Node], cases: [Node])

		// module path[0].path[1].r..path[n] { el }
		Module(path: String, el: [Node])

		// import xxx as yyy in "test"
		Import(el: [ImportNode], path: String)

		// { name[0]: el[0], name[1]: el[1], ... name[n]: el[n] }
		// NOTE: Do not use Map here
		Object(names: [String], el: [Node])

		// enum t : valuesType extends extend { fields[0] ... fields[n] }
		Enum(t: NodeType, fields: [Node], valuesType: NodeType, extend: NodeType?)

		// let expr(extract[0], ..., extract[n]) = name
		EnumExtract(path: [String], bind: [Node/*.Var*/], expr: Node)


		// expr is t
		Is(expr: Node, t: NodeType)

		// expr as t
		// expr as? t
		As(expr: Node, kind: Token, t: NodeType)

		// _
		Underscore

		// ...
		Interval

		Static(field: Node) // `static` field
		Private(field: Node) // `private` field or type

		// for (name in over) by
		// for (name in over ... range) by
		For(name: String, over: Node, by: Node, range: Node)

		// nullable ?? othewise
		Elvis(nullable: Node, othewise: Node)

		// (T<A, B>)
		NodeTypeValue(type: NodeType)

		static function stringify(node: Node): String {
			switch (node) {
				case Node.String(s): return "'\(s)'"
				case Node.Ident(name): return name
				case Node.Bool(b): return b? "true" : "false"
				case Node.Int(s): return s.toString()
				case Node.Float(s): return s.toString()
				case Node.Null: return "null"
				case Node.This: return "this"
				case Node.Parenthesis(expr): return "(" + Node.stringify(expr) + ")"
				case Node.Index(expr, index): return Node.stringify(expr) + '[' + Node.stringify(index) + ']'
				case Node.Dot(expr, name): return Node.stringify(expr) + '.' + name
				case Node.DotUpper(expr, name): return Node.stringify(expr) + '.' + name
				case Node.Call(e, args, argNames):
					let arg = []
					for (i in args.length) {
						if (let name = argNames[i]) {
							arg.push(name + ': ' + Node.stringify(args[i]))
						} else {
							arg.push(Node.stringify(args[i]))
						}
					}
					return Node.stringify(e) + '(' + arg.join(', ') + ')'
				case Node.Array(elements): return '[' + [for (el in elements) Node.stringify(el)].join(', ') + ']'
				case Node.Binop(a, op, b): return Node.stringify(a) + ' ' + Token.stringify(op) + ' ' + Node.stringify(b)
				case Node.Object(names, el):
					return '{' + [for (i in el.length) names[i] + ': ' + Node.stringify(el[i])].join(', ') + '}'
				case Node.NodeTypeValue(t):
					return DataHelper.extractTypeName(t)
				case Node.Static(f): return 'static ' + Node.stringify(f)
				case _: return "..."
			}
		}
}

// Node extentions
class DataHelper {
		// returns var NAME
		static function varName(v: Node) {
			switch (v) {
				case Node.Var(name,_): return name
				case _: throw 'varName got not a Var, but `\(v)`'
			}
		}

		// returns var NAME, enum NAME {}, function NAME(), etc
		static function nameOf(v: Node): String {
			switch (v) {
				case Node.Private(node): return nameOf(node)
				case Node.Property(node): return nameOf(node)
				case Node.Var(name,_): return name
				case Node.Enum(t, _):
					switch (t) {
						case NodeType.Type(name): return name
						case NodeType.ParametricType(name, _): return name
					}
					throw "unreachable"

				case Node.Function(name,_): return name
				case Node.Class(t, _):
					switch (t) {
						case NodeType.Type(name): return name
						case NodeType.ParametricType(name, _): return name
					}
					throw "unreachable"

				case Node.TypeAlias(t, _): switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name): return name
				}
				case Node.Static(field): return nameOf(field)
				case _: throw 'nameOf expected named node, but got `\(v)`'
			}
		}

		// @attribute("hello", "world")
		static function asStringAttValue(a: Attribute, index: Int): String {
			switch (a.values[index]) {
				case null: throw 'Got null, not a string'
				case Node.String(s): return s
				case _: throw 'Got `\(a.values[index])`, not a string'
			}
		}

		// { a b c } => c
		static function getLastOfBlock(block: Node): Node? {
			switch (block) {
				case null: throw 'Got null, not a block'
				case Node.Block(el): return el[el.length - 1]
				case _: throw 'Got `\(block)`, not a block'
			}
		}

		// Node that doesn't return a value, like "x = var a" or "x = return 123"
		static function isVoidValue(block: Node): Bool {
			switch (block) {
				case null: return true
				case Node.Return(_): return true
				case Node.Break: return true
				case Node.Continue: return true
				case Node.Var(_): return true
				case Node.If(_,_,eelse): if (eelse == null) {
					return true
				}
				case Node.Enum(_): return true
				case Node.Class(_): return true
				case Node.Switch(_): return true
				// Also recursively traverses { ... { ... { ... void }}}
				case Node.Block(el):
				if (el.length == 0) {
					return true
				}
				return isVoidValue(el[el.length - 1])
				case _: return false
			}
			return false
		}

		// Returns the only name of type
		static function extractTypeName(t: NodeType): String? {
			switch (t) {
			case NodeType.Type(name): return name
			case NodeType.ParametricType(name, _): return name
			case null: return null
			case _: throw 'Type has no name: ' + t
			}
		}

		static function getAttribute(atts: [Attribute], name: String): Attribute? {
			if (atts != null && atts.length > 0) { for (att in atts) {
				if (att.name == name) {
					return att
				}
			}}
			return null
		}
}

// var a: NodeType
enum NodeType {
	Optional(type: NodeType) // T?
	Type(name: String)
	ParametricType(name: String, params: [NodeType])
	Function(args: [NodeType], ret: NodeType)
	FunctionArg(name: String, type: NodeType, defaultValue: Node)
	Object(names: [String], types: [NodeType])
	static function stringify(nodeType: NodeType): String {
		return DataHelper.extractTypeName(nodeType)
	}
}

enum ClassKind : Int {
	Class
	Interface
}

enum ImportNode {
	Lower(name: String)
	Upper(name: String)
	AllTheThings
	As(left: ImportNode, right: ImportNode)
}
