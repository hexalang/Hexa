// Generated by Hexa https://hexalang.github.io
// normalizer
// LICENSE LGPL-3.0-only
;(() => {
	"use strict"
	const $global = typeof(window) === "undefined"? global : window
	if (typeof($global.require) === "undefined") { $global.require = () => {} };
	var console_304 = $global.console
	var EasE = class {
		constructor(value_529) {};
	}
	function hasOwnProperty(object, name) { return object.hasOwnProperty(name) };
	function btoa(text_494) { return Buffer.from(text_494, 'binary').toString('base64') };
	function atob(base64) { return Buffer.from(base64, 'base64').toString('binary') };
	var value = 'hello'
	var another = 'hello'
	var boolean = true
	{
		{
			console.log('Thank you for choosing Hexa');
			console.log('abcdce');
			console.log('abcdcefff');
			console.log('abc123');
			console.log('3');
			console.log('2');
			console.log('0.7');
			console.log('hello');
			console.log('xhelloy');
			console.log('xhelloy');
			{
				const nested = 'hi';
				{
					console.log('xhiy');
				};
			};
			{
				const bool = true;
				const bool_499 = true;
				const bool_501 = false;
				const bool_503 = false;
				const bool_505 = true;
				const bool_507 = true;
				console.log('xtruey');
				console.log('x' + true + 'y');
				const bool_509 = true == true;
				console.log('x' + bool_509);
				const bool_511 = false;
				const bool_513 = false;
				console.log('false == false');
				const bool_515 = true;
				const bool_517 = true;
				console.log('true == true');
				const bool_519 = false;
				const bool_521 = false;
				console.log('false == false');
				const bool_523 = true;
				const bool_525 = true;
				console.log('true == true');
				console.log('true == true');
				console.log('true == true');
			};
			{
				let i = 0;
				i++;
				{
					i++;
				};
				i--;
				{
					i--;
				};
				{
				};
			};
			{
				const temp_532 = new EasE(123);
			};
		}
	}
})();
