// The MIT License
//
// Copyright (C) 2021 Oleg Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@final
declare class Any {}

// Global constants
@rename('undefined') declare let undefined: Any?
@rename('Infinity') declare let infinity: Float
@rename('NaN') declare let nan: Float
declare fun encodeURIComponent(s: String): String
declare fun decodeURIComponent(s: String): String
declare fun typeof(value: Any?): String
declare fun __js__(code: String): Any
declare fun eval(code: String): Any
declare fun parseInt(text: String): Int
@rename('BigInt') declare fun parseBigInt(text: String): BigInt
declare fun parseFloat(text: String): Float
@infix('instanceof') declare fun instanceof(a: Any, b: Any): Bool
@infix('===') declare fun strictEqual(a: Any, b: Any): Bool
@infix('!==') declare fun strictNotEqual(a: Any, b: Any): Bool
declare fun delete(field: Any?): Bool

// Wrappers for built-ins
fun hasOwnProperty(object: Any, name: String): Bool {
	return object.hasOwnProperty(name)
}

// Basic
@final
declare class Void {}

@final
declare class Int {
	fun toString(format: Int?): String
}

@final
declare class BigInt {
	fun toString(format: Int?): String
}

@final
declare class Int32 {
	fun toString(format: Int?): String
}

@final
declare class Int64 {
	fun toString(format: Int?): String
}

@final
declare class Int16 {
	fun toString(format: Int?): String
}

@final
declare class Int8 {
	fun toString(format: Int?): String
}

@final
declare class UInt32 {
	fun toString(format: Int?): String
}

@final
declare class UInt64 {
	fun toString(format: Int?): String
}

@final
declare class UInt16 {
	fun toString(format: Int?): String
}

@final
declare class UInt8 {
	fun toString(format: Int?): String
}

@final
declare class Float32 {
	fun toString(): String
}

@final
declare class Bool {}

@final
declare class Float {
	fun toString(format: Int?): String
}

@final
declare class String {
	let length: Int
	fun toUpperCase(): String
	fun toLowerCase(): String
	fun endsWith(str: String): Bool
	fun startsWith(str: String): Bool
	fun replace(what: String, with: String): String
	fun charAt(index: Int): String
	fun indexOf(str: String, startIndex: Int?): Int
	fun lastIndexOf(str: String, startIndex: Int?): Int
	fun split(delimiter: String): [String]
	fun toString(): String
	fun substring(startIndex: Int, endIndex: Int?): String
	static fun fromCharCode(code: Int): String
	fun charCodeAt(index: Int): Int?
	fun trim(): String
	fun substr(pos: Int, len: Int?): String
	fun slice(pos: Int, len: Int?): String
}

declare class Math {
	static fun abs(v: Float): Float
	static fun acos(v: Float): Float
	static fun asin(v: Float): Float
	static fun atan(v: Float): Float
	static fun atan2(y: Float, x: Float): Float
	static fun ceil(v: Float): Int
	static fun cos(v: Float): Float
	static fun exp(v: Float): Float
	static fun floor(v: Float): Int
	static fun log(v: Float): Float
	static fun max(a: Float, b: Float): Float
	static fun min(a: Float, b: Float): Float
	static fun pow(v: Float, exp: Float): Float
	static fun random(): Float
	// TODO static fun randomRange(Int, Int): Int
	static fun round(v: Float): Int
	static fun sin(v: Float): Float
	static fun sqrt(v: Float): Float
	static fun tan(v: Float): Float
}

@rename('JSON')
declare class JSON {
	static fun parse(text: String): Any
	static fun stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String
}

@rename('Map')
declare class Map<K, V> {
	new ()
	fun get(k: K): V
	fun set(k: K, v: V): Void
	fun has(k: K): Bool
	fun delete(k: K): Bool
	fun keys(): [K]
}

@rename("console")
declare class Console {
	fun log(str: Any): Void
	fun trace(str: String): Void
	fun error(data: Any, message: String?): Void
}

declare let console: Console

declare class Array<T> {
	let length: Int
	fun concat(a: [T]): [T]
	fun join(sep: String): String
	fun pop(): T?
	fun push(x: T): Int
	fun includes(x: T): Bool
	fun reverse(): Void
	fun shift(): T?
	fun slice(pos: Int, end: Int?): [T]
	fun sort(f: (T, T)=>Int): Void
	fun splice(pos: Int, len: Int): [T]
	fun toString(): String
	fun unshift(x: T): Void
	fun indexOf(x: T, fromIndex: Int?): Int
	fun lastIndexOf(x: T, fromIndex: Int?): Int
	fun filter(f: (element:T, index:Int)=>Bool): [T]
	fun map(f: T=>T): [T]
	fun reduce(f: (accumulator:T, currentValue:T)=>T): T
	fun copyWithin(target: Int, start: Int?, end: Int?): [T]
	fun fill(value: T, start: Int, end: Int): [T]
	static fun isArray(value: Any): Bool
	static fun of(...values: T): [T]
	@rename('from')
	static fun fromArrayLike(arrayLike: Any, mapFn: Any?, thisArg: Any?): [T]
	new (arrayLength: Int)
}

declare class Date {
	static fun now(): Float
	new ()
	fun getFullYear(): Int
	fun getMonth(): Int
	fun getDate(): Int
}

declare class Reflect {
	static fun has(object: Any, name: String): Bool
	static fun get(object: Any, name: String): Any?
	static fun set(object: Any, name: String, value: Any?): Bool
	static fun ownKeys(object: Any): [String]
}

@rename('RegExp')
declare class RegExp {
	var global: Bool
	var ignoreCase: Bool
	var multiline: Bool
	var source: String
	var lastIndex: Int
	fun exec(str: String): RegExpMatch?
	fun test(str: String): Bool
	fun toString(): String
	new (pattern: String, flags: String?)
}

declare class RegExpMatch extends Array< String > {
	var index: Int
	var input: String
}

// Typed Arrays
declare class Uint8Array {
	new ()
}

declare class Uint32Array {
	new ()
}

// Error
@rename('Error')
declare class Error {
	var message: String
	var name: String
	var stack: String
	new (message: String?)
}

@rename('EvalError')
declare class EvalError extends Error {
	new (message: String?)
}

@rename('URIError')
declare class URIError extends Error {
	new (message: String?)
}

@rename('TypeError')
declare class TypeError extends Error {
	new (message: String?)
}

@rename('SyntaxError')
declare class SyntaxError extends Error {
	new (message: String?)
}

@rename('ReferenceError')
declare class ReferenceError extends Error {
	new (message: String?)
}

@rename('RangeError')
declare class RangeError extends Error {
	new (message: String?)
}
