// The MIT License
//
// Copyright (C) 2022 Oleh Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// TODO decorators like `@final` etc
// TODO `Array` should behave as interface for all other array implementations, so documentation is valid
class Array<T> {
	// TODO do not store "capacity" - it can be always(?) calculated from length
	var length: Int = 0
	private var capacity: Int = 0
	private var data: ArrayPointer<T>

	//@operator('[]')
	fun get(index: Int): T? {
		if index < 0 or index >= length {
			return null
		}

		return data[index]
	}

	// TODO @operator('[]=')
	// TODO should accept `T?`
	fun set(index: Int, value: T): Void {
		if index < 0 {
			return // Invalid operation
		}

		// TODO #if sanitizer > MAX_LENGTH error
		// Grow
		// TODO this should be in separate func to keep whole `set` in instruction cache
		if index >= capacity {
			var newCapacity = capacity * 2 // TODO 1.5

			// TODO better idea
			// This is done because x2 may still be not enough for the index
			if newCapacity <= index {
				newCapacity = index * 2 // TODO align or something
			}

			let newData = malloc(sizeOfPreferPointer<T>() * newCapacity) as! ArrayPointer<T>
			// TODO realloc

			for i in length {
				newData[i] = data[i]
			}

			free(data as! RuntimeAllocated)
			data = newData
			capacity = newCapacity
		}

		if index >= length {
			length = index + 1
		}

		data[index] = value
	}

	fun concat(a: [T]): [T] {return[]}

	fun join(sep: String): String {
		// TODO optimize
		var result = ''
		var separate = false

		for i in length {
		// TODO `for element in this {`
			// TODO result += '' + element
			let element = get(i)

			if separate {
				result += sep
			}

			separate = true
		}

		return result
	}

	//fun pop(): T? {}
	fun pop(): T? {return null}

	fun push(x: T): Int {
		set(length, x)
		return length
	}

	fun reverse(): Void {}
	//fun shift(): T? {}
	fun shift(): T? {return null}
	fun slice(pos: Int, end: Int?): [T] {return[]}
	fun sort(f: (T, T)=>Int): Void {}
	fun splice(pos: Int, len: Int): [T] {return[]}

	fun toString(): String {
		return join(',')
	}

	fun unshift(x: T): Void {}

	fun includes(x: T): Bool {
		return indexOf(x) != -1
	}

	fun indexOf(x: T, fromIndex: Int? = 0): Int {
		if let fromIndex = fromIndex {
			// TODO
		}

		for i in length {
			// TODO for shared code: `(uint64_t)get(i) == (uint64_t)x` ref comparison (i.e. disables `==` overload)
			if get(i) == x {
				return i
			}
		}

		return -1
	}

	fun lastIndexOf(x: T, fromIndex: Int?): Int {return 0}

	// TODO should error at `f(el)` cause nullable `fun filter(f: T=>Bool): [T] {`
	fun filter(f: T?=>Bool): [T] {
		let result = new Array<T>(0) // TODO `Array<T> []`

		for element in length {
			let el = get(element)
			if f(el) {
				result.push(el)
			}
		}

		//for element in this { // TODO
		//	if f(element) {
		//		result.push(element)
		//	}
		//}

		return result
	}

	fun forEach(f: (accumulator: T, currentValue: T)=>Void): Void {return}

	// TODO `@noLeave f` means `f` never transferred outside of `fun map`
	// ^ useful for detecting that `f` closure is short-living
	// TODO also means that closure may be STACK ALLOCATED
	// TODO result type inferred from lambda
	fun map(f: T=>T) { var t = this return t }
	//new(...values: T) {} // TODO fix ... in parser
	new(size: Int) {
		length = size
		capacity = size

		// Note: zero capacity causes crash after "grow" cause `0 * N == 0`
		if capacity < 8 {
			capacity = 8
		}

		//var a: T = sizeOf<T>() as! T
		data = malloc(sizeOfPreferPointer<T>() * capacity) as! ArrayPointer<T>
	}
	// TODO fix ... in parser
	//private fun get(index: Int): T {return null}
	//private fun set(index: Int, value: T): T {return null}
	// TODO no decrements for non-any and non flat arrays
	//@operator('[]++') fun incrementPost(index: Int): Float {return 0}
	//@operator('++[]') fun incrementPre(index: Int): Float {return 0}

	/// Do not use other than in code generator
	/// Implies that length is known from instance
	private fun from(payload: ArrayPointer<T>) {
		for i in length {
			data[i] = payload[i]
		}
		return this
	}
}
