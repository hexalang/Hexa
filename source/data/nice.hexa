// The Hexa Compiler
// Copyright (C) 2018-2020 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO class NiceName {
//	var native = false
//	var name = '<!--NiceName-->'
//	new (name, native) {
//		this.name = name
//		this.native = native
//	}
//}

// TODO enum NiceName {
//	// Name of `var`, `function`, not attached to any type
//	Local(name: String)
//	// Should be kept as-is, if `@rename` applied
//	Native(name: String)
//	// Index of class or any type field
//	Field(index: Int)
//	ClassField(index: Int, ref: NiceClass)
//}

// Does not return a value
enum Statement {
	/// Multiple statements *not* wrapped into a block
	// TODO get rid of this, use meta blocks like native gen (currentBlock push/pop)
	Statements(el: [Statement])

	/// Expression used as statement
	// TODO Expression(expr: Expression)

	Block(el: [Statement])
	Call(e: Expression, args: [Expression], expects: [Type], kind: CallKind)
	// TODO why need same `Call` here when we have same expression?
	Var(name: String, expr: Expression, type: Type)
	// TODO ^ expr is nullable
	// CapturedVar
	Const(name: String, expr: Expression, type: Type)
	Function(name: String, expr: Statement, args: [String], defaults: [Expression], funcType: Type, variadic: VariadicKind)
	// TODO ^ funcType to plain class, so no need to pattern match it
	Return(e: Expression) // TODO Null?
	If(econd: Expression, eif: Statement, eelse: Statement) // TODO Null?
	Try(expr: Expression, t: [Type], v: [String], catches: [Statement], temp: String)
	Throw(value: Expression)
	Assign(name: Expression, value: Expression, to: Type)
	// TODO ^ more precise assign, like `Assign[Class/Enum][Global/Static]Var`
	// ^ same for reading values
	Assignop(name: Expression, op: Token, value: Expression)
	// TODO ^ `AssignOp`
	For(name: String, over: Expression, by: Statement)
	While(econd: Expression, e: Statement, pre: Bool)
	Increment(e: Expression)
	Decrement(e: Expression)
	Switch(expr: Expression, cases: [[Expression]], statements: [Statement], guards: [Expression], binds: [[Statement]])
	Continue
	Break
	SuperConstructor(args: [Expression])
	// TODO seems like types *here* `EnumValue(e: THISTYPE)` not checked

	/// Can be re-allocated (on stack)
	// TODO NotNeededStack(name: String)
	// UnwrapNullable
	// ToNullable `Int? = 123` also do it for array elements `[Int?] = [1, 2]`
	// ToString(value, fromNullable Bool)
	// IsNull instead of ==null null==, IsNotNull

	/// Can be un-counted (ARC--)
	// TODO it is bettr to unref early, not a func return
	// TODO NotNeededRef(name: String)
}

// Returns a value
// TODO assign overall expr type in norm where positions set?
// TODO unindent
// TODO must contain position information
enum Expression {
	String(s: String)
	// TODO : Int32
	Int(v: Int)
	MetaInt(v: BigInt, meta: Meta, type: Type)
	// TODO UInt32, BigInt
	// TODO : Float
	Float(v: Float)
	True
	False
	// TODO `underscore: Bool` for idents?
	Ident(name: String, type: Type)
	// TODO ^ `(name and originalName)`
	// TODO ^ instead of `globalAccessor` just add `kind: Global/Local`
	// TODO ^ `LocalVar`
//		Reference(name: NiceName, type: Type)
//		NativeIdent(s: String) // Just textual as is, sorta hack
	Null(nullOf: Type)
	// TODO UnwrapNullable
	This(me: Type)
	Dot(expr: Expression, name: String, result: Type) // TODO Field index instead of name string
	// Dot(expr: Expression, name: String, result: Type, renamed: Bool `= false`) // TODO default enum values
	// TODO ^ resolved references, not `expr: Expression, name: String`
	// ^ but instead something precise like `ClassStaticField`, `LocalVar`, `CapturedVar`
//		Field(expr: Expression, field: Int)
//		DynamicField(expr: Expression, name: String, result: Type)
	Call(e: Expression, args: [Expression], result: Type, kind: CallKind)
	// CallMethod(e, name, rags)
	// ^ todo expects
	New(e: Expression, args: [Expression], result: Type)
	Binop(a: Expression, op: Token, b: Expression, result: Type)
	Function(name: String, expr: Statement, args: [String], defaults: [Expression], funcType: Type)
	Arrow(expr: Expression, args: [String], defaults: [Expression], types: [NodeType], returns: NodeType, funcType: Type)
	// TODO ^ why this even needed? Just use Function
	Parenthesis(inner: Expression)
	Object(names: [String], el: [Expression], types: [NodeType])
	Array(values: [Expression], arrayType: Type)
	Map(keys: [Expression], values: [Expression], keyType: Type, valueType: Type, mapType: Type)
	Unop(op: Token, postfix: Bool, e: Expression)
	Elvis(nullable: Node, othewise: Node)
	If(econd: Expression, eif: Expression, eelse: Expression) // TODO Null?
	Index(expr: Expression, index: Expression, result: Type)

	// TODO rename to `UnsafeCast`
	UnsafeBitCast(expr: Expression, to: Type)
	Is(expr: Expression, of: Type)

	/// `name op= value`
	Assignop(name: Expression, op: Token, value: Expression)
	NativeOperator(kind: NativeOperatorKind, args: [Expression], name: String, params: [Type], result: Type)
	// TODO params: [Type]?

	/// `switch expr.tag` extracts tag for `case tag` patterns
	EnumTag(expr: Expression)

	/// Type.TagName(args)
	Enum(type: String, tagName: String, tag: Expression, args: [Expression])

	/// `case E.N(parameter1, parameter2):` does `parameterN` extraction
	EnumParameter(expr: Expression, index: Int)

	/// `_` used in case patterns (when native enums enabled)
	Underscore
}

enum NativeOperatorKind : Int {
	// `valueA operator valueB`
	Infix = 0

	// `operator(value)`
	Function = 1

	// `operator value`
	Prefix = 2

	// `value operator`
	Postfix = 3
}

enum CallKind : Int {
	Static = 10
	Function = 11
	VirtualMethod = 12
	// TODO KnownVirtualMethod = 13
}

enum VariadicKind : Int {
	NotVariadic = 10
	NativeVariadic = 11
}

class NiceLink {
	/// `@linkName` sets `asm("un mangled name")`
	var linkName: String?
	/// `@dllExport` sets `__declspec(dllexport)`
	var dllExport = false
	/// `@dllImport` sets `__declspec(dllimport)`
	var dllImport = false
	/// `@emitHeader` forces header emit for external `declare` statements
	var emitHeader = false
	/// `@customHeader(string)` sets header overriding code generator
	var customHeader: String? = null
	new() {}
}

class NiceProject {
	let interfaces: [NiceClass] = []
	let classes: [NiceClass] = []
	let enumsSimple: [NiceSimpleEnum] = []
	let enumsComplex: [NiceComplexEnum] = []
	let globalLink: [Statement : NiceLink] = [:]
	let globalVars: [Statement] = []
	let globalFuncs: [Statement] = [] // TODO rename to `globalFunctions`
	let init: [Statement] = []
	var package: Package
	var typer: Typer
	let expressionType: [Expression : Type] = [:]
	let expressionPosition: [Expression : NodeData] = [:]
	let statementPosition: [Statement : NodeData] = [:]
	let native: [Expression : Bool] = [:]
	var mapDecorators: [Node : [Decorator]] = [:]

	new () {}
}

enum ClassBinaryInterface : Int {
	Normal = 10
	// TODO `Reuse = Normal`
	// TODO `Reuse = Normal++` or `Normal + 1`
	// TODO `Reuse` // Implies `Normal + 1`
	StructureNoVirtual = 20
}

class NiceClass {
	new () {}
	var external: Bool
	var useless: Bool
	var name: String
	var extend: String?
	var genericParams: [String]
	var api: ClassBinaryInterface

	/// The more - the earlier in code gen
	/// Fixes forward declaration incomplete type error for by-value structures
	var usedByValueDepth: Int = 0

	/// Class itself is a generic instance of a template class
	var implementationForGenericParams: [Type] // TODO `[NiceClass]`

	/// Class itself is a generic template
	var template: Bool = false
	var type: Type

	var implement: String
	var implementParams: [String]
	var rename: Int
	var constructor
	// TODO native kind: class, union, struct

	var staticMethods: [Statement] = []
	// TODO ^ actual NiceMethods instead of Function statements, cause closures, is-virtual methods, throws etc
	var staticVars: [Statement] = []
	var methods: [Statement] = []
	var vars: [Statement] = []
	var varBits: [Int?] = []
	// TODO let renames: [String] = []
	let property: [String] = [] // `var/let { get ?set }`

	var jsRequire: String? = null
	var jsNative: String? = null
}

class NiceSimpleEnum {
	new () {}
	var name: String
	var external: Bool
	var names: [String]
	var values: [Expression]
	var staticMethods: [Statement] = []
	var staticVars: [Statement] = []
}

class NiceComplexEnum  {
	new () {}
	var name: String
	var external: Bool
	var names: [String]
	var constructors: [[String]]
	var constructorsTypes: [[Type]]
	var types: [[NodeType]]
	var staticMethods: [Statement] = []
	var staticVars: [Statement] = []
	var expose: Bool
}
