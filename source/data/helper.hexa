// The Hexa Compiler
// Copyright (C) 2021-2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Node extensions
class DataHelper {
	/// returns `var NAME`
	static fun varName(v: Node) {
		switch v {
			case Var(name,_): return name
			case _: throw 'varName got not a Var, but `\(v)`'
		}
	}

	/// returns `var NAME`, `enum NAME {}`, `function NAME()`, etc
	static fun nameOf(v: Node): String {
		switch v {
			case Private(node): return nameOf(node)
			case Property(node): return nameOf(node)
			case Var(name,_): return name
			case Enum(t, _):
				switch t {
					case Type(name): return name
					case ParametricType(name, _): return name
				}
				throw "unreachable #1"

			case Function(name,_): return name
			case Class(t, _):
				switch t {
					case Type(name): return name
					case ParametricType(name, _): return name
				}
				throw "unreachable #2"

			case TypeAlias(t, _): switch t {
				case Type(name): return name
				case ParametricType(name): return name
			}
			case Static(field): return nameOf(field)
			case _: throw 'nameOf expected named node, but got `\(v)`'
		}
	}

	/// Extracts `"hello"` from `@decorator("hello", "world")`
	static fun asStringAttValue(a: Decorator, index: Int): String {
		switch a.values[index] as! /*TODO*/ Node {
			case null: throw 'Got null, not a string'
			case String(s): return s
			case _: throw 'Got `\(a.values[index])`, not a string'
		}
	}

	/// `{ a b c }` => `c`
	static fun getLastOfBlock(block: Node): Node? {
		switch block {
			case null: throw 'Got null, not a block'
			case Block(el): return el[el.length - 1]
			case _: throw 'Got `\(block)`, not a block'
		}
	}

	/// Node that doesn't return a value, like `x = var a` or `x = return 123`
	static fun isVoidValue(block: Node): Bool {
		switch block {
			case null: return true
			case Return(_): return true
			case Break: return true
			case Continue: return true
			case Var(_): return true
			case If(_,_,eelse): if eelse == null {
				return true
			}
			case Enum(_): return true
			case Class(_): return true
			case Switch(_): return true
			// Also recursively traverses { ... { ... { ... void }}}
			case Block(el):
			if el.length == 0 {
				return true
			}
			return isVoidValue(el[el.length - 1])
			case _: return false
		}
		return false
	}

	/// Returns the only name of type
	static fun extractTypeName(t: NodeType): String? {
		switch t {
		case Type(name): return name
		case Ident(name): return name
		case ParametricType(name, _): return name
		case null: return null
		case _:
			// TODO
			//let data = project.data.get(t)
			//let msg = 'Type has no name: ' + JSON.stringify(t)
			//if let data = data {
			//	throw new CompilerError(Fail.TyperError, msg, data.line, data.column, data.fileName)
			//} else {
			//console.error('Type has no name:', t)
			//throw new CompilerErrors([new CompilerError(Fail.TyperError, msg, 0, 0, "")])
			//}
			//throw 'Type has no name: ' + JSON.stringify(t)
			return null
		}
	}

	/// Extracts `@decorator` by name
	static fun getDecorator(atts: [Decorator], name: String): Decorator? {
		if let atts = atts, atts.length > 0 { for att in atts {
			if att.name == name {
				return att
			}
		}}
		return null
	}

	/// Checks if starts by titled letter
	static fun isTitleCase(string: String): Bool {
		// TODO just check by ASCII code
		return string.charAt(0) == string.charAt(0).toUpperCase()
	}
}
