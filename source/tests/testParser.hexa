// The Hexa Compiler
// Copyright (C) 2021  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

class TestParser {
	static fun test() {
			console.log("TestParser begin")

			// Basics and indentaion
			shouldAllEqual([
				''			 : '<!--null-->',
				'  '		 : '<!--null-->',
				'	'		 : '<!--null-->',
				'   	'	 : '<!--null-->',

				'\n'		 : '<!--null-->',
				'\n\n'		 : '<!--null-->',
				'\r\r\n\r\n\r\t' : '<!--null-->',

				"0x1"		 : 'TInt(0x1)',
				"0x0"		 : 'TInt(0x0)',
				"0xF"		 : 'TInt(0xF)',
				"0xFA"		 : 'TInt(0xFA)',
				"0xFABCDEF" : 'TInt(0xFABCDEF)',
				"0.0"		 : 'TFloat(0.0)',
				'{}' : 'Block([])',
				'{{}}' : 'Block([Block([])])',
				'{ 0 0 0 }' : 'Block([Int(0),Int(0),Int(0)])',

				'0' 		 : 'Int(0)',
				' 0 '		 : 'Int(0)',
				'123'		 : 'Int(123)',
				'12'		 : 'Int(12)',

				"0.123" 	 : 'Float(0.123)',

				"'s'"		 : 'String(s)',
				"\"s\"" 	 : 'String(s)'
			])

			shouldAllEqual([
				'1 2 3 trace("Hello!", "World!") + 5 * 6 / 3':
					'Block([
					Int(1),
					Int(2),
					Int(3),
					Binop(
					Call(Ident(trace),[String(Hello!),String(World!)]),
					+,
					TBinop(TInt(5),*,TBinop(TInt(6),/,TInt(3))))])',

				'enum Test { Demo } hello World':
					'Block([Enum(Type(Test),[NodeTypeValue(Type(Demo))]),
					Ident(hello),
					NodeTypeValue(Type(World))])'
			])

			// Operators
			shouldAllEqual([
				'i ++ ++ i': "Block([Unop(++,true,Ident(i)),Unop(++,false,Ident(i))])",
				'a + b': "Binop(Ident(a),+,Ident(b))",
				'a += b': "AssignOp(Ident(a),+,Ident(b))"
			])

			// String interpolation
			shouldAllEqual([
				'"\\\\(v)"': "TString(\\\\(v))",
				'"\\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))',
				'"\\(((v)))"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),+,TString())))',
				'"\\( v )"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))',
				'"\\(V)\\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))',
				'"\\(V)\\(v)s\\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))',
				'"\\(V)s\\(v)s\\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'
			])

			shouldAllEqualWithoutTrim([
				'"\\( v )"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))',
				'"\\(V)\r\n\\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(\n),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))',
				'"\\(V) \\(v) \\(v)"': 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'
			])

			// Modularity
			shouldAllEqual([
				'import "test"': 'Import([],test)',
				'import xxx in "test"': 'Import([Lower(xxx)],test)',
				'import xxx as yyy in "test"': 'Import([Lower(xxx){as}Lower(yyy)],test)',
				'import XXX as YYY in "test"': 'Import([Upper(XXX){as}Upper(YYY)],test)',
				'import * as mmm in "test"': 'Import([*{as}Lower(mmm)],test)',
				'import XXX, YYY as ZZZ, www in "test"': 'Import([Upper(XXX),Upper(YYY){as}Upper(ZZZ),Lower(www)],test)'
			])

			shouldAllError([
				'import',
				//'import ""',
				'import hehe',
				'import _ as B in "test"',
				'import * in "test"',
				'import * as B in "test"'
			//	'import a as B in ""'
			])

			// Types parsing in expressions
			shouldAllEqual([
				'var a = new Array<A>()' : 'Var(a,null,New([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)',
				'a = Array<A>.staticField()' : 'Binop(Ident(a),=,Call(Dot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))',
				'a = EnumTest.EnumField' : 'Binop(Ident(a),=,DotUpper(NodeTypeValue(Type(EnumTest)),EnumField))',
				'a = EnumTest.EnumField(arg)' : 'Binop(Ident(a),=,Call(DotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[Ident(arg)]))',
				'a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)' : 'Binop(Ident(a),=,Call(DotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:Ident(argValue),Ident(arg2),arg3:Ident(arg3)]))',
				'a = EnumTest<A,B>.EnumField' : 'Binop(Ident(a),=,DotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))',
				'var a = b as B var c = d as! B var e = f as? B' : 'Block([Var(a,null,As(Ident(b),<!--default-->,Type(B)),false,false),Var(c,null,As(Ident(d),!,Type(B)),false,false),Var(e,null,As(Ident(f),?,Type(B)),false,false)])',
				'var a = b is B var c = d is B var e = f is B' : 'Block([Var(a,null,As(Ident(b),Type(B)),false,false),Var(c,null,As(Ident(d),Type(B)),false,false),Var(e,null,As(Ident(f),Type(B)),false,false)])'
			])

			// Types parsing in declarations
			shouldAllEqual([
				'var x:[Array<T>]' : 'Var(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)',
				'var x:[Map<K,V> : Array<T>]' : 'Var(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)',
				'var x:{} var y:[] var z:[:] var w:()=>{}' : 'Block([Var(x,Object([],[]),null,false,false),Var(y,ParametricType(Array,[Object([],[])]),null,false,false),Var(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),Var(w,Function([],Object([],[])),null,false,false)])',
				'let x:()=>()=>()=>()=>Void' : 'Var(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)'
			])

			// Enumerations
			shouldAllEqual([
				'enum A {}' : 'Enum(Type(A),[])',
				'enum A { A B C }' : 'Enum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])',
				'enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }' :
					'Enum(Type(A),[
					Call(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),
					NodeTypeValue(Type(B)),
					Call(NodeTypeValue(Type(C)),[v:Map([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])
					])',
				'enum A { E(v: T<T>?) }' : 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])',
				'enum A { E(v: T<T?>) }' : 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])',
				'enum A { E(v: T?) }' : 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])'
			])

			// Constructor
			shouldAllEqual([
				'new A(a: 1, b: 2)' : 'New([],Type(A),[Int(1),Int(2)],[],[],[a,b])',
				'class A {} var a = new A { } ()' : "Block([Class(Type(A),null,[],[],false),Var(a,null,New([],Type(A),[],[],[],[]),false,false)])",
				'class A { var field: String } var a = new A { field: "Value" } ()' :
					"Block([Class(Type(A),null,[],[Var(field,Type(String),null,false,false)],false),Var(a,null,New([],Type(A),[],[field],[String(Value)],[]),false,false)])",
				'class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()' :
					"Block([Class(Type(A),null,[],[Var(field,Type(String),null,false,false),Var(otherfield,Type(Int),null,false,false)],false),Var(a,null,New([],Type(A),[],[field,otherfield],[String(Value),Int(25)],[]),false,false)])"
			])

			// Functions
			shouldAllError([
				'class A { new(a b) {} }',
				'class A { new(a, b,) {} }',
				'class A { new(,) {} }',
			 	'fun f(a b c) {}',
			 	'fun f(a b) {}',
			 	'fun f(a, b,) {}',
			 	'fun f(a,) {}',
			 	'fun f(,) {}'
			])

			// Property
			shouldAllError([
				'class A { var i: Int { set (value) {} } }', // set before get
				'class A { var i: Int { get {} set () {} } }', // No `value` in setter
				'class A { var i: Int { get {} set {} } }', // No `(value)` in setter
				'class A { let i: Int { get {} set (value) {} } }', // set in let
				'class A { let i: Int { get {} set (value, val) {} } }', // Multiple `value`
				'class A { var i: Int { get {} set (Value) {} } }', // Upper `Value`
				'class A { var i: Int { get (value) {} set (value) {} } }', // `value` in get
				'class A { var i: Int {} }' // No get/set
				// TODO private set/private get
			])

			// Commas
			shouldAllError([
				'if(,) {}',
				'if(a,) {}',
				'switch (,) {}',
				'switch (a,) {}',
				'@att(,) x',
				'@att(a,) x',
				'@att(a,b,) x',
				'@att(a b,) x',
				'@att(a b) x',
				'new T(,)',
				'new T(a b,)',
				'new T(a,b,)',
				'new T(a b)',
				'call(1 2)',
				'call(1 2,)',
				'call(1,2,)',
				'call(1,)',
				'call(a:1,)',
				'call(1:1,)',
				'call(a:,)',
				'call(a:)',
				'call(,)',
			 	'[1 2]',
			 	'[,]',
			 	'[1,]',
			 	'[1,2,]',
			 	'[1:1 2:2]',
			 	'[1:1,2:2,]',
			 	'{a:1 b:2}',
			 	'{,}',
			 	'{a:1,}',
			 	'{a:1,b:2,}'
			])

			// Misc
			shouldAllError([
				'=',
				'= 1'
			])

			// Conditions
			shouldAllEqual([
				'if this { this }' : 'If([This],Block([This]),<!--null-->)',
				'if this, this { this } else { break }' : 'If([This,This],Block([This]),Block([Break]))',
				'if this, let a = this { this } else { break }' : 'If([This,Var(a,null,This,true,false)],Block([This]),Block([Break]))',
				'if let a = this, let b = this, this { this }' : 'If([Var(a,null,This,true,false),Var(b,null,This,true,false),This],Block([This]),<!--null-->)'
			])

			// External declarations
			shouldAllEqual([
				'declare var a: T' : 'Var(a,Type(T),null,false,true)',
				'declare let a: T' : 'Var(a,Type(T),null,true,true)',
				'declare fun name()' : 'Function(name,null,[],null,true)',
				'declare fun name() hi()' : 'Block([Function(name,null,[],null,true),Call(Ident(hi),[])])',
				// External functions do not parse body
				'declare fun name() {}' : 'Block([Function(name,null,[],null,true),Block([])])',
				'declare class A {}' : 'Class(Type(A),null,[],[],true)',
				'declare A = B' : 'TypeAlias(Type(A),Type(B))'
			])

			shouldAllError([
				"declare var a, b, c",
				"declare anything"
			])

			// Array and map
			shouldAllEqual([
				'push([:])' : 'Call(Ident(push),[Map([],[])])',
				'push([])' : 'Call(Ident(push),[Array([])])',
				'[].length' : 'Dot(Array([]),length)',
				'[:].length' : 'Dot(Map([],[]),length)',
				'[[:]]': 'Array([Map([],[])])'
			])

			console.log("TestParser done \(Math.round((passed/overall)*100))% (\(passed)/\(overall))")
	}

	static var passed = 0
	static var overall = 0

	//
	// Helpers
	//

	/// Parses `input` into AST and stringifies, checks by trimmed `test`
	static fun shouldEqual(input: String, test: String) {
		let test = TestParser.deepTrim(test)
		shouldEqualWithoutTrim(input, test)
	}

	/// Same as `shouldEqual`, but does no trimming of `test`
	static fun shouldEqualWithoutTrim(input: String, test: String) {
		overall++
		var lexe = Lexer.tokenize(Buffer.from(input), "TEST")
		try {
			var parsed = Parser.toNode(Parser.parseNodes(lexe, new Project()))
			var res = stringify(parsed)
			if (test != res) {
				throw 'TestParser test fail: `\(input)`\n!==: `\(test)`\nGot: `\(res)`\nParsed: `\(parsed)`'
			}
		} catch (e: Any) {
			console.log(e.toString())
			throw 'TestParser test fail: `\(input)` failed to parse'
		}
		passed++
	}

	/// Operates `shouldEqual` on all key-value pairs of `input => test`
	static fun shouldAllEqual(map: [String : String]) {
		for input in map.keys() {
			var test = map.get(input)
			shouldEqual(input, test)
		}
	}

	/// Does `shouldEqual` without trimming `=> test` parts
	static fun shouldAllEqualWithoutTrim(map: [String : String]) {
		for input in map.keys() {
			var test = map.get(input)
			shouldEqualWithoutTrim(input, test)
		}
	}

	static fun shouldError(input: String) {
		overall++
		try {
			var lexe = Lexer.tokenize(Buffer.from(input), "TEST")
			var parser = Parser.toNode(Parser.parseNodes(lexe, new Project()))
		}
		catch(e: Any) {
			passed++
			return
		}
		throw 'TestParser test fail: `\(input)` did not throw exception.'
	}

	static fun shouldAllError(input: [String]) {
		for str in input {
			shouldError(str)
		}
	}

	/// Removes all internal and trailing whitespace and newlines
	static fun deepTrim(s: String) {
		return s.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('')
	}

	/// Creates a testable consistent string representation of node
	static fun stringify(node: Node): String {
		switch node {
			case null: return '<!--null-->'

			// Have no sub-nodes
			case Node.String(s): return 'String(\(s))'
			case Node.Ident(s): return 'Ident(\(s))'
			case Node.Bool(b): return 'Bool(\(b))'
			case Node.This: return 'This'
			case Node.Super: return 'Super'
			case Node.Int(s): return 'Int(\(s))'
			case Node.Float(s): return 'Float(\(s))'
			case Node.Null: return 'Null'
			case Node.Break: return 'Break'
			case Node.Continue: return 'Continue'

			// Have sub-nodes
			case Node.Is(expr, type): return 'As(' + stringify(expr) + "," + stringifyType(type) + ")"
			case Node.As(expr, kind, type): return 'As(' + stringify(expr) + "," + Token.stringify(kind) + "," + stringifyType(type) + ")"
			case Node.Binop(a, op, b): return 'Binop(' + stringify(a) + ',' + Token.stringify(op) + ',' + stringify(b) + ')'
			case Node.AssignOp(a, op, b): return 'AssignOp(' + stringify(a) + ',' + Token.stringify(op) + ',' + stringify(b) + ')'
			case Node.Block(els): return 'Block(' + stringifyNodeArray(els) + ')'
			case Node.Var(name, t, expr, const, external):
			return 'Var(\(name),' + ((t != null) ? stringifyType(t) : "null") +
			"," + ((expr != null) ? stringify(expr) : "null") +',\(const),\(external))'
			//case Node.Vars(vars): return 'Vars(' + stringifyNodeArray(vars) + ")"

			case Node.Function(name, expr, vars, rettype, external):
				return 'Function(\(name),'
				+ (expr == null ? "null" : stringify(expr))
				+ "," + stringifyNodeArray(vars) + ',' + ((rettype != null) ? stringifyType(rettype) : "null") + ",\(external))"

			case Node.Arrow(expr, vars, rettype):
				return 'Arrow('
				+ (expr == null ? "null" : stringify(expr))
				+ "," + stringifyNodeArray(vars) + ',' + ((rettype != null) ? stringifyType(rettype) : "null") + ")"

			case Node.Call(e, el, argNames):
				var res = 'Call(' + stringify(e) + ',['
				for i in el.length {
					res += (argNames[i] == null) ? "" : argNames[i] + ":"
					res += stringify(el[i]) + ((i != el.length - 1) ? "," : "")
				}
				return res + "])"

			case Node.Parenthesis(e): return 'Parenthesis(' + stringify(e) + ')'
			case Node.Return(e): return 'Return(' + stringify(e) + ')'
			case Node.Throw(e): return 'Throw(' + stringify(e) + ')'
			case Node.Enum(t, els): return 'Enum(' + stringifyType(t) + ',' + stringifyNodeArray(els) + ')'
			case Node.Module(path, els):
				return "Module(" + path + "," + stringifyNodeArray(els) + ")"
			case Node.Import(els, path):
				fun stringifyImportNode(node: ImportNode): String {
					switch node {
						case ImportNode.Lower(name): return 'Lower(\(name))'
						case ImportNode.Upper(name): return 'Upper(\(name))'
						case ImportNode.AllTheThings(_): return '*'
						case ImportNode.As(left, right):  return stringifyImportNode(left) + '{as}' + stringifyImportNode(right)
					}
				}

				return "Import([" + [for p in els stringifyImportNode(p)].join(',') + "]," + path + ")"

			case Node.Map(k, v): return 'Map([' + stringifyArray(k) + '],[' + stringifyArray(v) + '])'

			case Node.Class(type, extend, implement, fields, external):
				var res = "Class(" + stringifyType(type) + ","
				res += (extend != null) ? stringifyType(extend) : "null" + ","
				res += stringifyNodeTypeArray(implement) + ","
				res += stringifyNodeArray(fields) + ","
				res += external + ")"
				return res

			case Node.New(path, t, args, names, values, argNames):
				return 'New([' + path.join('.') + '],' + stringifyType(t) + ',' + stringifyNodeArray(args) + ',[' + names.join(",") + "]," + stringifyNodeArray(values) + ",[" + argNames.join(',') + "])"

			case Node.NodeTypeValue(type): return 'NodeTypeValue(' + stringifyType(type) + ")"
			case Node.TypeAlias(alias, value): return 'TypeAlias(' + stringifyType(alias) + "," + stringifyType(value) + ")"
			case Node.Dot(l, r): return "Dot(" + stringify(l) + "," + r + ")"
			case Node.DotUpper(l, r): return "DotUpper(" + stringify(l) + "," + r + ")"

			case Node.Private(expr): return 'Private(' + stringify(expr) + ')'
			case Node.If(econd, eif, eelse):
				return 'If(' + stringifyNodeArray(econd) + ',' + stringify(eif) + ',' + stringify(eelse) + ')'
			case Node.Array(el): return 'Array(' + stringifyNodeArray(el) + ')'
			case Node.Unop(op, postfix, e): return 'Unop(' + Token.stringify(op) + ',' + postfix + ',' + stringify(e) + ')'
			case _: throw '<!--' + node + '-->'
		}
	}

	static fun stringifyArray(nodes: [Node]): String {
		return [for node in nodes stringify(node)].join(',')
	}

	static fun stringifyNodeArray(arr: [Node]) {
		return "[" + stringifyArray(arr) + "]"
	}

	static fun stringifyNodeTypeArray(arr: [NodeType]) {
		return "[" + [for e in arr stringifyType(e)].join(',') + "]"
	}

	// Creates a testable consistent string representation of type
	static fun stringifyType(node: NodeType): String {
		switch node {
			case NodeType.Type(s): return 'Type(\(s))'
			case NodeType.ParametricType(name, params): return 'ParametricType(\(name),[' + [for p in params stringifyType(p)].join(',') + "])"
			case NodeType.Function(args, rettype): return 'Function([' + [for e in args stringifyType(e)].join(',') + "]," + stringifyType(rettype) + ')'
			case NodeType.Object(names, types): return 'Object([' + names.join(',') + "],[" + [for e in types stringifyType(e)].join(',') +"])"
			case NodeType.Optional(type): return 'Optional(' + stringifyType(type) + ')'
			case _: throw '<!--' + node + '-->'
		}
	}
}
