// The MIT License
//
// Copyright (c) 2020 Oleg Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Basic

declare class Void {}
declare class Any {}
declare class Int {}
declare class Float {}
declare class Bool {}

declare class String {
	let length: Int
	function toUpperCase(): String
	function toLowerCase(): String
	function endsWith(str: String): Bool
	function startsWith(str: String): Bool
	function charAt(index: Int): String
	function indexOf(str: String, startIndex: Int?): Int
	function lastIndexOf(str: String, startIndex: Int?): Int
	function split(delimiter: String): [String]
	function toString(): String
	function substring(startIndex: Int, endIndex: Int?): String
	static function fromCharCode(code: Int): String
	function charCodeAt(index: Int): Int?
	function trim(): String
	function substr(pos: Int, len: Int?): String
}

declare class Array {
	let length: Int
	function concat(a: [T]): [T]
	function join(sep: String): String
	function pop(): T?
	function push(x: T): Int
	function includes(x: T): Bool
	function reverse(): Void
	function shift(): T?
	function slice(pos: Int, end: Int?): [T]
	function sort(f: (T, T)=>Int): Void
	function splice(pos: Int, len: Int): [T]
	function toString(): String
	function unshift(x: T): Void
	function indexOf(x: T, fromIndex: Int?): Int
	function lastIndexOf(x: T, fromIndex: Int?): Int
	function filter(f: T=>Bool): [T]
	function map(f: T=>T): [T]
	function reduce(f: (accumulator:T, currentValue:T)=>T): T
	function copyWithin(target: Int, start: Int?, end: Int?): [T]
	function fill(value: T, start: Int, end: Int): [T]
}

declare class Map {
	new ()
	function get(k: K): V
	function set(k: K, v: V): Void
	function has(k: K): Bool
	function keys(): [K]
}

// Extra

declare class Console {
	function log(str: String): Void
	function trace(str: String): Void
	function error(data: Any, message: String?): Void
}

declare let console: Console

declare class JSON {
	static function parse(text: String): Any
	static function stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String
}

declare class Math {
	static function abs(v: Float): Float
	static function acos(v: Float): Float
	static function asin(v: Float): Float
	static function atan(v: Float): Float
	static function atan2(y: Float, x: Float): Float
	static function ceil(v: Float): Int
	static function cos(v: Float): Float
	static function exp(v: Float): Float
	static function floor(v: Float): Int
	static function log(v: Float): Float
	static function max(a: Float, b: Float): Float
	static function min(a: Float, b: Float): Float
	static function pow(v: Float, exp: Float): Float
	static function random(): Float
	static function round(v: Float): Int
	static function sin(v: Float): Float
	static function sqrt(v: Float): Float
	static function tan(v: Float): Float
}

declare class Buffer<T> /*implements ArrayAccess<T>*/ {
	static function alloc/*<T>*/(size: Int): Buffer<T>
	let length: Int
	let buffer: ArrayBuffer
	new (bufsize: Int)
	function slice(offset: Int): Buffer
	@indexSet(value, key)
	function writeUInt8(value: Int, offset: Int): Int
	function writeUInt16LE(value: Int, offset: Int): Int
	function writeUInt32LE(value: Int, offset: Int): Int
	function writeDoubleLE(value: Float, offset: Int): Int
	function write(string: String, offset: Int, encoding: String): Int
	@indexGet
	function readUInt8(offset: Int): Int
	function readUInt16LE(offset: Int): Int
	function readUInt32LE(offset: Int): Int
	function toString(encoding: String, start: Int?, end: Int?): String
	static function from/*<T>*/(string: String, encoding: String?): Buffer<T>
}

declare class ArrayBuffer {}

declare class Fs {
	static function writeFileSync(path: String, data: String): Void
	static function readdirSync(path: String): [String]
	static function readFileSync(path: String): Buffer
	static function lstatSync(path: String): Any
	static function existsSync(path: String): Bool
	static function mkdirSync(path: String): Void
	static function readSync(fd: Int, buffer: Buffer, offset: Int, length: Int, position: Int): Int
}

declare class Path {
	static let sep: String
	static function resolve(path: String): String
	static function parse(path: String): ParsedPath
	static function join(...path: String): String
}

declare class ParsedPath {
	var root: String
	var dir: String
	var base: String
	var ext: String
	var name: String
}

declare class Process {
	static let stdin: ProcessStd
	static let stdout: ProcessStd
	static let stderr: ProcessStd
	static let argv: [String]
	@haltsProgram
	static function exit(errorCode: Int): Void
	static let versions: { node: String }
	function cwd(): String
	let env: Any
}

declare class ProcessStd {
	function write(text: String): Void
	function once(name: String, callback: ()=>Void): Void
	let fd: Any
}

declare function parseInt(text: String): Int
declare let __dirname: String
declare let process: ProcessModule
declare function eval(code: String): Any

declare class Date {
	static function now(): Float
}

declare class Reflect {
	static function has(object: Any, name: String): Bool
	static function get(object: Any, name: String): Any?
	static function set(object: Any, name: String, value: Any?): Bool
	static function ownKeys(object: Any): [String]
}

declare class ProcessModule {
	let stdin: ProcessStd
	let stdout: ProcessStd
	let stderr: ProcessStd
	let argv: [String]
	@haltsProgram
	function exit(errorCode: Int): Void
	function cwd(): String
	let versions: { node: String } // todo not require value = for lets in declare
	let env: Any // todo not require value = for lets in declare
	let platform: String
}
