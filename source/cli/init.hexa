// The Hexa Compiler
// Copyright (C) 2021  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Asks a couple of questions and creates hexa.json
fun init() {
	if Fs.existsSync("hexa.json") {
		let create = question("Hexa package 'hexa.json' already exists here. Create new? (no): ")
		if create == '' or not isYes(create) {
			Process.exit(1)
		}
	}

	var currentDirTmp = process.cwd().split(Path.sep)
	var packageFileName = process.cwd() + Path.sep + "hexa.json"
	var currentDir = currentDirTmp[currentDirTmp.length - 1]
	var name = question('Enter package name (\(currentDir)): ')
	if name == "" {
		name = currentDir
	}

	var version = question("Enter package version (1.0.0): ")
	if version == "" {
		version = "1.0.0"
	}

	var description = question("Enter package description: ")

	var main = question("Enter main file (main.hexa): ")
	if main == "" {
		main = "main.hexa"
	}

	let target = {
		name: "default",
		generator: "js",
		output: name,
		options: []
	}

	let generator = question("Enter target (Node.js/JavaScript):\n1. Node.js/JavaScript\n2. Web/JavaScript\n3. Raw/JavaScript\n> ").trim()

	if generator == '2' {
		// Web/JavaScript
		target.options.push('browser')
		target.output += '.js'
	} else if generator == '3' {
		// Raw/JavaScript
		target.output += '.js'
	} else {
		// Node.js/JavaScript
		target.options.push('nodejs')
		target.output += '.js'
	}

	while not main.endsWith(".hexa") {
		Process.stdout.write("Wrong file name. Must end with '.hexa'.\n")
		main = question("Enter main file (main.hexa): ")
	}

	let user = require("os").userInfo().username ?? process.env.USERNAME
	var author = question("Enter package author name (\(user)): ")

	if author == '' {
		author = user
	}

	var license = question("Enter license (LGPL-3.0-only): ")

	if license == '' {
		license = 'LGPL-3.0-only'
	}

	let pack: Package = {
		name: name, version: version, description: description,
		author: author, license: license, targets: [ target ], entry: main.split('.')[0]
	}

	let extras = []

	var addGit = false
	if Fs.existsSync('.git') {
		if !Fs.existsSync('.gitignore') || !Fs.existsSync('.gitattributes') {
			let confirm = question('Create additional git files(.gitignore, .gitattributes)? (yes): ').toLowerCase().trim()
			if isYes(confirm) {
				if !Fs.existsSync('.gitignore') {
					extras.push('.gitignore')
				}
				if !Fs.existsSync('.gitattributes') {
					extras.push('.gitattributes')
				}
				addGit = true
			}
		}
	}

	let addMain = Fs.existsSync(main) == false
	if addMain {
		extras.push(main)
	}

	// Convert to \r\n
	let packageStr = JSON.stringify(pack, null, "\t").split('\r\n').join('\n').split('\n').join('\r\n')
	let extrasStr = extras.length > 0? '\nAnd \'' + extras.join('\', \'') + '\'' : ''

	let answ = question('About to write to: \(packageFileName):\n\(packageStr)\(extrasStr)\nIs this ok? (yes): ')
	if not isYes(answ) {
		console.log('Exiting without changes')
		Process.exit(1)
	}

	// Handle yes
	Fs.writeFileSync("hexa.json", packageStr + '\r\n')

	if addMain, !Fs.existsSync(main) {
		Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")\r\n')
	}

	if addGit, !Fs.existsSync('.gitattributes') {
		Fs.writeFileSync('.gitattributes', [
		'# Auto detect text files and perform LF normalization',
		'* text=auto',
		''
		].join('\r\n'))
	}

	if addGit, !Fs.existsSync('.gitignore') {
		Fs.writeFileSync('.gitignore', [
		'# Mac & Win',
		'*~',
		'._*',
		'*DS_Store*',
		'.DS_Store',
		'.DS_Store?',
		'.Spotlight-V100',
		'.Trashes',
		'ehthumbs.db',
		'Thumbs.db',
		'*Thumbs.db',
		'__MACOSX',
		'',
		'# Custom',
		'*.map',
		target.output, // Re-generated on each compilation
		'node_modules',
		''
		].join('\r\n'))
	}

	Process.stdout.write("Hexa package initialized!")
}

// Detects `y`, `yes` and empty answer as `true`
fun isYes(answer: String): Bool {
	return ['y','yes',''].includes(answer.toLowerCase().trim())
}
