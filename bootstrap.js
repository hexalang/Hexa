// Generated by Hexa https://hexalang.github.io
printf=console.log
// The Hexa Compiler
// LICENSE LGPL-3.0-only

printInt=(v)=>console.log(v,v,v)
;(function() {
	"use strict"
	const $global = typeof(window) === "undefined"? global : window
	if (typeof($global.require) === "undefined") { $global.require = function () {} };
	function $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };
	const Fs = require("fs")
	const path = require("path")
	const process_853 = require("process")
	var Token = {
		stringify: (token, param = null) => { {
			const temp = (token);
			switch (temp) {
			case 70: {
				return '@'
			} break;

			case 83: {
				return '$'
			} break;

			case 78: {
				return '#'
			} break;

			case 71: {
				return ']'
			} break;

			case 72: {
				return '['
			} break;

			case 73: {
				return '}'
			} break;

			case 74: {
				return '{'
			} break;

			case 76: {
				return ':'
			} break;

			case 75: {
				return ','
			} break;

			case 123: {
				return '<!--default-->'
			} break;

			case 77: {
				return '.'
			} break;

			case 0: {
				return '<!--eof-->'
			} break;

			case 98: {
				return '...'
			} break;

			case 58: {
				return 'as'
			} break;

			case 3: {
				return 'break'
			} break;

			case 4: {
				return 'case'
			} break;

			case 6: {
				return 'catch'
			} break;

			case 7: {
				return 'class'
			} break;

			case 8: {
				return 'continue'
			} break;

			case 9: {
				return 'do'
			} break;

			case 10: {
				return 'else'
			} break;

			case 11: {
				return 'enum'
			} break;

			case 12: {
				return 'extends'
			} break;

			case 13: {
				return 'declare'
			} break;

			case 14: {
				return 'false'
			} break;

			case 15: {
				return 'for'
			} break;

			case 21: {
				return 'fun'
			} break;

			case 17: {
				return 'if'
			} break;

			case 18: {
				return 'implements'
			} break;

			case 2: {
				return 'import'
			} break;

			case 20: {
				return 'in'
			} break;

			case 22: {
				return 'interface'
			} break;

			case 23: {
				return 'let'
			} break;

			case 25: {
				return 'new'
			} break;

			case 26: {
				return 'null'
			} break;

			case 29: {
				return 'private'
			} break;

			case 31: {
				return 'return'
			} break;

			case 32: {
				return 'static'
			} break;

			case 59: {
				return 'super'
			} break;

			case 33: {
				return 'switch'
			} break;

			case 34: {
				return 'this'
			} break;

			case 35: {
				return 'throw'
			} break;

			case 36: {
				return 'true'
			} break;

			case 37: {
				return 'try'
			} break;

			case 40: {
				return 'var'
			} break;

			case 41: {
				return 'while'
			} break;

			case 111: {
				return '+'
			} break;

			case 112: {
				return '&'
			} break;

			case 90: {
				return '=>'
			} break;

			case 91: {
				return '='
			} break;

			case 92: {
				return '&&'
			} break;

			case 93: {
				return '||'
			} break;

			case 86: {
				return '--'
			} break;

			case 94: {
				return '/'
			} break;

			case 95: {
				return '=='
			} break;

			case 96: {
				return '>'
			} break;

			case 97: {
				return '>='
			} break;

			case 87: {
				return '++'
			} break;

			case 110: {
				return '\\'
			} break;

			case 99: {
				return '<'
			} break;

			case 100: {
				return '<='
			} break;

			case 101: {
				return '%'
			} break;

			case 102: {
				return '*'
			} break;

			case 88: {
				return '~'
			} break;

			case 89: {
				return '!'
			} break;

			case 103: {
				return '!='
			} break;

			case 104: {
				return '|'
			} break;

			case 105: {
				return '<<'
			} break;

			case 106: {
				return '>>'
			} break;

			case 107: {
				return '-'
			} break;

			case 108: {
				return '>>>'
			} break;

			case 109: {
				return '^'
			} break;

			case 113: {
				return '?.'
			} break;

			case 79: {
				return ')'
			} break;

			case 80: {
				return '('
			} break;

			case 81: {
				return '?'
			} break;

			case 82: {
				return ';'
			} break;

			case 1: {
				return '_'
			} break;

			case 61: {
				return /*?*/((param == null))? ('TitleCase') : param
			} break;

			case 64: {
				return /*?*/((param == null))? ('string') : ('\'' + (param) + '\'')
			} break;

			case 66: {
				return /*?*/((param == null))? ('backtick') : ('`' + (param) + '`')
			} break;

			case 62: {
				return /*?*/((param == null))? ('identifier') : param
			} break;

			case 63: {
				return /*?*/((param == null))? ('integer') : param
			} break;

			case 60: {
				return /*?*/((param == null))? ('float') : param
			} break;

			case 65: {
				return ('///' + (param) + '')
			} break;

			case 57: {
				return 'is'
			} break;
			};
		} },
	}
	var NiceName = {
		Local: (name)=>[0,name],
		Native: (name_6250)=>[1,name_6250],
		Field: (index)=>[2,index],
		ClassField: (index_6255,ref)=>[3,index_6255,ref],
	}
	var NiceStatement = {
		Statements: (el)=>[0,el],
		Block: (el_6263)=>[1,el_6263],
		Call: (e,args,expects,kind)=>[2,e,args,expects,kind],
		Var: (name_6274,expr,type)=>[3,name_6274,expr,type],
		Const: (name_6281,expr_6283,type_6285)=>[4,name_6281,expr_6283,type_6285],
		Function: (name_6290,expr_6292,args_6294,defaults,funcType)=>[5,name_6290,expr_6292,args_6294,defaults,funcType],
		Return: (e_6303)=>[6,e_6303],
		If: (econd,eif,eelse)=>[7,econd,eif,eelse],
		Try: (expr_6312,t,v,catches,temp)=>[8,expr_6312,t,v,catches,temp],
		Throw: (value)=>[9,value],
		Assign: (name_6325,value_6327,to)=>[10,name_6325,value_6327,to],
		Assignop: (name_6333,op,value_6336)=>[11,name_6333,op,value_6336],
		For: (name_6341,over,by)=>[12,name_6341,over,by],
		While: (econd_6348,e_6350,pre)=>[13,econd_6348,e_6350,pre],
		Increment: (e_6356)=>[14,e_6356],
		Decrement: (e_6359)=>[15,e_6359],
		Switch: (expr_6362,cases,statements,guards,binds)=>[16,expr_6362,cases,statements,guards,binds],
		SuperConstructor: (args_6373)=>[19,args_6373],
	}
	Object.defineProperty(NiceStatement, "Continue", { get: function() { return [17] }})
	Object.defineProperty(NiceStatement, "Break", { get: function() { return [18] }})
	var NiceExpression = {
		String: (s)=>[0,s],
		Int: (v_6379)=>[1,v_6379],
		MetaInt: (v_6382,meta,type_6385)=>[2,v_6382,meta,type_6385],
		Float: (v_6390)=>[3,v_6390],
		Ident: (s_6393,type_6395)=>[6,s_6393,type_6395],
		Reference: (name_6399,type_6401)=>[7,name_6399,type_6401],
		NativeIdent: (s_6405)=>[8,s_6405],
		This: (me)=>[10,me],
		Dot: (expr_6410,name_6412,result)=>[11,expr_6410,name_6412,result],
		Field: (expr_6418,field)=>[12,expr_6418,field],
		DynamicField: (expr_6423,name_6425,result_6427)=>[13,expr_6423,name_6425,result_6427],
		Call: (e_6432,args_6434,result_6436,kind_6438)=>[14,e_6432,args_6434,result_6436,kind_6438],
		New: (e_6444,args_6446,result_6448)=>[15,e_6444,args_6446,result_6448],
		Binop: (a,op_6454,b,result_6457)=>[16,a,op_6454,b,result_6457],
		Function: (name_6463,expr_6465,args_6467,defaults_6469,funcType_6471)=>[17,name_6463,expr_6465,args_6467,defaults_6469,funcType_6471],
		Arrow: (expr_6478,args_6480,defaults_6482,types,returns,funcType_6486)=>[18,expr_6478,args_6480,defaults_6482,types,returns,funcType_6486],
		Parenthesis: (inner)=>[19,inner],
		Object: (names,el_6497,types_6499)=>[20,names,el_6497,types_6499],
		Array: (values,arrayType)=>[21,values,arrayType],
		Map: (keys,values_6509,keyType,valueType)=>[22,keys,values_6509,keyType,valueType],
		Unop: (op_6517,postfix,e_6520)=>[23,op_6517,postfix,e_6520],
		Elvis: (nullable,othewise)=>[24,nullable,othewise],
		If: (econd_6529,eif_6531,eelse_6533)=>[25,econd_6529,eif_6531,eelse_6533],
		Index: (expr_6538,index_6540)=>[26,expr_6538,index_6540],
		UnsafeBitCast: (expr_6544,to_6546)=>[27,expr_6544,to_6546],
		Is: (expr_6550,of)=>[28,expr_6550,of],
		Assignop: (name_6555,op_6557,value_6559)=>[29,name_6555,op_6557,value_6559],
		NativeOperator: (kind_6564,args_6566,name_6568)=>[30,kind_6564,args_6566,name_6568],
		EnumTag: (expr_6573)=>[31,expr_6573],
		Enum: (type_6576,tagName,tag,args_6580)=>[32,type_6576,tagName,tag,args_6580],
		EnumParameter: (expr_6586,index_6588)=>[33,expr_6586,index_6588],
	}
	Object.defineProperty(NiceExpression, "True", { get: function() { return [4] }})
	Object.defineProperty(NiceExpression, "False", { get: function() { return [5] }})
	Object.defineProperty(NiceExpression, "Null", { get: function() { return [9] }})
	Object.defineProperty(NiceExpression, "Underscore", { get: function() { return [34] }})
	var Node = {
		stringify: (node) => { {
			const temp = (node);
			switch (temp&&temp[0]) {
			case 0: {
				const s_6876 = temp[1];
				return ('\'' + (s_6876) + '\'')
			} break;

			case 1: {
				const name_6878 = temp[1];
				return name_6878
			} break;

			case 2: {
				const b_6880 = temp[1];
				return /*?*/(b_6880)? ('true') : 'false'
			} break;

			case 5: {
				const s_6882 = temp[1];
				return s_6882.toString()
			} break;

			case 7: {
				const s_6884 = temp[1];
				return s_6884.toString()
			} break;

			case 8: {
				return 'null'
			} break;

			case 3: {
				return 'this'
			} break;

			case 15: {
				const expr_6886 = temp[1];
				return '(' + Node.stringify(expr_6886) + ')'
			} break;

			case 34: {
				const expr_6888 = temp[1];
				const index_6890 = temp[2];
				return Node.stringify(expr_6888) + '[' + Node.stringify(index_6890) + ']'
			} break;

			case 29: {
				const expr_6892 = temp[1];
				const name_6894 = temp[2];
				return Node.stringify(expr_6892) + '.' + name_6894
			} break;

			case 30: {
				const expr_6896 = temp[1];
				const name_6898 = temp[2];
				return Node.stringify(expr_6896) + '.' + name_6898
			} break;

			case 13: {
				const e_6900 = temp[1];
				const args_6902 = temp[2];
				const argNames_6904 = temp[3];
				{
					const arg = [];
					{
						let i = 0;
						let it = 0;
						let at = args_6902.length;
						while (it < at) {
							i = it;
							it++;
							{
								let step = 0;
								const name_6911 = argNames_6904[i];
								if (step == 0 && name_6911 != null) { step = 1 };
								if (step == 1) { arg.push(name_6911 + ': ' + Node.stringify(args_6902[i])) } else {
									arg.push(Node.stringify(args_6902[i]));
								};
							};
						};
					};
					return Node.stringify(e_6900) + '(' + arg.join(', ') + ')';
				}
			} break;

			case 32: {
				const elements_6913 = temp[1];
				return '[' + (() => {
					const result = [];
					const value_6916 = elements_6913;
					for (const el of $toIterator(value_6916)) result.push(Node.stringify(el));
					return result;
				})().join(', ') + ']'
			} break;

			case 10: {
				const a_6918 = temp[1];
				const op_6920 = temp[2];
				const b_6922 = temp[3];
				return Node.stringify(a_6918) + ' ' + Token.stringify(op_6920) + ' ' + Node.stringify(b_6922)
			} break;

			case 38: {
				const names_6924 = temp[1];
				const el_6926 = temp[2];
				return '{' + (() => {
					const result_6928 = [];
					const value_6930 = el_6926.length;
					for (const i of $toIterator(value_6930)) result_6928.push(names_6924[i] + ': ' + Node.stringify(el_6926[i]));
					return result_6928;
				})().join(', ') + '}'
			} break;

			case 51: {
				const t_6932 = temp[1];
				return DataHelper.extractTypeName(t_6932)
			} break;

			case 47: {
				const f = temp[1];
				return 'static ' + Node.stringify(f)
			} break;

			default:
			return '...'
			};
		} },
		String: (s)=>[0,s],
		Ident: (name_6608)=>[1,name_6608],
		Bool: (b)=>[2,b],
		Int: (s_6613)=>[5,s_6613],
		MetaInt: (s_6616,meta)=>[6,s_6616,meta],
		Float: (s_6621)=>[7,s_6621],
		TypeAlias: (alias,value)=>[9,alias,value],
		Binop: (a,op,b_6630)=>[10,a,op,b_6630],
		AssignOp: (a_6635,op_6637,b_6639)=>[11,a_6635,op_6637,b_6639],
		Block: (el)=>[12,el],
		Call: (e,args,argNames)=>[13,e,args,argNames],
		If: (econd,eif,eelse,ternary)=>[14,econd,eif,eelse,ternary],
		Parenthesis: (inner)=>[15,inner],
		Return: (e_6662)=>[16,e_6662],
		Throw: (e_6665)=>[17,e_6665],
		Unop: (op_6668,postfix,e_6671)=>[20,op_6668,postfix,e_6671],
		While: (econd_6676,e_6678,pre)=>[21,econd_6676,e_6678,pre],
		Function: (name_6684,expr,vars,retType,external)=>[22,name_6684,expr,vars,retType,external],
		Arrow: (expr_6695,vars_6697,retType_6699)=>[23,expr_6695,vars_6697,retType_6699],
		Var: (name_6704,t,expr_6707,const_6709,external_6711)=>[24,name_6704,t,expr_6707,const_6709,external_6711],
		Vars: (vars_6718)=>[25,vars_6718],
		Class: (t_6721,extend,implement,fields,external_6726,kind)=>[26,t_6721,extend,implement,fields,external_6726,kind],
		Property: (v,g,s_6737)=>[27,v,g,s_6737],
		Try: (expr_6742,t_6744,v_6746,catches)=>[28,expr_6742,t_6744,v_6746,catches],
		Dot: (expr_6753,name_6755)=>[29,expr_6753,name_6755],
		DotUpper: (expr_6759,name_6761)=>[30,expr_6759,name_6761],
		New: (path_6765,t_6767,args_6769,fields_6771,el_6773,argNames_6775)=>[31,path_6765,t_6767,args_6769,fields_6771,el_6773,argNames_6775],
		Array: (elements)=>[32,elements],
		Map: (keys,values_6786)=>[33,keys,values_6786],
		Index: (expr_6790,index)=>[34,expr_6790,index],
		Switch: (exprs,conds,guards,cases)=>[35,exprs,conds,guards,cases],
		Module: (path_6803,el_6805)=>[36,path_6803,el_6805],
		Import: (el_6809,path_6811)=>[37,el_6809,path_6811],
		Object: (names,el_6816)=>[38,names,el_6816],
		Enum: (t_6820,fields_6822,valuesType,extend_6825)=>[39,t_6820,fields_6822,valuesType,extend_6825],
		EnumExtract: (path_6831,bind,expr_6834)=>[40,path_6831,bind,expr_6834],
		Is: (expr_6839,t_6841)=>[43,expr_6839,t_6841],
		As: (expr_6845,kind_6847,t_6849)=>[44,expr_6845,kind_6847,t_6849],
		Static: (field)=>[47,field],
		Private: (field_6856)=>[48,field_6856],
		For: (name_6859,over,by,range)=>[49,name_6859,over,by,range],
		Elvis: (nullable,othewise)=>[50,nullable,othewise],
		NodeTypeValue: (type)=>[51,type],
	}
	Object.defineProperty(Node, "This", { get: function() { return [3] }})
	Object.defineProperty(Node, "Super", { get: function() { return [4] }})
	Object.defineProperty(Node, "Null", { get: function() { return [8] }})
	Object.defineProperty(Node, "Break", { get: function() { return [18] }})
	Object.defineProperty(Node, "Continue", { get: function() { return [19] }})
	Object.defineProperty(Node, "EnumConstructor", { get: function() { return [41] }})
	Object.defineProperty(Node, "EnumPattern", { get: function() { return [42] }})
	Object.defineProperty(Node, "Underscore", { get: function() { return [45] }})
	Object.defineProperty(Node, "Interval", { get: function() { return [46] }})
	var NodeType = {
		stringify: (nodeType) => { return DataHelper.extractTypeName(nodeType) },
		Optional: (type_7013)=>[0,type_7013],
		Type: (name_7016)=>[1,name_7016],
		ParametricType: (name_7019,params)=>[2,name_7019,params],
		Function: (args_7024,ret)=>[3,args_7024,ret],
		FunctionArg: (name_7029,type_7031,defaultValue)=>[4,name_7029,type_7031,defaultValue],
		Object: (names_7037,types)=>[5,names_7037,types],
	}
	var ImportNode = {
		Lower: (name_7044)=>[0,name_7044],
		Upper: (name_7047)=>[1,name_7047],
		As: (left,right)=>[3,left,right],
	}
	Object.defineProperty(ImportNode, "AllTheThings", { get: function() { return [2] }})
	var Type = {
		stringify: (type_7097) => { {
			const temp = (type_7097);
			switch (temp&&temp[0]) {
			case 4: {
				const type_7100 = temp[1];
				const generic_7102 = temp[2];
				{
					{
						let step = 0;
						const gen = generic_7102;
						if (step == 0 && gen != null) { step = 1 };
						if (step == 1) { return DataHelper.nameOf(type_7100.parent) + '<' + (() => {
							const result = [];
							const value_7107 = gen;
							for (const g of $toIterator(value_7107)) result.push(Type.stringify(g));
							return result;
						})().join(', ') + '>' };
					};
					return DataHelper.nameOf(type_7100.parent);
				}
			} break;

			case 3: {
				const type_7109 = temp[1];
				return DataHelper.nameOf(type_7109.parent)
			} break;

			case 10: {
				const args_7111 = temp[1];
				const returns_7113 = temp[2];
				return '(' + (() => {
					const result_7115 = [];
					const value_7117 = args_7111;
					for (const arg of $toIterator(value_7117)) result_7115.push(Type.stringify(arg));
					return result_7115;
				})().join(', ') + ') => ' + Type.stringify(returns_7113)
			} break;

			case 1: {
				const handle_7119 = temp[1];
				{
					{
						let step_7121 = 0;
						const value_7123 = handle_7119.value;
						if (step_7121 == 0 && value_7123 != null) { step_7121 = 1 };
						if (step_7121 == 1) { return Type.stringify(value_7123) + '?' };
					};
					return 'Unknown?';
				}
			} break;

			case 2: {
				const type_7125 = temp[1];
				return Type.stringify(type_7125) + '?'
			} break;

			case 6: {
				const type_7127 = temp[1];
				return DataHelper.nameOf(type_7127.parent)
			} break;

			case 7: {
				const type_7129 = temp[1];
				const tag_7131 = temp[2];
				return DataHelper.nameOf(type_7129.parent) + '.' + tag_7131.toString()
			} break;

			case 0: {
				const handle_7133 = temp[1];
				{
					{
						let step_7135 = 0;
						const value_7137 = handle_7133.value;
						if (step_7135 == 0 && value_7137 != null) { step_7135 = 1 };
						if (step_7135 == 1) { return Type.stringify(value_7137) };
					};
					return 'Unknown';
				}
			} break;

			default:
			return '~?' + type_7097 + '?~'
			};
		} },
		Unknown: (handle)=>[0,handle],
		UnknownNullable: (handle_7057)=>[1,handle_7057],
		Nullable: (type)=>[2,type],
		Class: (type_7062)=>[3,type_7062],
		ClassInstance: (type_7065,generic)=>[4,type_7065,generic],
		SuperOf: (type_7070)=>[5,type_7070],
		Enum: (type_7073)=>[6,type_7073],
		EnumInstance: (type_7076,tag)=>[7,type_7076,tag],
		EnumConstructor: (type_7081,tag_7083)=>[8,type_7081,tag_7083],
		Alias: (value)=>[9,value],
		Function: (args,returns)=>[10,args,returns],
		Struct: (names,types)=>[11,names,types],
	}
	var process_850 = $global.process
	var console_696 = $global.console
	var Normalizer = class {
		constructor(project) {
			this.niceProject = new NiceProject()
			this.keywords = []
			this.reservedGlobals = []
			this.collected = []
			this.nativeEnums = false
			this.globalAccessor = '<!-- global -->'
			this.inline = new Map()
			this.nonInlineRead = new Map()
			this.scopes = [new Map()]
			this.globals = []
			this.id = Math.round(Math.random() * 123)
			this.parentNames = new Map()
		this.project = project };
		normalize() {
			for (const global of $toIterator(this.reservedGlobals)) {
				this.addToScope(global);
			};
			for (const file of $toIterator(this.project.moduleInfo)) {
				for (const e of $toIterator(file.nodes)) {
					const temp = (e);
					switch (temp&&temp[0]) {
					case 26: {
						const t = temp[1];
						const ext = temp[2];
						const impl = temp[3];
						const fields = temp[4];
						const external = temp[5];
						this.renameClassFields(fields)
					} break;

					case 39: {
						const t_903 = temp[1];
						const fields_905 = temp[2];
						const valuesType = temp[3];
						this.renameClassFields(fields_905)
					} break;

					case 24: {
						const name = temp[1];
						const t_909 = temp[2];
						const expr = temp[3];
						const const_912 = temp[4];
						const external_914 = temp[5];
						{
							const atts = this.project.mapDecorators.get(e);
							{
								let step = 0;
								const native = Normalizer.getAtt(atts, 'native');
								if (step == 0 && native != null) { step = 1 };
								if (step == 1) {
									const temp_919 = (native.values[0]);
									switch (temp_919&&temp_919[0]) {
									case 0: {
										const s = temp_919[1];
										this.uniqueNative(s, e)
									} break;

									default:
									throw '@native takes string as argument'
									};
								} else {
									this.unique(name, e);
								};
							};
						}
					} break;

					case 22: {
						const name_922 = temp[1];
						const expr_924 = temp[2];
						const vars = temp[3];
						const rettype = temp[4];
						const external_928 = temp[5];
						if (this.parentNames.get(e) == null) {
							let step_930 = 0;
							const name_932 = this.getNative(e);
							if (step_930 == 0 && name_932 != null) { step_930 = 1 };
							if (step_930 == 1) { this.uniqueNative(name_932, e) } else {
								let step_934 = 0;
								const name_936 = name_922;
								if (step_934 == 0 && name_936 != null) { step_934 = 1 };
								if (step_934 == 1) { this.unique(name_936, e) };
							};
						}
					} break;
					};
				};
			};
			const init = [];
			for (const file of $toIterator(this.project.moduleInfo)) {
				const initial = [];
				this.pushScope();
				for (const e of $toIterator(file.nodes)) {
					const temp_940 = (e);
					switch (temp_940&&temp_940[0]) {
					case 22: {
						{
							let step_942 = 0;
							const s_944 = this.nodeToStatement(e);
							if (step_942 == 0 && s_944 != null) { step_942 = 1 };
							if (step_942 == 1) { this.niceProject.globalFuncs.push(s_944) };
						}
					} break;

					case 24: {
						{
							let step_946 = 0;
							const s_948 = this.nodeToStatement(e);
							if (step_946 == 0 && s_948 != null) { step_946 = 1 };
							if (step_946 == 1) { this.niceProject.globalVars.push(s_948) };
						}
					} break;

					case 25: {
						const vars_950 = temp_940[1];
						for (const v of $toIterator(vars_950)) {
							let step_952 = 0;
							const s_954 = this.nodeToStatement(v);
							if (step_952 == 0 && s_954 != null) { step_952 = 1 };
							if (step_952 == 1) { this.niceProject.globalVars.push(s_954) };
						}
					} break;

					case 39: {
						this.fillStatement(e, 'path')
					} break;

					case 26: {
						this.fillStatement(e, 'path')
					} break;

					default:
					{
						const statement = this.fillStatement(e, null);
						{
							const temp_957 = (statement);
							switch (temp_957&&temp_957[0]) {
							case null: case undefined: {
								{
								}
							} break;

							case 1: {
								const el = temp_957[1];
								if (el.length > 0) { initial.push(statement) }
							} break;

							default:
							initial.push(statement)
							};
						};
					}
					};
				};
				this.popScope();
				if (initial.length > 0) { init.push(/*Block*/[1,initial,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:114"]) };
			};
			this.niceProject.init.push(/*Block*/[1,init,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:118"]);
			if (this.niceProject.init.length > 1) { throw 'too many inits' };
			this.niceProject.package = this.package;
			this.niceProject.typer = this.typer;
			this.niceProject.classes.sort((a, b) => {
				if (a.external == true) { return (-1) };
				if (a.extend == null) { return 0 };
				return 1;
			});
			return this.niceProject;
		};
		nodeToExpression(e) {
			const result = this.nodeToExpressionWithoutPosition(e);
			if (result != null) {
				this.niceProject.expressionPosition.set(result, this.project.data.get(e));
				if (this.niceProject.expressionType.get(result) == null) { this.niceProject.expressionType.set(result, this.typer.types.get(e)) };
			};
			return result;
		};
		nodeToExpressionWithoutPosition(e_964) {
			if (e_964 == null) { return null };
			{
				const temp_966 = (e_964);
				switch (temp_966&&temp_966[0]) {
				case 0: {
					const v = temp_966[1];
					return /*String*/[0,v,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:163"]
				} break;

				case 5: {
					const v_969 = temp_966[1];
					return /*Int*/[1,v_969,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:165"]
				} break;

				case 6: {
					const v_971 = temp_966[1];
					const meta = temp_966[2];
					return /*MetaInt*/[2,v_971,meta,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:167"]
				} break;

				case 7: {
					const v_974 = temp_966[1];
					return /*Float*/[3,v_974,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:169"]
				} break;

				case 2: {
					const v_976 = temp_966[1];
					{
						if (v_976) { return /*True*/[4] };
						return /*False*/[5];
					}
				} break;

				case 8: {
					return /*Null*/[9]
				} break;

				case 51: {
					const t_978 = temp_966[1];
					{
						const temp_980 = (t_978);
						switch (temp_980&&temp_980[0]) {
						case 1: {
							const name_982 = temp_980[1];
							return /*Ident*/[6,(() => {
								const result_984 = this.parentNames.get(this.typer.parents.get(e_964));
								if (result_984 != null) { return result_984 };
								return name_982;
							})(),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:180"]
						} break;
						};
					}
				} break;

				case 1: {
					const name_986 = temp_966[1];
					{
						let source = this.typer.parents.get(e_964);
						{
							let step_989 = 0;
							const value = this.inline.get(source);
							if (step_989 == 0 && value != null) { step_989 = 1 };
							if (step_989 == 1) { return value };
						};
						this.nonInlineRead.set(source, true);
						{
							const temp_992 = (source);
							switch (temp_992&&temp_992[0]) {
							case null: case undefined: {
								throw ('Unmapped `' + (e_964) + '` of name `' + (name_986) + '` ') + JSON.stringify(this.project.data.get(e_964))
							} break;

							case 24: {
								const name_994 = temp_992[1];
								{
									const staticSource = this.typer.parents.get(source);
									{
										let step_997 = 0;
										const map = this.typer.parents.get(source);
										if (step_997 == 0 && map != null) { step_997 = 1 };
										if (step_997 == 1) {
											const temp_1000 = ((map));
											switch (temp_1000&&temp_1000[0]) {
											case 36: {
												{
													const name_1002 = (() => {
														const result_1004 = this.parentNames.get(source);
														if (result_1004 != null) { return result_1004 };
														return name_994;
													})();
													return /*Ident*/[6,this.globalAccessor + name_1002,this.typer.types.get(source),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:203"];
												}
											} break;

											default:
											{
												const type = this.typer.types.get(this.typer.parents.get(source));
												return /*Dot*/[11,/*This*/[10,type,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:210"],this.getClassDotField(staticSource, name_994),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:210"];
											}
											};
										};
									};
								}
							} break;

							case 22: {
								const name_1007 = temp_992[1];
								{
									let step_1009 = 0;
									const map_1011 = this.typer.parents.get(source);
									if (step_1009 == 0 && map_1011 != null) { step_1009 = 1 };
									if (step_1009 == 1) {
										const temp_1013 = ((map_1011));
										switch (temp_1013&&temp_1013[0]) {
										case 36: {
											{
												const result_1015 = /*Ident*/[6,this.globalAccessor + ((() => {
													const result_1017 = this.parentNames.get(source);
													if (result_1017 != null) { return result_1017 };
													return name_1007;
												})()),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:215"];
												{
													let step_1019 = 0;
													const name_1021 = this.getNative(source);
													if (step_1019 == 0 && name_1021 != null) { step_1019 = 1 };
													if (step_1019 == 1) { this.niceProject.native.set(result_1015, true) };
												};
												return result_1015;
											}
										} break;

										default:
										{
											const type_1023 = this.typer.types.get(this.typer.parents.get(source));
											return /*Dot*/[11,/*This*/[10,type_1023,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:223"],(() => {
												const result_1025 = this.parentNames.get(source);
												if (result_1025 != null) { return result_1025 };
												return name_1007;
											})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:223"];
										}
										};
									};
								}
							} break;

							case 47: {
								const f = temp_992[1];
								{
									const staticSource_1028 = this.typer.parents.get(source);
									{
										const temp_1030 = (staticSource_1028);
										switch (temp_1030&&temp_1030[0]) {
										case 26: {
											const t_1032 = temp_1030[1];
											return /*Dot*/[11,/*Ident*/[6,DataHelper.extractTypeName(t_1032),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:231"],this.getClassDotField(staticSource_1028, name_986),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:231"]
										} break;

										case 39: {
											const t_1034 = temp_1030[1];
											return /*Dot*/[11,/*Ident*/[6,DataHelper.extractTypeName(t_1034),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:233"],this.getClassDotField(staticSource_1028, name_986),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:233"]
										} break;

										default:
										throw ('staticSource is ' + (staticSource_1028) + ' for ' + (name_986) + '')
										};
									};
								}
							} break;
							};
						};
						const result_1036 = /*Ident*/[6,(() => {
							const result_1038 = this.parentNames.get(source);
							if (result_1038 != null) { return result_1038 };
							return name_986;
						})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:239"];
						if (Normalizer.getAtt(this.project.mapDecorators.get(source), 'native') != null) { this.niceProject.native.set(result_1036, true) };
						return result_1036;
					}
				} break;

				case 29: {
					const expr_1040 = temp_966[1];
					const name_1042 = temp_966[2];
					{
						const parent = this.typer.parents.get(expr_1040);
						{
							const temp_1045 = (parent);
							switch (temp_1045&&temp_1045[0]) {
							case 39: {
								const t_1047 = temp_1045[1];
								const fields_1049 = temp_1045[2];
								const valuesType_1051 = temp_1045[3];
								{
									{
										let step_1053 = 0;
										const temp_1055 = (!this.nativeEnums);
										let vt = null;
										if (step_1053 == 0 && temp_1055 != false) {
											vt = valuesType_1051;
											step_1053 = 1;
										};
										let tag = null;
										if (step_1053 == 1 && vt != null) {
											tag = this.getTag(parent, name_1042);
											step_1053 = 2;
										};
										if (step_1053 == 2 && tag != null) { step_1053 = 3 };
										if (step_1053 == 3) { return tag };
									};
									return /*Dot*/[11,this.nodeToExpression(expr_1040),(() => {
										const result_1059 = this.getClassDotField(parent, name_1042);
										if (result_1059 != null) { return result_1059 };
										return name_1042;
									})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:290"];
								}
							} break;

							case 26: {
								return /*Dot*/[11,this.nodeToExpression(expr_1040),(() => {
									const result_1061 = this.getClassDotField(parent, name_1042);
									if (result_1061 != null) { return result_1061 };
									return name_1042;
								})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:292"]
							} break;
							};
						};
						{
							let step_1063 = 0;
							const type_1065 = this.typer.types.get(expr_1040);
							if (step_1063 == 0 && type_1065 != null) { step_1063 = 1 };
							if (step_1063 == 1) {
								const temp_1067 = ((type_1065));
								switch (temp_1067&&temp_1067[0]) {
								case 4: {
									const type_1069 = temp_1067[1];
									{
										const renamed = type_1069.fieldRenames[type_1069.fieldNames.indexOf(name_1042)];
										{
											let step_1072 = 0;
											const rename = renamed;
											if (step_1072 == 0 && rename != null) { step_1072 = 1 };
											if (step_1072 == 1) { return /*Dot*/[11,this.nodeToExpression(expr_1040),rename,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:299"] };
										};
									}
								} break;
								};
							};
						};
						const value_1075 = this.nodeToExpression(expr_1040);
						if (name_1042 == 'length') {
							const temp_1077 = (value_1075);
							switch (temp_1077&&temp_1077[0]) {
							case 0: {
								const s_1079 = temp_1077[1];
								{
									console.log('String.length!', s_1079, name_1042, s_1079.length);
									return /*Int*/[1,s_1079.length,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:309"];
								}
							} break;
							};
						};
						return /*Dot*/[11,value_1075,name_1042,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:312"];
					}
				} break;

				case 30: {
					const expr_1081 = temp_966[1];
					const name_1083 = temp_966[2];
					{
						const parent_1085 = this.typer.parents.get(expr_1081);
						{
							const temp_1087 = (parent_1085);
							switch (temp_1087&&temp_1087[0]) {
							case 39: {
								const t_1089 = temp_1087[1];
								const fields_1091 = temp_1087[2];
								const valuesType_1093 = temp_1087[3];
								{
									{
										let step_1095 = 0;
										const temp_1097 = (!this.nativeEnums);
										let vt_1099 = null;
										if (step_1095 == 0 && temp_1097 != false) {
											vt_1099 = valuesType_1093;
											step_1095 = 1;
										};
										let tag_1101 = null;
										if (step_1095 == 1 && vt_1099 != null) {
											tag_1101 = this.getTag(parent_1085, name_1083);
											step_1095 = 2;
										};
										if (step_1095 == 2 && tag_1101 != null) { step_1095 = 3 };
										if (step_1095 == 3) { return tag_1101 };
									};
									{
										let step_1103 = 0;
										const temp_1105 = (!this.nativeEnums);
										let temp_1107 = null;
										if (step_1103 == 0 && temp_1105 != false) {
											temp_1107 = valuesType_1093 == null;
											step_1103 = 1;
										};
										let tag_1109 = null;
										if (step_1103 == 1 && temp_1107 != false) {
											tag_1109 = this.getTag(parent_1085, name_1083);
											step_1103 = 2;
										};
										if (step_1103 == 2 && tag_1109 != null) { step_1103 = 3 };
										if (step_1103 == 3) { return /*Enum*/[32,DataHelper.extractTypeName(t_1089),name_1083,tag_1109,[],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:322"] };
									};
									return /*Dot*/[11,this.nodeToExpression(expr_1081),(() => {
										const result_1111 = this.getClassDotField(parent_1085, name_1083);
										if (result_1111 != null) { return result_1111 };
										return name_1083;
									})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:324"];
								}
							} break;

							case 26: {
								return /*Dot*/[11,this.nodeToExpression(expr_1081),(() => {
									const result_1113 = this.getClassDotField(parent_1085, name_1083);
									if (result_1113 != null) { return result_1113 };
									return name_1083;
								})(),this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:325"]
							} break;
							};
						};
						return /*Dot*/[11,this.nodeToExpression(expr_1081),name_1083,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:327"];
					}
				} break;

				case 13: {
					const expr_1115 = temp_966[1];
					const args = temp_966[2];
					const argNames = temp_966[3];
					{
						if (args.length == 1) {
							const temp_1119 = (expr_1115);
							switch (temp_1119&&temp_1119[0]) {
							case 29: {
								const expr_1121 = temp_1119[1];
								const name_1123 = temp_1119[2];
								if (name_1123 == 'charCodeAt') {
									const temp_1125 = (expr_1121);
									switch (temp_1125&&temp_1125[0]) {
									case 0: {
										const s_1127 = temp_1125[1];
										if (s_1127.indexOf('\\') == (-1)) {
											const temp_1129 = (args[0]);
											switch (temp_1129&&temp_1129[0]) {
											case 5: {
												const v_1131 = temp_1129[1];
												{
													const i = v_1131;
													if ((i < s_1127.length) && (i > (-1))) {
														const value_1134 = s_1127.charCodeAt(i);
														const result_1136 = /*?*/(value_1134 > (-1))? (/*Int*/[1,'' + value_1134,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:340"]) : /*Int*/[1,'0',"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:342"];
														this.niceProject.expressionType.set(result_1136, this.typer.typeInt);
														return result_1136;
													};
												}
											} break;
											};
										}
									} break;
									};
								}
							} break;
							};
						};
						let kind = 11;
						{
							const temp_1139 = (expr_1115);
							switch (temp_1139&&temp_1139[0]) {
							case 29: {
								const expr_1141 = temp_1139[1];
								{
									const temp_1143 = ((this.typer.types.get(expr_1141)));
									switch (temp_1143&&temp_1143[0]) {
									case 4: {
										kind = 12
									} break;

									case 3: {
										kind = 10
									} break;
									};
								}
							} break;
							};
						};
						const a_1145 = [];
						for (const arg of $toIterator(args)) {
							a_1145.push(this.nodeToExpression(arg));
						};
						if ((!this.nativeEnums)) {
							const temp_1147 = (expr_1115);
							switch (temp_1147&&temp_1147[0]) {
							case 30: {
								const expr_1149 = temp_1147[1];
								const name_1151 = temp_1147[2];
								{
									const parent_1153 = this.typer.parents.get(expr_1149);
									{
										const temp_1155 = (parent_1153);
										switch (temp_1155&&temp_1155[0]) {
										case 39: {
											const t_1157 = temp_1155[1];
											const fields_1159 = temp_1155[2];
											const valuesType_1161 = temp_1155[3];
											{
												let step_1163 = 0;
												const tag_1165 = this.getTag(parent_1153, name_1151);
												if (step_1163 == 0 && tag_1165 != null) { step_1163 = 1 };
												if (step_1163 == 1) { return /*Enum*/[32,DataHelper.extractTypeName(t_1157),name_1151,tag_1165,a_1145,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:374"] };
											}
										} break;
										};
									};
								}
							} break;
							};
						};
						const atts_1167 = this.project.mapDecorators.get(this.typer.parents.get(expr_1115));
						{
							let step_1169 = 0;
							const infix = Normalizer.getAtt(atts_1167, 'infix');
							if (step_1169 == 0 && infix != null) { step_1169 = 1 };
							if (step_1169 == 1) {
								const temp_1172 = (infix.values[0]);
								switch (temp_1172&&temp_1172[0]) {
								case 0: {
									const s_1174 = temp_1172[1];
									return /*NativeOperator*/[30,0,a_1145,s_1174,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:381"]
								} break;

								default:
								throw '@infix takes string as argument'
								};
							};
						};
						{
							let step_1176 = 0;
							const operator = Normalizer.getAtt(atts_1167, 'operator');
							if (step_1176 == 0 && operator != null) { step_1176 = 1 };
							if (step_1176 == 1) {
								const temp_1179 = (operator.values[0]);
								switch (temp_1179&&temp_1179[0]) {
								case 0: {
									const s_1181 = temp_1179[1];
									return /*NativeOperator*/[30,1,a_1145,s_1181,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:386"]
								} break;

								default:
								throw '@operator takes string as argument'
								};
							};
						};
						const v_1183 = this.nodeToExpression(expr_1115);
						{
							const temp_1185 = (v_1183);
							switch (temp_1185&&temp_1185[0]) {
							case 11: {
								const expr_1187 = temp_1185[1];
								{
									const temp_1189 = (expr_1187);
									switch (temp_1189&&temp_1189[0]) {
									case 10: {
										kind = 12
									} break;
									};
								}
							} break;
							};
						};
						return /*Call*/[14,v_1183,a_1145,this.typer.types.get(e_964),kind,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:398"];
					}
				} break;

				case 10: {
					const a_1191 = temp_966[1];
					const op = temp_966[2];
					const b_1194 = temp_966[3];
					{
						const ea = this.nodeToExpression(a_1191);
						const eb = this.nodeToExpression(b_1194);
						if (op == 111) {
							const temp_1198 = (ea);
							switch (temp_1198&&temp_1198[0]) {
							case 0: {
								const sa = temp_1198[1];
								{
									const temp_1201 = (eb);
									switch (temp_1201&&temp_1201[0]) {
									case 0: {
										const sb = temp_1201[1];
										return /*String*/[0,sa + sb,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:407"]
									} break;

									case 1: {
										const sb_1204 = temp_1201[1];
										return /*String*/[0,sa + sb_1204,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:409"]
									} break;

									case 3: {
										const sb_1206 = temp_1201[1];
										return /*String*/[0,sa + sb_1206,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:410"]
									} break;
									};
								}
							} break;

							case 1: {
								const sa_1208 = temp_1198[1];
								{
									const temp_1210 = (eb);
									switch (temp_1210&&temp_1210[0]) {
									case 1: {
										const sb_1212 = temp_1210[1];
										return /*Int*/[1,sa_1208 + sb_1212,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:414"]
									} break;

									case 3: {
										const sb_1214 = temp_1210[1];
										return /*Float*/[3,sa_1208 + sb_1214,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:415"]
									} break;

									case 0: {
										const sb_1216 = temp_1210[1];
										return /*String*/[0,sa_1208 + sb_1216,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:417"]
									} break;
									};
								}
							} break;

							case 3: {
								const sa_1218 = temp_1198[1];
								{
									const temp_1220 = (eb);
									switch (temp_1220&&temp_1220[0]) {
									case 1: {
										const sb_1222 = temp_1220[1];
										return /*Float*/[3,sa_1218 + sb_1222,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:420"]
									} break;

									case 3: {
										const sb_1224 = temp_1220[1];
										return /*Float*/[3,sa_1218 + sb_1224,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:421"]
									} break;

									case 0: {
										const sb_1226 = temp_1220[1];
										return /*String*/[0,sa_1218 + sb_1226,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:422"]
									} break;
									};
								}
							} break;
							};
						};
						if (op == 93) {
							const temp_1228 = (ea);
							switch (temp_1228&&temp_1228[0]) {
							case 4: {
								{
									const temp_1230 = (eb);
									switch (temp_1230&&temp_1230[0]) {
									case 5: {
										return /*True*/[4]
									} break;

									case 4: {
										return /*True*/[4]
									} break;
									};
								}
							} break;

							case 5: {
								{
									const temp_1232 = (eb);
									switch (temp_1232&&temp_1232[0]) {
									case 5: {
										return /*False*/[5]
									} break;

									case 4: {
										return /*True*/[4]
									} break;
									};
								}
							} break;
							};
						};
						if (op == 92) {
							const temp_1234 = (ea);
							switch (temp_1234&&temp_1234[0]) {
							case 4: {
								{
									const temp_1236 = (eb);
									switch (temp_1236&&temp_1236[0]) {
									case 5: {
										return /*False*/[5]
									} break;

									case 4: {
										return /*True*/[4]
									} break;
									};
								}
							} break;

							case 5: {
								{
									const temp_1238 = (eb);
									switch (temp_1238&&temp_1238[0]) {
									case 5: {
										return /*False*/[5]
									} break;

									case 4: {
										return /*False*/[5]
									} break;
									};
								}
							} break;
							};
						};
						return /*Binop*/[16,ea,op,eb,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:459"];
					}
				} break;

				case 31: {
					const path_1240 = temp_966[1];
					const t_1242 = temp_966[2];
					const args_1244 = temp_966[3];
					const fields_1246 = temp_966[4];
					const el_1248 = temp_966[5];
					{
						const v_1250 = /*Ident*/[6,(() => {
							const result_1252 = this.parentNames.get(this.typer.parents.get(e_964));
							if (result_1252 != null) { return result_1252 };
							return DataHelper.extractTypeName(t_1242);
						})(),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:462"];
						const a_1254 = [];
						for (const arg of $toIterator(args_1244)) {
							a_1254.push(this.nodeToExpression(arg));
						};
						return /*New*/[15,v_1250,a_1254,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:467"];
					}
				} break;

				case 22: {
					const name_1256 = temp_966[1];
					const expr_1258 = temp_966[2];
					const vars_1260 = temp_966[3];
					const rettype_1262 = temp_966[4];
					const external_1264 = temp_966[5];
					{
						const a_1266 = [];
						const defaults = [];
						const types = [];
						for (const arg of $toIterator(vars_1260)) {
							const temp_1270 = (arg);
							switch (temp_1270&&temp_1270[0]) {
							case 24: {
								const name_1272 = temp_1270[1];
								const t_1274 = temp_1270[2];
								const expr_1276 = temp_1270[3];
								const const_1278 = temp_1270[4];
								{
									a_1266.push(this.unique(name_1272, arg));
									types.push(t_1274);
									if (expr_1276 != null) { defaults.push(this.nodeToExpression(expr_1276)) } else {
										defaults.push(null);
									};
								}
							} break;
							};
						};
						return /*Function*/[17,/*?*/(name_1256 != null)? (this.unique(name_1256, e_964)) : (null),this.nodeToStatement(expr_1258),a_1266,defaults,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:483"];
					}
				} break;

				case 23: {
					const expr_1280 = temp_966[1];
					const vars_1282 = temp_966[2];
					const rettype_1284 = temp_966[3];
					{
						const a_1286 = [];
						const defaults_1288 = [];
						const types_1290 = [];
						for (const arg of $toIterator(vars_1282)) {
							const temp_1292 = (arg);
							switch (temp_1292&&temp_1292[0]) {
							case 24: {
								const name_1294 = temp_1292[1];
								const t_1296 = temp_1292[2];
								const expr_1298 = temp_1292[3];
								const const_1300 = temp_1292[4];
								{
									a_1286.push(this.unique(name_1294, arg));
									types_1290.push(t_1296);
									if (expr_1298 != null) { defaults_1288.push(this.nodeToExpression(expr_1298)) } else {
										defaults_1288.push(null);
									};
								}
							} break;
							};
						};
						return /*Arrow*/[18,this.nodeToExpression(expr_1280),a_1286,defaults_1288,types_1290,rettype_1284,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:499"];
					}
				} break;

				case 12: {
					const el_1302 = temp_966[1];
					{
						if (el_1302.length == 0) { return /*Object*/[20,[],[],[],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:503"] };
						if (el_1302.length == 1) { return this.nodeToExpression(el_1302[0]) };
						const block = [];
						let i_1305 = 0;
						while ((i_1305 < el_1302.length - 1)) {
							{
								let step_1307 = 0;
								const s_1309 = this.nodeToStatement(el_1302[i_1305]);
								if (step_1307 == 0 && s_1309 != null) { step_1307 = 1 };
								if (step_1307 == 1) { block.push(s_1309) };
							};
							i_1305++;
						};
						const result_1311 = el_1302[el_1302.length - 1];
						block.push(/*Return*/[6,this.nodeToExpression(result_1311),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:517"]);
						return /*Call*/[14,/*Parenthesis*/[19,/*Function*/[17,null,/*Block*/[1,block,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:518"],[],[],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:518"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:518"],[],this.typer.types.get(result_1311),11,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:518"];
					}
				} break;

				case 38: {
					const names = temp_966[1];
					const el_1314 = temp_966[2];
					{
						const els = [];
						const types_1317 = [];
						for (const e of $toIterator(el_1314)) {
							els.push(this.nodeToExpression(e));
							types_1317.push(this.typer.types.get(e));
						};
						return /*Object*/[20,names,els,types_1317,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:527"];
					}
				} break;

				case 15: {
					const inner = temp_966[1];
					{
						const unwrapNestedParens = (inner_1321) => {
							const temp_1323 = (inner_1321);
							switch (temp_1323&&temp_1323[0]) {
							case 15: {
								const i_1325 = temp_1323[1];
								return unwrapNestedParens(i_1325)
							} break;

							default:
							return inner_1321
							};
						};
						const value_1327 = this.nodeToExpression(unwrapNestedParens(inner));
						{
							const temp_1329 = (value_1327);
							switch (temp_1329&&temp_1329[0]) {
							case 1: {
								return value_1327
							} break;

							case 0: {
								return value_1327
							} break;

							case 3: {
								return value_1327
							} break;

							case 4: {
								return value_1327
							} break;

							case 5: {
								return value_1327
							} break;

							case 9: {
								return value_1327
							} break;
							};
						};
						return /*Parenthesis*/[19,value_1327,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:548"];
					}
				} break;

				case 32: {
					const el_1331 = temp_966[1];
					{
						if (el_1331.length == 1) {
							const temp_1333 = (el_1331[0]);
							switch (temp_1333&&temp_1333[0]) {
							case 49: {
								const name_1335 = temp_1333[1];
								const over = temp_1333[2];
								const by = temp_1333[3];
								const range = temp_1333[4];
								{
									const block_1340 = [];
									const result_1342 = this.unique('result');
									const resultType = this.typer.types.get(e_964);
									block_1340.push(/*Const*/[4,result_1342,/*Array*/[21,[],this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:556"],this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:556"]);
									const value_1345 = this.unique('value');
									const valueType = this.typer.types.get(el_1331[0]);
									block_1340.push(/*Const*/[4,value_1345,this.nodeToExpression(over),valueType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:559"]);
									const push = /*Call*/[2,/*Dot*/[11,/*Ident*/[6,result_1342,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:561"],'push',null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:561"],[this.nodeToExpression(by)],[],12,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:561"];
									const fillLoop = () => {
										{
											const temp_1350 = (over);
											switch (temp_1350&&temp_1350[0]) {
											case 5: {
												const s_1352 = temp_1350[1];
												{
													const i_1354 = name_1335;
													block_1340.push(/*Const*/[4,i_1354,/*Int*/[1,(-1),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:566"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:566"]);
													block_1340.push(/*While*/[13,/*Binop*/[16,/*Parenthesis*/[19,/*Binop*/[16,/*Ident*/[6,i_1354,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:569"],111,/*Int*/[1,1,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:569"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:569"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:569"],99,/*Ident*/[6,value_1345,valueType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:571"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:568"],/*Block*/[1,[/*Increment*/[14,/*Ident*/[6,i_1354,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:574"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:574"], push],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:573"],true,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:567"]);
													return;
												}
											} break;
											};
										};
										block_1340.push(/*For*/[12,name_1335,/*Ident*/[6,value_1345,valueType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:581"],push,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:581"]);
									};
									fillLoop();
									block_1340.push(/*Return*/[6,/*Ident*/[6,result_1342,resultType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:585"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:585"]);
									return /*Call*/[14,/*Parenthesis*/[19,/*Function*/[17,null,/*Block*/[1,block_1340,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:588"],[],[],/*Function*/[10,[],this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:588"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:588"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:587"],[],this.typer.types.get(e_964),11,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:586"];
								}
							} break;
							};
						};
						const els_1356 = [];
						const types_1358 = [];
						for (const e of $toIterator(el_1331)) {
							els_1356.push(this.nodeToExpression(e));
							types_1358.push(this.typer.types.get(e));
						};
						return /*Array*/[21,els_1356,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:602"];
					}
				} break;

				case 50: {
					const nullable = temp_966[1];
					const otherwise = temp_966[2];
					{
						const result_1362 = this.unique('result');
						const resultType_1364 = null;
						return /*Call*/[14,/*Parenthesis*/[19,/*Function*/[17,null,/*Block*/[1,[/*Const*/[4,result_1362,this.nodeToExpression(nullable),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:609"], /*If*/[7,/*Binop*/[16,/*Ident*/[6,result_1362,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:610"],103,/*Null*/[9],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:610"],/*Return*/[6,/*Ident*/[6,result_1362,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:610"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:610"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:610"], /*Return*/[6,this.nodeToExpression(otherwise),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:611"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:608"],[],[],/*Function*/[10,[],this.typer.types.get(otherwise),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:612"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:608"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:608"],[],this.typer.types.get(otherwise),11,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:608"];
						return /*Elvis*/[24,this.nodeToExpression(nullable),this.nodeToExpression(otherwise),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:615"];
					}
				} break;

				case 20: {
					const op_1366 = temp_966[1];
					const postfix = temp_966[2];
					const e_1369 = temp_966[3];
					return /*Unop*/[23,op_1366,postfix,this.nodeToExpression(e_1369),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:618"]
				} break;

				case 3: {
					return /*This*/[10,this.typer.types.get(e_964),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:621"]
				} break;

				case 33: {
					const keys = temp_966[1];
					const values = temp_966[2];
					{
						const k = [];
						const v_1374 = [];
						for (const key of $toIterator(keys)) {
							k.push(this.nodeToExpression(key));
						};
						for (const value of $toIterator(values)) {
							v_1374.push(this.nodeToExpression(value));
						};
						return /*Map*/[22,k,v_1374,this.typer.types.get(keys[0]),this.typer.types.get(values[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:633"];
					}
				} break;

				case 11: {
					const a_1376 = temp_966[1];
					const op_1378 = temp_966[2];
					const b_1380 = temp_966[3];
					return /*Assignop*/[29,this.nodeToExpression(a_1376),op_1378,this.nodeToExpression(b_1380),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:636"]
				} break;

				case 14: {
					const econd = temp_966[1];
					const eif = temp_966[2];
					const eelse = temp_966[3];
					{
						let binds = false;
						for (const cond of $toIterator(econd)) {
							const temp_1386 = (cond);
							switch (temp_1386&&temp_1386[0]) {
							case 24: {
								binds = true
							} break;
							};
						};
						if ((!binds) && econd.length == 1) { return /*If*/[25,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:647"] };
						if ((!binds)) {
							let parens = /*Parenthesis*/[19,this.nodeToExpression(econd[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:651"];
							let i_1389 = 1;
							while ((i_1389 < econd.length)) {
								parens = /*Binop*/[16,parens,92,/*Parenthesis*/[19,this.nodeToExpression(econd[i_1389]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:654"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:654"];
								i_1389++;
							};
							return /*If*/[25,parens,this.nodeToExpression(eif),this.nodeToExpression(eelse),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:657"];
						};
						return /*If*/[25,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:660"];
					}
				} break;

				case 34: {
					const expr_1391 = temp_966[1];
					const index = temp_966[2];
					return /*Index*/[26,this.nodeToExpression(expr_1391),this.nodeToExpression(index),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:663"]
				} break;

				case 44: {
					const e_1394 = temp_966[1];
					const kind_1396 = temp_966[2];
					const t_1398 = temp_966[3];
					{
						const temp_1400 = (kind_1396);
						switch (temp_1400) {
						case 81: {
							console.log('`as?` is not yet supported by normalizer, only `as!`')
						} break;

						case 89: {
							return /*UnsafeBitCast*/[27,this.nodeToExpression(e_1394),this.typer.types.get(t_1398),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:669"]
						} break;

						default:
						console.log('`as` is not yet supported by normalizer, only `as!`')
						};
					}
				} break;

				case 43: {
					const e_1402 = temp_966[1];
					const t_1404 = temp_966[2];
					return /*Is*/[28,this.nodeToExpression(e_1402),this.typer.types.get(t_1404),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:675"]
				} break;

				case 35: {
					const exprs = temp_966[1];
					const conds = temp_966[2];
					const guards = temp_966[3];
					const cases = temp_966[4];
					{
						const block_1410 = [];
						const caseRet = [];
						let funcType = this.typer.typeVoid;
						let resultType_1414 = this.typer.typeVoid;
						for (const c of $toIterator(cases)) {
							resultType_1414 = this.typer.types.get(c);
							funcType = /*Function*/[10,[],resultType_1414,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:685"];
							caseRet.push(/*Return*/[16,c,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:686"]);
						};
						block_1410.push(this.nodeToStatement(/*Switch*/[35,exprs,conds,guards,caseRet,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:688"]));
						return /*Call*/[14,/*Parenthesis*/[19,/*Function*/[17,null,/*Block*/[1,block_1410,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:690"],[],[],funcType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:690"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:690"],[],resultType_1414,11,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:689"];
					}
				} break;

				case 36: {
					{
					}
				} break;

				case 37: {
					{
					}
				} break;

				default:
				console.error('(internal warning) Unknown node type for expression:', e_964, this.project.data.get(e_964))
				};
			};
			return null;
		};
		nodeToStatement(e_1416) {
			const result_1418 = this.nodeToStatementWithoutPosition(e_1416);
			if (result_1418 != null) { this.niceProject.statementPosition.set(result_1418, this.project.data.get(e_1416)) };
			return result_1418;
		};
		nodeToStatementWithoutPosition(e_1420) {
			if (e_1420 == null) { return null };
			{
				const temp_1422 = (e_1420);
				switch (temp_1422&&temp_1422[0]) {
				case 12: {
					const el_1424 = temp_1422[1];
					{
						let els_1426 = [];
						for (const e of $toIterator(el_1424)) {
							const statement_1428 = this.nodeToStatement(e);
							if (statement_1428 != null) { els_1426.push(statement_1428) };
						};
						if (els_1426.length == 1) {
							const temp_1430 = (els_1426[0]);
							switch (temp_1430&&temp_1430[0]) {
							case 1: {
								return els_1426[0]
							} break;
							};
						};
						return /*Block*/[1,els_1426,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:734"];
					}
				} break;

				case 39: {
					const t_1432 = temp_1422[1];
					const fields_1434 = temp_1422[2];
					const valuesType_1436 = temp_1422[3];
					{
						this.renameClassFields(fields_1434);
						const isComplexEnum = valuesType_1436 == null;
						if (isComplexEnum) {
							const type_1439 = new NiceComplexEnum();
							type_1439.name = this.unique(DataHelper.extractTypeName(t_1432), e_1420);
							this.globals.push(type_1439.name);
							const names_1441 = [];
							const constructors = [];
							const constructorsTypes = [];
							const types_1445 = [];
							for (const f of $toIterator(fields_1434)) {
								const temp_1447 = (f);
								switch (temp_1447&&temp_1447[0]) {
								case 51: {
									const t_1449 = temp_1447[1];
									{
										const temp_1451 = (t_1449);
										switch (temp_1451&&temp_1451[0]) {
										case 1: {
											const name_1453 = temp_1451[1];
											{
												names_1441.push(name_1453);
												constructors.push(null);
												constructorsTypes.push(null);
												types_1445.push(null);
											}
										} break;
										};
									}
								} break;

								case 13: {
									const e_1455 = temp_1447[1];
									const args_1457 = temp_1447[2];
									const argNames_1459 = temp_1447[3];
									{
										{
											const temp_1461 = (e_1455);
											switch (temp_1461&&temp_1461[0]) {
											case 51: {
												const t_1463 = temp_1461[1];
												{
													const temp_1465 = (t_1463);
													switch (temp_1465&&temp_1465[0]) {
													case 1: {
														const name_1467 = temp_1465[1];
														names_1441.push(name_1467)
													} break;
													};
												}
											} break;
											};
										};
										constructors.push((() => {
											const result_1469 = [];
											const value_1471 = argNames_1459;
											for (const arg of $toIterator(value_1471)) result_1469.push(this.unique((arg)));
											return result_1469;
										})());
										constructorsTypes.push((() => {
											const result_1473 = [];
											const value_1475 = args_1457;
											for (const arg of $toIterator(value_1475)) result_1473.push(this.typer.toType(Typer.nodeToNodeType(arg), arg));
											return result_1473;
										})());
										types_1445.push((() => {
											const result_1477 = [];
											const value_1479 = args_1457;
											for (const arg of $toIterator(value_1479)) result_1477.push(this.unique((arg)));
											return result_1477;
										})());
									}
								} break;

								case 47: {
									const field = temp_1447[1];
									{
										const temp_1482 = (field);
										switch (temp_1482&&temp_1482[0]) {
										case 24: {
											const name_1484 = temp_1482[1];
											const t_1486 = temp_1482[2];
											const expr_1488 = temp_1482[3];
											const const_1490 = temp_1482[4];
											{
												const uname = (() => {
													const result_1493 = this.parentNames.get(field);
													if (result_1493 != null) { return result_1493 };
													return this.unique(name_1484, field);
												})();
												if (const_1490) {
													const value_1495 = this.nodeToExpression(expr_1488);
													this.saveInlineIfViable(f, value_1495);
													type_1439.staticVars.push(/*Const*/[4,uname,value_1495,this.typer.types.get(field),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:774"]);
												} else {
													type_1439.staticVars.push(/*Var*/[3,uname,this.nodeToExpression(expr_1488),this.typer.types.get(field),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:776"]);
												};
											}
										} break;

										case 22: {
											const name_1497 = temp_1482[1];
											const expr_1499 = temp_1482[2];
											const vars_1501 = temp_1482[3];
											const rettype_1503 = temp_1482[4];
											const external_1505 = temp_1482[5];
											{
												const uname_1507 = (() => {
													const result_1509 = this.parentNames.get(field);
													if (result_1509 != null) { return result_1509 };
													return this.unique(name_1497, field);
												})();
												const a_1511 = [];
												const defaults_1513 = [];
												const types_1515 = [];
												for (const arg of $toIterator(vars_1501)) {
													const temp_1517 = (arg);
													switch (temp_1517&&temp_1517[0]) {
													case 24: {
														const name_1519 = temp_1517[1];
														const t_1521 = temp_1517[2];
														const expr_1523 = temp_1517[3];
														const const_1525 = temp_1517[4];
														{
															a_1511.push(this.unique(name_1519, arg));
															types_1515.push(t_1521);
															if (expr_1523 != null) { defaults_1513.push(this.nodeToExpression(expr_1523)) } else {
																defaults_1513.push(null);
															};
														}
													} break;
													};
												};
												type_1439.staticMethods.push(/*Function*/[5,uname_1507,this.unwrapNestingBlocks(this.nodeToStatement(expr_1499)),a_1511,defaults_1513,this.typer.types.get(field),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:793"]);
											}
										} break;

										default:
										console.error('(internal warning) Unknown complex enum static field kind:', field)
										};
									}
								} break;

								default:
								console.error('(internal warning) Unknown complex enum field kind:', f)
								};
							};
							type_1439.names = names_1441;
							type_1439.constructors = constructors;
							type_1439.constructorsTypes = constructorsTypes;
							type_1439.types = types_1445;
							this.niceProject.enumsComplex.push(type_1439);
							return null;
						} else {
							const type_1527 = new NiceSimpleEnum();
							type_1527.name = DataHelper.extractTypeName(t_1432);
							const names_1529 = [];
							const values_1531 = [];
							for (const f of $toIterator(fields_1434)) {
								const temp_1533 = (f);
								switch (temp_1533&&temp_1533[0]) {
								case 10: {
									const a_1535 = temp_1533[1];
									const op_1537 = temp_1533[2];
									const b_1539 = temp_1533[3];
									{
										{
											const temp_1541 = (a_1535);
											switch (temp_1541&&temp_1541[0]) {
											case 51: {
												const t_1543 = temp_1541[1];
												{
													const temp_1545 = (t_1543);
													switch (temp_1545&&temp_1545[0]) {
													case 1: {
														const name_1547 = temp_1545[1];
														names_1529.push(name_1547)
													} break;
													};
												}
											} break;
											};
										};
										{
											const temp_1549 = (b_1539);
											switch (temp_1549&&temp_1549[0]) {
											case 0: {
												const s_1551 = temp_1549[1];
												values_1531.push(/*String*/[0,s_1551,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:819"])
											} break;

											case 5: {
												const s_1553 = temp_1549[1];
												values_1531.push(/*Int*/[1,s_1553,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:820"])
											} break;

											default:
											console.error('(internal warning) Unknown node field value kind:', b_1539)
											};
										};
									}
								} break;

								case 51: {
									const t_1555 = temp_1533[1];
									{
										const temp_1557 = (t_1555);
										switch (temp_1557&&temp_1557[0]) {
										case 1: {
											const name_1559 = temp_1557[1];
											names_1529.push(name_1559)
										} break;
										};
									}
								} break;

								case 47: {
									const field_1561 = temp_1533[1];
									{
										const temp_1563 = (field_1561);
										switch (temp_1563&&temp_1563[0]) {
										case 24: {
											const name_1565 = temp_1563[1];
											const t_1567 = temp_1563[2];
											const expr_1569 = temp_1563[3];
											const const_1571 = temp_1563[4];
											{
												const uname_1573 = (() => {
													const result_1575 = this.parentNames.get(field_1561);
													if (result_1575 != null) { return result_1575 };
													return this.unique(name_1565, field_1561);
												})();
												if (const_1571) {
													const value_1577 = this.nodeToExpression(expr_1569);
													this.saveInlineIfViable(f, value_1577);
													type_1527.staticVars.push(/*Const*/[4,uname_1573,value_1577,this.typer.types.get(field_1561),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:835"]);
												} else {
													type_1527.staticVars.push(/*Var*/[3,uname_1573,this.nodeToExpression(expr_1569),this.typer.types.get(field_1561),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:837"]);
												};
											}
										} break;

										case 22: {
											const name_1579 = temp_1563[1];
											const expr_1581 = temp_1563[2];
											const vars_1583 = temp_1563[3];
											const rettype_1585 = temp_1563[4];
											const external_1587 = temp_1563[5];
											{
												const uname_1589 = (() => {
													const result_1591 = this.parentNames.get(field_1561);
													if (result_1591 != null) { return result_1591 };
													return this.unique(name_1579, field_1561);
												})();
												const a_1593 = [];
												const defaults_1595 = [];
												const types_1597 = [];
												for (const arg of $toIterator(vars_1583)) {
													const temp_1599 = (arg);
													switch (temp_1599&&temp_1599[0]) {
													case 24: {
														const name_1601 = temp_1599[1];
														const t_1603 = temp_1599[2];
														const expr_1605 = temp_1599[3];
														const const_1607 = temp_1599[4];
														{
															a_1593.push(this.unique(name_1601, arg));
															types_1597.push(t_1603);
															if (expr_1605 != null) { defaults_1595.push(this.nodeToExpression(expr_1605)) } else {
																defaults_1595.push(null);
															};
														}
													} break;
													};
												};
												type_1527.staticMethods.push(/*Function*/[5,uname_1589,this.unwrapNestingBlocks(this.nodeToStatement(expr_1581)),a_1593,defaults_1595,this.typer.types.get(field_1561),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:854"]);
											}
										} break;

										default:
										console.error('(internal warning) Unknown simple enum static field kind:', field_1561)
										};
									}
								} break;

								default:
								console.error('(internal warning) Unknown simple enum field kind:', f)
								};
							};
							type_1527.names = names_1529;
							type_1527.values = values_1531;
							this.niceProject.enumsSimple.push(type_1527);
							return null;
						};
					}
				} break;

				case 26: {
					const t_1609 = temp_1422[1];
					const ext_1611 = temp_1422[2];
					const impl_1613 = temp_1422[3];
					const fields_1615 = temp_1422[4];
					const external_1617 = temp_1422[5];
					{
						this.renameClassFields(fields_1615);
						const type_1619 = new NiceClass();
						{
							const temp_1621 = ((this.typer.types.get(e_1420)));
							switch (temp_1621&&temp_1621[0]) {
							case 3: {
								const the = temp_1621[1];
								type_1619.useless = the.useless
							} break;
							};
						};
						type_1619.external = external_1617;
						type_1619.extend = DataHelper.extractTypeName(ext_1611);
						for (const implement of $toIterator(impl_1613)) {
							const temp_1624 = (implement);
							switch (temp_1624&&temp_1624[0]) {
							case 1: {
								const name_1626 = temp_1624[1];
								type_1619.implement = name_1626
							} break;

							case 2: {
								const name_1628 = temp_1624[1];
								const params = temp_1624[2];
								{
									type_1619.implement = name_1628;
									type_1619.implementParams = (() => {
										const result_1631 = [];
										const value_1633 = params;
										for (const param of $toIterator(value_1633)) result_1631.push(DataHelper.extractTypeName(param));
										return result_1631;
									})();
								}
							} break;
							};
						};
						{
							const temp_1635 = (t_1609);
							switch (temp_1635&&temp_1635[0]) {
							case 1: {
								const name_1637 = temp_1635[1];
								{
								}
							} break;

							case 2: {
								const name_1639 = temp_1635[1];
								const params_1641 = temp_1635[2];
								type_1619.genericParams = (() => {
									const result_1643 = [];
									const value_1645 = params_1641;
									for (const param of $toIterator(value_1645)) result_1643.push(DataHelper.extractTypeName(param));
									return result_1643;
								})()
							} break;
							};
						};
						const atts_1647 = this.project.mapDecorators.get(e_1420);
						{
							let step_1649 = 0;
							const require_1651 = Normalizer.getAtt(atts_1647, 'require');
							if (step_1649 == 0 && require_1651 != null) { step_1649 = 1 };
							if (step_1649 == 1) {
								const temp_1653 = (require_1651.values[0]);
								switch (temp_1653&&temp_1653[0]) {
								case 0: {
									const s_1655 = temp_1653[1];
									type_1619.jsRequire = s_1655
								} break;

								default:
								throw '@require takes string as argument'
								};
							};
						};
						{
							let step_1657 = 0;
							const native_1659 = Normalizer.getAtt(atts_1647, 'native');
							if (step_1657 == 0 && native_1659 != null) { step_1657 = 1 };
							if (step_1657 == 1) {
								const temp_1661 = (native_1659.values[0]);
								switch (temp_1661&&temp_1661[0]) {
								case 0: {
									const s_1663 = temp_1661[1];
									{
										type_1619.jsNative = s_1663;
										type_1619.name = this.unique(s_1663, e_1420);
									}
								} break;

								default:
								throw '@native takes string as argument'
								};
							} else {
								type_1619.name = this.unique(DataHelper.extractTypeName(t_1609), e_1420);
							};
						};
						this.globals.push(type_1619.name);
						for (const f of $toIterator(fields_1615)) {
							const temp_1665 = (f);
							switch (temp_1665&&temp_1665[0]) {
							case 24: {
								const name_1667 = temp_1665[1];
								const t_1669 = temp_1665[2];
								const expr_1671 = temp_1665[3];
								const const_1673 = temp_1665[4];
								{
									const uname_1675 = (() => {
										const result_1677 = this.parentNames.get(f);
										if (result_1677 != null) { return result_1677 };
										return this.unique(name_1667, f);
									})();
									if (const_1673) {
										const value_1679 = this.nodeToExpression(expr_1671);
										this.saveInlineIfViable(f, value_1679);
										type_1619.vars.push(/*Const*/[4,uname_1675,value_1679,this.typer.types.get(f),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:913"]);
									} else {
										type_1619.vars.push(/*Var*/[3,uname_1675,this.nodeToExpression(expr_1671),this.typer.types.get(f),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:915"]);
									};
								}
							} break;

							case 27: {
								const field_1681 = temp_1665[1];
								{
									const temp_1683 = (field_1681);
									switch (temp_1683&&temp_1683[0]) {
									case 24: {
										const name_1685 = temp_1683[1];
										const t_1687 = temp_1683[2];
										const expr_1689 = temp_1683[3];
										const const_1691 = temp_1683[4];
										{
											const uname_1693 = (() => {
												const result_1695 = this.parentNames.get(f);
												if (result_1695 != null) { return result_1695 };
												return this.unique(name_1685, f);
											})();
											if (const_1691) { type_1619.vars.push(/*Const*/[4,uname_1693,this.nodeToExpression(expr_1689),this.typer.types.get(field_1681),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:922"]) } else {
												type_1619.vars.push(/*Var*/[3,uname_1693,this.nodeToExpression(expr_1689),this.typer.types.get(field_1681),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:924"]);
											};
											type_1619.property.push(uname_1693);
										}
									} break;
									};
								}
							} break;

							case 22: {
								const name_1697 = temp_1665[1];
								const expr_1699 = temp_1665[2];
								const vars_1701 = temp_1665[3];
								const rettype_1703 = temp_1665[4];
								const external_1705 = temp_1665[5];
								{
									const uname_1707 = /*?*/((name_1697 == 'new'))? ('new') : ((() => {
										const result_1709 = this.parentNames.get(f);
										if (result_1709 != null) { return result_1709 };
										return this.unique(name_1697, f);
									})());
									const a_1711 = [];
									const defaults_1713 = [];
									const types_1715 = [];
									for (const arg of $toIterator(vars_1701)) {
										const temp_1717 = (arg);
										switch (temp_1717&&temp_1717[0]) {
										case 24: {
											const name_1719 = temp_1717[1];
											const t_1721 = temp_1717[2];
											const expr_1723 = temp_1717[3];
											const const_1725 = temp_1717[4];
											{
												a_1711.push(this.unique(name_1719, arg));
												types_1715.push(t_1721);
												if (expr_1723 != null) { defaults_1713.push(this.nodeToExpression(expr_1723)) } else {
													defaults_1713.push(null);
												};
											}
										} break;
										};
									};
									type_1619.methods.push(/*Function*/[5,uname_1707,this.unwrapNestingBlocks(this.nodeToStatement(expr_1699)),a_1711,defaults_1713,this.typer.types.get(f),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:943"]);
								}
							} break;

							case 47: {
								const field_1727 = temp_1665[1];
								{
									const temp_1729 = (field_1727);
									switch (temp_1729&&temp_1729[0]) {
									case 24: {
										const name_1731 = temp_1729[1];
										const t_1733 = temp_1729[2];
										const expr_1735 = temp_1729[3];
										const const_1737 = temp_1729[4];
										{
											const uname_1739 = (() => {
												const result_1741 = this.parentNames.get(field_1727);
												if (result_1741 != null) { return result_1741 };
												return this.unique(name_1731, field_1727);
											})();
											if (const_1737) {
												const value_1743 = this.nodeToExpression(expr_1735);
												this.saveInlineIfViable(f, value_1743);
												type_1619.staticVars.push(/*Const*/[4,uname_1739,value_1743,this.typer.types.get(field_1727),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:951"]);
											} else {
												type_1619.staticVars.push(/*Var*/[3,uname_1739,this.nodeToExpression(expr_1735),this.typer.types.get(field_1727),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:953"]);
											};
										}
									} break;

									case 22: {
										const name_1745 = temp_1729[1];
										const expr_1747 = temp_1729[2];
										const vars_1749 = temp_1729[3];
										const rettype_1751 = temp_1729[4];
										{
											const uname_1753 = (() => {
												const result_1755 = this.parentNames.get(field_1727);
												if (result_1755 != null) { return result_1755 };
												return this.unique(name_1745, field_1727);
											})();
											const a_1757 = [];
											const defaults_1759 = [];
											const types_1761 = [];
											for (const arg of $toIterator(vars_1749)) {
												const temp_1763 = (arg);
												switch (temp_1763&&temp_1763[0]) {
												case 24: {
													const name_1765 = temp_1763[1];
													const t_1767 = temp_1763[2];
													const expr_1769 = temp_1763[3];
													const const_1771 = temp_1763[4];
													{
														a_1757.push(this.unique(name_1765, arg));
														types_1761.push(t_1767);
														if (expr_1769 != null) { defaults_1759.push(this.nodeToExpression(expr_1769)) } else {
															defaults_1759.push(null);
														};
													}
												} break;
												};
											};
											type_1619.staticMethods.push(/*Function*/[5,uname_1753,this.unwrapNestingBlocks(this.nodeToStatement(expr_1747)),a_1757,defaults_1759,this.typer.types.get(field_1727),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:970"]);
										}
									} break;

									default:
									console.error('(internal warning) Unknown class static field kind:', field_1727)
									};
								}
							} break;

							default:
							console.error('(internal warning) Unknown class field kind:', f)
							};
						};
						this.niceProject.classes.push(type_1619);
						return null;
					}
				} break;

				case 9: {
					{
					}
				} break;

				case 31: {
					const path_1773 = temp_1422[1];
					const t_1775 = temp_1422[2];
					const args_1777 = temp_1422[3];
					const fields_1779 = temp_1422[4];
					const values_1781 = temp_1422[5];
					{
						return /*Const*/[4,this.unique('temp'),this.nodeToExpression(e_1420),this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:982"];
						const v_1783 = /*Ident*/[6,(() => {
							const result_1785 = this.parentNames.get(this.typer.parents.get(e_1420));
							if (result_1785 != null) { return result_1785 };
							return DataHelper.extractTypeName(t_1775);
						})(),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:984"];
						const a_1787 = [];
						for (const arg of $toIterator(args_1777)) {
							a_1787.push(this.nodeToExpression(arg));
						};
						const resultType_1789 = this.typer.types.get(e_1420);
						if (fields_1779.length > 0) {
							const temp_1791 = this.unique('temp');
							const block_1793 = [/*Const*/[4,temp_1791,/*New*/[15,v_1783,a_1787,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:992"],resultType_1789,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:992"]];
							{
								let field_1795 = 0;
								let it = 0;
								let at = fields_1779.length;
								while (it < at) {
									field_1795 = it;
									it++;
									{
										block_1793.push(/*Assign*/[10,/*Dot*/[11,/*Ident*/[6,temp_1791,resultType_1789,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:996"],fields_1779[field_1795],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:995"],this.nodeToExpression(values_1781[field_1795]),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:994"]);
									};
								};
							};
							return /*Block*/[1,block_1793,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1005"];
						};
						const result_1799 = null;
						return null;
					}
				} break;

				case 13: {
					const e_1801 = temp_1422[1];
					const args_1803 = temp_1422[2];
					const argNames_1805 = temp_1422[3];
					{
						let kind_1807 = 11;
						{
							const temp_1809 = (e_1801);
							switch (temp_1809&&temp_1809[0]) {
							case 4: {
								{
									const a_1811 = [];
									for (const arg of $toIterator(args_1803)) {
										a_1811.push(this.nodeToExpression(arg));
									};
									return /*SuperConstructor*/[19,a_1811,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1022"];
								}
							} break;

							case 29: {
								const expr_1813 = temp_1809[1];
								{
									const temp_1815 = ((this.typer.types.get(expr_1813)));
									switch (temp_1815&&temp_1815[0]) {
									case 4: {
										kind_1807 = 12
									} break;

									case 3: {
										kind_1807 = 10
									} break;
									};
								}
							} break;
							};
						};
						const v_1817 = this.nodeToExpression(e_1801);
						const a_1819 = [];
						for (const arg of $toIterator(args_1803)) {
							a_1819.push(this.nodeToExpression(arg));
						};
						let expects = [];
						{
							const temp_1822 = ((this.typer.types.get(e_1801)));
							switch (temp_1822&&temp_1822[0]) {
							case 10: {
								const args_1824 = temp_1822[1];
								expects = args_1824
							} break;
							};
						};
						{
							const temp_1826 = (v_1817);
							switch (temp_1826&&temp_1826[0]) {
							case 11: {
								const expr_1828 = temp_1826[1];
								{
									const temp_1830 = (expr_1828);
									switch (temp_1830&&temp_1830[0]) {
									case 10: {
										kind_1807 = 12
									} break;
									};
								}
							} break;
							};
						};
						return /*Call*/[2,v_1817,a_1819,expects,kind_1807,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1048"];
					}
				} break;

				case 24: {
					const name_1832 = temp_1422[1];
					const t_1834 = temp_1422[2];
					const expr_1836 = temp_1422[3];
					const const_1838 = temp_1422[4];
					const external_1840 = temp_1422[5];
					{
						const uname_1842 = (() => {
							const result_1844 = this.parentNames.get(e_1420);
							if (result_1844 != null) { return result_1844 };
							return this.unique(name_1832, e_1420);
						})();
						if (external_1840) { return null };
						if (const_1838) {
							const value_1846 = this.nodeToExpression(expr_1836);
							this.saveInlineIfViable(e_1420, value_1846);
							return /*Const*/[4,uname_1842,value_1846,this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1069"];
						};
						return /*Var*/[3,uname_1842,this.nodeToExpression(expr_1836),this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1071"];
					}
				} break;

				case 22: {
					const name_1848 = temp_1422[1];
					const expr_1850 = temp_1422[2];
					const vars_1852 = temp_1422[3];
					const rettype_1854 = temp_1422[4];
					const external_1856 = temp_1422[5];
					{
						let uname_1858 = null;
						const atts_1860 = this.project.mapDecorators.get(e_1420);
						{
							let step_1862 = 0;
							const native_1864 = Normalizer.getAtt(atts_1860, 'native');
							if (step_1862 == 0 && native_1864 != null) { step_1862 = 1 };
							if (step_1862 == 1) {
								const temp_1866 = (native_1864.values[0]);
								switch (temp_1866&&temp_1866[0]) {
								case 0: {
									const s_1868 = temp_1866[1];
									{
										if (this.parentNames.get(e_1420) == null) { this.uniqueNative(s_1868, e_1420) };
										uname_1858 = this.parentNames.get(e_1420);
									}
								} break;

								default:
								throw '@native takes string as argument'
								};
							} else {
								uname_1858 = /*?*/((name_1848 != null))? (((() => {
									const result_1870 = this.parentNames.get(e_1420);
									if (result_1870 != null) { return result_1870 };
									return this.unique(name_1848, e_1420);
								})())) : (null);
							};
						};
						if (external_1856) { return null };
						let rettype_1872 = rettype_1854;
						const a_1874 = [];
						const defaults_1876 = [];
						let types_1878 = [];
						for (const arg of $toIterator(vars_1852)) {
							const temp_1880 = (arg);
							switch (temp_1880&&temp_1880[0]) {
							case 24: {
								const name_1882 = temp_1880[1];
								const t_1884 = temp_1880[2];
								const expr_1886 = temp_1880[3];
								const const_1888 = temp_1880[4];
								{
									a_1874.push(this.unique(name_1882, arg));
									types_1878.push(t_1884);
									if (expr_1886 != null) { defaults_1876.push(this.nodeToExpression(expr_1886)) } else {
										defaults_1876.push(null);
									};
								}
							} break;
							};
						};
						if (name_1848 == 'new') { return /*Function*/[5,null,this.unwrapNestingBlocks(this.nodeToStatement(expr_1850)),a_1874,defaults_1876,this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1114"] };
						return /*Function*/[5,uname_1858,this.unwrapNestingBlocks(this.nodeToStatement(expr_1850)),a_1874,defaults_1876,this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1116"];
					}
				} break;

				case 49: {
					const name_1890 = temp_1422[1];
					const over_1892 = temp_1422[2];
					const by_1894 = temp_1422[3];
					const range_1896 = temp_1422[4];
					{
						if (range_1896 == null) {
							const temp_1898 = (over_1892);
							switch (temp_1898&&temp_1898[0]) {
							case 5: {
								const s_1900 = temp_1898[1];
								{
									const i_1902 = this.unique(name_1890, e_1420);
									const it_1904 = this.unique('it');
									return /*Block*/[1,[/*Var*/[3,i_1902,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1126"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1126"], /*Var*/[3,it_1904,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1127"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1127"], /*While*/[13,/*Binop*/[16,/*Ident*/[6,it_1904,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1129"],99,/*Int*/[1,s_1900,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1129"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1129"],/*Block*/[1,[/*Assign*/[10,/*Ident*/[6,i_1902,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1131"],/*Ident*/[6,it_1904,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1131"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1131"], /*Increment*/[14,/*Ident*/[6,it_1904,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1132"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1132"], this.nodeToStatement(by_1894)],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1130"],true,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1128"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1125"];
								}
							} break;

							default:
							{
								let iteratorOverInt = false;
								{
									const temp_1907 = ((this.typer.types.get(over_1892)));
									switch (temp_1907&&temp_1907[0]) {
									case 4: {
										const type_1909 = temp_1907[1];
										const generic = temp_1907[2];
										if ((generic == null || generic.length == 0) && (type_1909.name == 'Int')) { iteratorOverInt = true }
									} break;
									};
								};
								if (iteratorOverInt) {
									const i_1912 = this.unique(name_1890, e_1420);
									const it_1914 = this.unique('it');
									const finish = this.unique('at');
									return /*Block*/[1,[/*Var*/[3,i_1912,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1153"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1153"], /*Var*/[3,it_1914,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1154"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1154"], /*Var*/[3,finish,this.nodeToExpression(over_1892),this.typer.types.get(over_1892),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1155"], /*While*/[13,/*Binop*/[16,/*Ident*/[6,it_1914,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1158"],99,/*Ident*/[6,finish,this.typer.types.get(over_1892),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1160"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1157"],/*Block*/[1,[/*Assign*/[10,/*Ident*/[6,i_1912,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1164"],/*Ident*/[6,it_1914,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1164"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1164"], /*Increment*/[14,/*Ident*/[6,it_1914,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1165"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1165"], this.nodeToStatement(by_1894)],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1163"],true,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1156"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1152"];
								};
							}
							};
						};
						{
							let step_1917 = 0;
							const range_1919 = range_1896;
							if (step_1917 == 0 && range_1919 != null) { step_1917 = 1 };
							if (step_1917 == 1) {
								const i_1921 = this.unique(name_1890, e_1420);
								const it_1923 = this.unique('it');
								const finish_1925 = this.unique('at');
								return /*Block*/[1,[/*Var*/[3,i_1921,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1190"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1190"], /*Var*/[3,it_1923,this.nodeToExpression(over_1892),this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1191"], /*Var*/[3,finish_1925,this.nodeToExpression(range_1919),this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1192"], /*While*/[13,/*Binop*/[16,/*Ident*/[6,it_1923,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1194"],99,/*Ident*/[6,finish_1925,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1194"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1194"],/*Block*/[1,[/*Assign*/[10,/*Ident*/[6,i_1921,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1196"],/*Ident*/[6,it_1923,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1196"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1196"], /*Increment*/[14,/*Ident*/[6,it_1923,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1197"],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1197"], this.nodeToStatement(by_1894)],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1195"],true,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1193"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1189"];
							};
						};
						return /*For*/[12,name_1890,this.nodeToExpression(over_1892),this.nodeToStatement(by_1894),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1203"];
					}
				} break;

				case 16: {
					const e_1927 = temp_1422[1];
					{
						if (e_1927 == null) { return /*Return*/[6,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1207"] };
						return /*Return*/[6,this.nodeToExpression(e_1927),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1209"];
					}
				} break;

				case 29: {
					const expr_1929 = temp_1422[1];
					const name_1931 = temp_1422[2];
					return /*Const*/[4,this.unique('temp'),this.nodeToExpression(e_1420),this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1213"]
				} break;

				case 30: {
					const expr_1933 = temp_1422[1];
					const name_1935 = temp_1422[2];
					return /*Const*/[4,this.unique('temp'),this.nodeToExpression(e_1420),this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1215"]
				} break;

				case 14: {
					const econd_1937 = temp_1422[1];
					const eif_1939 = temp_1422[2];
					const eelse_1941 = temp_1422[3];
					{
						let binds_1943 = false;
						for (const cond of $toIterator(econd_1937)) {
							const temp_1945 = (cond);
							switch (temp_1945&&temp_1945[0]) {
							case 24: {
								binds_1943 = true
							} break;
							};
						};
						if ((!binds_1943) && econd_1937.length == 1) { return /*If*/[7,this.nodeToExpression(econd_1937[0]),this.nodeToStatement(eif_1939),this.nodeToStatement(eelse_1941),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1230"] };
						if ((!binds_1943)) {
							let parens_1947 = /*Parenthesis*/[19,this.nodeToExpression(econd_1937[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1235"];
							let i_1949 = 1;
							while ((i_1949 < econd_1937.length)) {
								parens_1947 = /*Binop*/[16,parens_1947,92,/*Parenthesis*/[19,this.nodeToExpression(econd_1937[i_1949]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1238"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1238"];
								i_1949++;
							};
							return /*If*/[7,parens_1947,this.nodeToStatement(eif_1939),this.nodeToStatement(eelse_1941),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1241"];
						};
						const block_1951 = [];
						let current = 0;
						const step_1954 = this.unique('step');
						block_1951.push(/*Var*/[3,step_1954,/*Int*/[1,0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1249"],this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1249"]);
						let nullable_1956 = false;
						let last = '';
						const lastType = this.typer.types.get(econd_1937[0]);
						{
							const temp_1960 = (econd_1937[0]);
							switch (temp_1960&&temp_1960[0]) {
							case 24: {
								const name_1962 = temp_1960[1];
								const t_1964 = temp_1960[2];
								const expr_1966 = temp_1960[3];
								const const_1968 = temp_1960[4];
								{
									last = this.unique(name_1962, econd_1937[0]);
									nullable_1956 = true;
									block_1951.push(/*Const*/[4,last,this.nodeToExpression(expr_1966),this.typer.types.get(econd_1937[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1257"]);
								}
							} break;

							default:
							{
								last = this.unique('temp');
								block_1951.push(/*Const*/[4,last,this.nodeToExpression(econd_1937[0]),this.typer.types.get(econd_1937[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1260"]);
							}
							};
						};
						while ((current < econd_1937.length - 1)) {
							const temp_1970 = (econd_1937[current + 1]);
							switch (temp_1970&&temp_1970[0]) {
							case 24: {
								const vname = temp_1970[1];
								const t_1973 = temp_1970[2];
								const expr_1975 = temp_1970[3];
								const const_1977 = temp_1970[4];
								{
									const name_1979 = this.unique(vname, econd_1937[current + 1]);
									block_1951.push(/*Var*/[3,name_1979,/*Null*/[9],this.typer.types.get(expr_1975),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1266"]);
									block_1951.push(/*If*/[7,/*Binop*/[16,/*Binop*/[16,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1269"],95,/*Int*/[1,current + 0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1269"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1269"],92,/*Binop*/[16,/*Ident*/[6,last,lastType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1271"],103,/*?*/(nullable_1956)? (/*Null*/[9]) : /*False*/[5],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1271"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1268"],/*Block*/[1,[/*Assign*/[10,/*Ident*/[6,name_1979,this.typer.types.get(expr_1975),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1275"],this.nodeToExpression(expr_1975),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1275"], /*Assign*/[10,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1276"],/*Int*/[1,current + 1,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1276"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1276"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1274"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1267"]);
									current++;
									last = name_1979;
									nullable_1956 = true;
								}
							} break;

							default:
							{
								const next = this.unique('temp');
								const nextType = this.typer.types.get(econd_1937[0]);
								block_1951.push(/*Var*/[3,next,/*Null*/[9],nextType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1284"]);
								block_1951.push(/*If*/[7,/*Binop*/[16,/*Binop*/[16,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1287"],95,/*Int*/[1,current + 0,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1287"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1287"],92,/*Binop*/[16,/*Ident*/[6,last,lastType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1289"],103,/*?*/(nullable_1956)? (/*Null*/[9]) : /*False*/[5],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1289"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1286"],/*Block*/[1,[/*Assign*/[10,/*Ident*/[6,next,nextType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1293"],this.nodeToExpression(econd_1937[current + 1]),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1293"], /*Assign*/[10,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1294"],/*Int*/[1,current + 1,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1294"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1294"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1292"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1285"]);
								current++;
								last = next;
								nullable_1956 = false;
							}
							};
						};
						block_1951.push(/*If*/[7,/*Binop*/[16,/*Binop*/[16,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1304"],95,/*Int*/[1,econd_1937.length - 1,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1304"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1304"],92,/*Binop*/[16,/*Ident*/[6,last,lastType,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1306"],103,/*?*/(nullable_1956)? (/*Null*/[9]) : /*False*/[5],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1306"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1303"],/*Assign*/[10,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1309"],/*Int*/[1,econd_1937.length,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1309"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1309"],null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1302"]);
						block_1951.push(/*If*/[7,/*Binop*/[16,/*Ident*/[6,step_1954,this.typer.typeInt,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1313"],95,/*Int*/[1,econd_1937.length,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1313"],this.typer.typeBool,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1313"],this.nodeToStatement(eif_1939),this.nodeToStatement(eelse_1941),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1312"]);
						return /*Block*/[1,block_1951,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1316"];
					}
				} break;

				case 28: {
					const expr_1983 = temp_1422[1];
					const t_1985 = temp_1422[2];
					const v_1987 = temp_1422[3];
					const catches = temp_1422[4];
					{
						let temp_1990 = this.unique('temp');
						let tt = [];
						let vv = [];
						for (const c of $toIterator(v_1987)) {
							vv.push(DataHelper.nameOf(c));
						};
						let cc = [];
						for (const c of $toIterator(catches)) {
							cc.push(this.nodeToStatement(c));
						};
						for (const c of $toIterator(t_1985)) {
							tt.push(this.typer.types.get(c));
						};
						return /*Try*/[8,this.nodeToStatement(expr_1983),tt,vv,cc,temp_1990,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1332"];
					}
				} break;

				case 17: {
					const value_1995 = temp_1422[1];
					return /*Throw*/[9,this.nodeToExpression(value_1995),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1335"]
				} break;

				case 11: {
					const a_1997 = temp_1422[1];
					const op_1999 = temp_1422[2];
					const b_2001 = temp_1422[3];
					return /*Assignop*/[11,this.nodeToExpression(a_1997),op_1999,this.nodeToExpression(b_2001),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1338"]
				} break;

				case 10: {
					const a_2003 = temp_1422[1];
					const op_2005 = temp_1422[2];
					const b_2007 = temp_1422[3];
					{
						const temp_2009 = (op_2005);
						switch (temp_2009) {
						case 91: {
							return /*Assign*/[10,this.nodeToExpression(a_2003),this.nodeToExpression(b_2007),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1343"]
						} break;

						default:
						{
							const sa_2011 = this.nodeToStatement(a_2003);
							const sb_2013 = this.nodeToStatement(b_2007);
							if ((sa_2011 == null) && (sb_2013 == null)) { return null };
							if ((sa_2011 == null) || (sb_2013 == null)) { return (() => {
								const result_2015 = sa_2011;
								if (result_2015 != null) { return result_2015 };
								return sb_2013;
							})() };
							return /*Statements*/[0,[sa_2011, sb_2013],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1353"];
						}
						};
					}
				} break;

				case 19: {
					return /*Continue*/[17]
				} break;

				case 18: {
					return /*Break*/[18]
				} break;

				case 21: {
					const econd_2017 = temp_1422[1];
					const e_2019 = temp_1422[2];
					const pre = temp_1422[3];
					return /*While*/[13,this.nodeToExpression(econd_2017),this.nodeToStatement(e_2019),pre,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1360"]
				} break;

				case 20: {
					const op_2022 = temp_1422[1];
					const postfix_2024 = temp_1422[2];
					const e_2026 = temp_1422[3];
					{
						const temp_2028 = (op_2022);
						switch (temp_2028) {
						case 87: {
							return /*Increment*/[14,this.nodeToExpression(e_2026),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1364"]
						} break;

						case 86: {
							return /*Decrement*/[15,this.nodeToExpression(e_2026),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1365"]
						} break;

						default:
						{
						}
						};
					}
				} break;

				case 15: {
					const inner_2030 = temp_1422[1];
					{
						const unwrapNestedParens_2032 = (inner_2034) => {
							const temp_2036 = (inner_2034);
							switch (temp_2036&&temp_2036[0]) {
							case 15: {
								const i_2038 = temp_2036[1];
								return unwrapNestedParens_2032(i_2038)
							} break;

							default:
							return inner_2034
							};
						};
						return this.nodeToStatement(unwrapNestedParens_2032(inner_2030));
					}
				} break;

				case 35: {
					const exprs_2040 = temp_1422[1];
					const conds_2042 = temp_1422[2];
					const guards_2044 = temp_1422[3];
					const cases_2046 = temp_1422[4];
					{
						if (exprs_2040.length > 1) { console.error('Multiple switch values not yet supported:', e_1420, this.project.data.get(e_1420)) };
						const s_2048 = [];
						const c = [];
						if (this.nativeEnums) {
							const index_2051 = this.nodeToExpression(exprs_2040[0]);
							{
								let i_2053 = 0;
								let it_2055 = 0;
								let at_2057 = cases_2046.length;
								while (it_2055 < at_2057) {
									i_2053 = it_2055;
									it_2055++;
									{
										const toCase = (co) => {
											const temp_2061 = (co);
											switch (temp_2061&&temp_2061[0]) {
											case 8: {
												return /*Null*/[9]
											} break;

											case 45: {
												return /*Underscore*/[34]
											} break;

											case 0: {
												const v_2063 = temp_2061[1];
												return /*String*/[0,v_2063,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1392"]
											} break;

											case 5: {
												const v_2065 = temp_2061[1];
												return /*Int*/[1,v_2065,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1393"]
											} break;

											case 7: {
												const v_2067 = temp_2061[1];
												return /*Float*/[3,v_2067,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1394"]
											} break;

											case 2: {
												const v_2069 = temp_2061[1];
												{
													if (v_2069) { return /*True*/[4] };
													return /*False*/[5];
												}
											} break;

											case 29: {
												const expr_2071 = temp_2061[1];
												const name_2073 = temp_2061[2];
												return /*Dot*/[11,this.nodeToExpression(expr_2071),name_2073,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1400"]
											} break;

											case 30: {
												const expr_2075 = temp_2061[1];
												const name_2077 = temp_2061[2];
												return /*Dot*/[11,this.nodeToExpression(expr_2075),name_2077,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1401"]
											} break;

											case 10: {
												const a_2079 = temp_2061[1];
												const op_2081 = temp_2061[2];
												const b_2083 = temp_2061[3];
												{
													const temp_2085 = (op_2081);
													switch (temp_2085) {
													case 104: {
														return /*Binop*/[16,toCase(a_2079),104,toCase(b_2083),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1403"]
													} break;

													default:
													console.error('(internal warning) Unknown native case binop kind:', e_1420, this.typer.parents.get(e_1420))
													};
												}
											} break;

											case 13: {
												const e_2087 = temp_2061[1];
												const args_2089 = temp_2061[2];
												const argNames_2091 = temp_2061[3];
												{
													const temp_2093 = (e_2087);
													switch (temp_2093&&temp_2093[0]) {
													case 30: {
														const expr_2095 = temp_2093[1];
														const name_2097 = temp_2093[2];
														{
															const a_2099 = [];
															{
																let arg = 0;
																let it_2102 = 0;
																let at_2104 = args_2089.length;
																while (it_2102 < at_2104) {
																	arg = it_2102;
																	it_2102++;
																	{
																		const temp_2106 = (args_2089[arg]);
																		switch (temp_2106&&temp_2106[0]) {
																		case 1: {
																			const name_2108 = temp_2106[1];
																			a_2099.push(/*Ident*/[6,this.unique(name_2108, args_2089[arg]),null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1410"])
																		} break;

																		case 45: {
																			a_2099.push(/*Underscore*/[34])
																		} break;

																		default:
																		console.log('(internal warning) Unknown native case extract value kind:', args_2089[arg])
																		};
																	};
																};
															};
															return /*Call*/[14,this.nodeToExpression(e_2087),a_2099,null,11,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1414"];
														}
													} break;

													default:
													console.error('(internal warning) Unknown case extract kind:', e_2087, this.typer.parents.get(e_2087))
													};
												}
											} break;

											default:
											console.error('(internal warning) Unknown native enum case kind:', co, this.project.data.get(co))
											};
										};
										c.push([toCase(conds_2042[i_2053])]);
										s_2048.push(this.nodeToStatement(cases_2046[i_2053]));
									};
								};
							};
							return /*Switch*/[16,index_2051,c,s_2048,[],[],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1424"];
						};
						const temp_2110 = this.unique('temp');
						const value_2112 = this.nodeToExpression(exprs_2040[0]);
						let index_2114 = /*Ident*/[6,temp_2110,null,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1429"];
						let promoted = false;
						let enumType = null;
						{
							const temp_2118 = ((this.typer.types.get(exprs_2040[0])));
							switch (temp_2118&&temp_2118[0]) {
							case 6: {
								const type_2120 = temp_2118[1];
								{
									if (type_2120.fieldsTypeSimple == null) {
										index_2114 = /*EnumTag*/[31,index_2114,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1435"];
										promoted = true;
									};
									enumType = type_2120;
								}
							} break;

							case 7: {
								const type_2122 = temp_2118[1];
								{
									if (type_2122.fieldsTypeSimple == null) {
										index_2114 = /*EnumTag*/[31,index_2114,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1438"];
										promoted = true;
									};
									enumType = type_2122;
								}
							} break;
							};
						};
						let i_2124 = 0;
						const guardians = [];
						const binds_2127 = [];
						for (const ec of $toIterator(cases_2046)) {
							const block_2129 = [];
							const co_2131 = conds_2042[i_2124];
							const cx = [];
							const binders = [];
							binds_2127.push(binders);
							const addTag = (co_2136) => {
								const temp_2138 = (co_2136);
								switch (temp_2138&&temp_2138[0]) {
								case 8: {
									cx.push(/*Null*/[9])
								} break;

								case 45: {
									{
									}
								} break;

								case 0: {
									const v_2140 = temp_2138[1];
									cx.push(/*String*/[0,v_2140,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1456"])
								} break;

								case 5: {
									const v_2142 = temp_2138[1];
									cx.push(/*Int*/[1,v_2142,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1457"])
								} break;

								case 7: {
									const v_2144 = temp_2138[1];
									cx.push(/*Float*/[3,v_2144,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1458"])
								} break;

								case 2: {
									const v_2146 = temp_2138[1];
									if (v_2146) { cx.push(/*True*/[4]) } else {
										cx.push(/*False*/[5]);
									}
								} break;

								case 13: {
									const e_2148 = temp_2138[1];
									const args_2150 = temp_2138[2];
									const argNames_2152 = temp_2138[3];
									{
										{
											const temp_2154 = (e_2148);
											switch (temp_2154&&temp_2154[0]) {
											case 30: {
												const expr_2156 = temp_2154[1];
												const name_2158 = temp_2154[2];
												{
													const parent_2160 = this.typer.parents.get(expr_2156);
													const tag_2162 = this.getTag(parent_2160, name_2158);
													cx.push(tag_2162);
												}
											} break;

											case 51: {
												const t_2164 = temp_2154[1];
												{
													const temp_2166 = (t_2164);
													switch (temp_2166&&temp_2166[0]) {
													case 1: {
														const name_2168 = temp_2166[1];
														{
															let step_2170 = 0;
															const enumType_2172 = enumType;
															if (step_2170 == 0 && enumType_2172 != null) { step_2170 = 1 };
															if (step_2170 == 1) { cx.push(this.getTag(enumType_2172.parent, name_2168)) };
														}
													} break;
													};
												}
											} break;

											default:
											console.error('(internal warning) Unknown case extract kind:', e_2148, this.typer.parents.get(e_2148))
											};
										};
										if ((!promoted)) { index_2114 = /*EnumTag*/[31,index_2114,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1483"] };
										promoted = true;
										{
											let arg_2174 = 0;
											let it_2176 = 0;
											let at_2178 = args_2150.length;
											while (it_2176 < at_2178) {
												arg_2174 = it_2176;
												it_2176++;
												{
													const temp_2180 = (args_2150[arg_2174]);
													switch (temp_2180&&temp_2180[0]) {
													case 1: {
														const name_2182 = temp_2180[1];
														binders.push(/*Const*/[4,this.unique(name_2182, args_2150[arg_2174]),/*EnumParameter*/[33,/*Ident*/[6,temp_2110,this.typer.types.get(args_2150[arg_2174]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1492"],arg_2174,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1491"],this.typer.types.get(args_2150[arg_2174]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1489"])
													} break;

													case 45: {
														{
														}
													} break;

													case 46: {
														{
														}
													} break;

													default:
													console.log('(internal warning) Unknown case extract value kind:', arg_2174)
													};
												};
											};
										};
									}
								} break;

								case 30: {
									const expr_2184 = temp_2138[1];
									const name_2186 = temp_2138[2];
									cx.push(this.getTag(this.typer.parents.get(expr_2184), name_2186))
								} break;

								case 10: {
									const a_2188 = temp_2138[1];
									const op_2190 = temp_2138[2];
									const b_2192 = temp_2138[3];
									{
										const temp_2194 = (op_2190);
										switch (temp_2194) {
										case 104: {
											{
												addTag(a_2188);
												addTag(b_2192);
											}
										} break;

										default:
										console.error('(internal warning) Unknown case binop kind:', e_1420, this.typer.parents.get(e_1420))
										};
									}
								} break;

								case 51: {
									const t_2196 = temp_2138[1];
									{
										const temp_2198 = (t_2196);
										switch (temp_2198&&temp_2198[0]) {
										case 1: {
											const name_2200 = temp_2198[1];
											{
												let step_2202 = 0;
												const enumType_2204 = enumType;
												if (step_2202 == 0 && enumType_2204 != null) { step_2202 = 1 };
												if (step_2202 == 1) { cx.push(this.getTag(enumType_2204.parent, name_2200)) };
											}
										} break;
										};
									}
								} break;

								default:
								console.error('(internal warning) Unknown case kind:', co_2136, this.project.data.get(co_2136))
								};
							};
							addTag(co_2131);
							c.push(cx);
							block_2129.push(this.unwrapNestingBlocks(this.nodeToStatement(ec)));
							s_2048.push(this.unwrapNestingBlocks(/*Block*/[1,block_2129,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1526"]));
							{
								let step_2206 = 0;
								const guard = guards_2044[i_2124];
								if (step_2206 == 0 && guard != null) { step_2206 = 1 };
								if (step_2206 == 1) { guardians.push(this.nodeToExpression(guard)) } else {
									guardians.push(null);
								};
							};
							i_2124++;
						};
						return /*Block*/[1,[/*Const*/[4,temp_2110,value_2112,this.typer.types.get(exprs_2040[0]),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1538"], /*Switch*/[16,index_2114,c,s_2048,guardians,binds_2127,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1539"]],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1537"];
					}
				} break;

				case 25: {
					const vars_2209 = temp_1422[1];
					{
						const s_2211 = [];
						for (const v of $toIterator(vars_2209)) {
							let step_2213 = 0;
							const st = this.nodeToStatement(v);
							if (step_2213 == 0 && st != null) { step_2213 = 1 };
							if (step_2213 == 1) { s_2211.push(st) };
						};
						return /*Statements*/[0,s_2211,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1549"];
					}
				} break;

				case 34: {
					const v_2216 = temp_1422[1];
					const index_2218 = temp_1422[2];
					{
						this.project.hints.push(new Hint(10, ('Unused value of index `' + (Node.stringify(e_1420)) + '`'), this.project.data.get(e_1420)));
						{
							const temp_2220 = (index_2218);
							switch (temp_2220&&temp_2220[0]) {
							case 0: {
								return this.nodeToStatement(v_2216)
							} break;

							case 5: {
								return this.nodeToStatement(v_2216)
							} break;

							case 2: {
								return this.nodeToStatement(v_2216)
							} break;

							case 7: {
								return this.nodeToStatement(v_2216)
							} break;
							};
						};
						return /*Statements*/[0,[this.nodeToStatement(v_2216), this.nodeToStatement(index_2218)],"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1561"];
					}
				} break;

				case 1: {
					const name_2222 = temp_1422[1];
					this.project.hints.push(new Hint(10, ('Unused value `' + (name_2222) + '`'), this.project.data.get(e_1420)))
				} break;

				case 23: {
					this.project.hints.push(new Hint(10, 'Unused arrow => function', this.project.data.get(e_1420)))
				} break;

				case 0: {
					const v_2224 = temp_1422[1];
					this.project.hints.push(new Hint(10, ('Unused string `\"' + (v_2224) + '\"`'), this.project.data.get(e_1420)))
				} break;

				case 2: {
					const v_2226 = temp_1422[1];
					this.project.hints.push(new Hint(10, ('Unused boolean `' + (v_2226) + '`'), this.project.data.get(e_1420)))
				} break;

				case 5: {
					const v_2228 = temp_1422[1];
					this.project.hints.push(new Hint(10, ('Unused number `' + (v_2228) + '`'), this.project.data.get(e_1420)))
				} break;

				case 7: {
					const v_2230 = temp_1422[1];
					this.project.hints.push(new Hint(10, ('Unused float `' + (v_2230) + '`'), this.project.data.get(e_1420)))
				} break;

				case 8: {
					this.project.hints.push(new Hint(10, 'Unused `null`', this.project.data.get(e_1420)))
				} break;

				case 36: {
					{
					}
				} break;

				case null: case undefined: {
					{
					}
				} break;

				default:
				return /*Const*/[4,this.unique('temp'),this.nodeToExpression(e_1420),this.typer.types.get(e_1420),"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1581"]
				};
			};
			return null;
		};
		getTag(enumNode, name_2233) {
			const temp_2235 = (enumNode);
			switch (temp_2235&&temp_2235[0]) {
			case 39: {
				const t_2237 = temp_2235[1];
				const fields_2239 = temp_2235[2];
				const valuesType_2241 = temp_2235[3];
				{
					let typed = (null);
					{
						const temp_2244 = ((this.typer.types.get(enumNode)));
						switch (temp_2244&&temp_2244[0]) {
						case 6: {
							const type_2246 = temp_2244[1];
							typed = type_2246
						} break;
						};
					};
					let i_2248 = 0;
					for (const f of $toIterator(fields_2239)) {
						{
							const temp_2250 = (f);
							switch (temp_2250&&temp_2250[0]) {
							case 51: {
								const t_2252 = temp_2250[1];
								{
									const temp_2254 = (t_2252);
									switch (temp_2254&&temp_2254[0]) {
									case 1: {
										const n = temp_2254[1];
										{
											if (n == name_2233) { if (typed.fieldsTypeSimple == this.typer.typeString) { return /*String*/[0,n,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1603"] } };
											if (n == name_2233) { return /*Int*/[1,i_2248,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1607"] };
										}
									} break;
									};
								}
							} break;

							case 13: {
								const e_2257 = temp_2250[1];
								{
									const temp_2259 = (e_2257);
									switch (temp_2259&&temp_2259[0]) {
									case 51: {
										const t_2261 = temp_2259[1];
										{
											const temp_2263 = (t_2261);
											switch (temp_2263&&temp_2263[0]) {
											case 1: {
												const n_2265 = temp_2263[1];
												if (n_2265 == name_2233) { return /*Int*/[1,i_2248,"F:/hexa-dev/hexa/source/compiler/normalizer.hexa:1614"] }
											} break;
											};
										}
									} break;
									};
								}
							} break;

							case 10: {
								const a_2267 = temp_2250[1];
								const op_2269 = temp_2250[2];
								const b_2271 = temp_2250[3];
								{
									const temp_2273 = (a_2267);
									switch (temp_2273&&temp_2273[0]) {
									case 51: {
										const t_2275 = temp_2273[1];
										{
											const temp_2277 = (t_2275);
											switch (temp_2277&&temp_2277[0]) {
											case 1: {
												const n_2279 = temp_2277[1];
												if (n_2279 == name_2233) { return this.nodeToExpression(b_2271) }
											} break;
											};
										}
									} break;
									};
								}
							} break;

							case 47: {
								return null
							} break;

							default:
							console.error('(internal warning) Unknown enum tag kind:', f)
							};
						};
						i_2248++;
					};
					throw ('Enum has no tag or field `' + (name_2233) + '` ') + t_2237;
				}
			} break;
			};
		};
		getNative(e_2284) {
			const atts_2286 = this.project.mapDecorators.get(e_2284);
			{
				let step_2288 = 0;
				const native_2290 = Normalizer.getAtt(atts_2286, 'native');
				if (step_2288 == 0 && native_2290 != null) { step_2288 = 1 };
				if (step_2288 == 1) {
					const temp_2292 = (native_2290.values[0]);
					switch (temp_2292&&temp_2292[0]) {
					case 0: {
						const s_2294 = temp_2292[1];
						return s_2294
					} break;

					default:
					throw '@native takes string as argument'
					};
				};
			};
			return null;
		};
		pushScope() { this.scopes.push((new Map())) };
		popScope() { this.scopes.pop() };
		hasInScope(name_2296) {
			for (const scope of $toIterator(this.scopes)) {
				if (scope.get(name_2296) != null) { return true };
			};
			return false;
		};
		addToScope(name_2298) { this.scopes[this.scopes.length - 1].set(name_2298, true) };
		unique(name_2300, node) {
			let uname_2303 = name_2300;
			while ((this.hasInScope(uname_2303) || (this.keywords.indexOf(uname_2303) != (-1)) || (this.globals.indexOf(uname_2303) != (-1)))) {
				uname_2303 = (name_2300 + '_') + ((++this.id));
			};
			const sname = name_2300 + '_' + ((++this.id));
			this.addToScope(uname_2303);
			if (node != null) { this.parentNames.set(node, uname_2303) };
			return uname_2303;
		};
		uniqueNative(name_2306, node_2308) {
			this.addToScope(name_2306);
			this.parentNames.set(node_2308, name_2306);
		};
		fillStatement(e_2310) { return this.nodeToStatement(e_2310) };
		renameClassFields(fields_2312) {
			this.pushScope();
			for (const f of $toIterator(fields_2312)) {
				const temp_2314 = (f);
				switch (temp_2314&&temp_2314[0]) {
				case 24: {
					const name_2316 = temp_2314[1];
					const t_2318 = temp_2314[2];
					const expr_2320 = temp_2314[3];
					const const_2322 = temp_2314[4];
					{
						const atts_2324 = this.project.mapDecorators.get(f);
						{
							let step_2326 = 0;
							const native_2328 = Normalizer.getAtt(atts_2324, 'native');
							if (step_2326 == 0 && native_2328 != null) { step_2326 = 1 };
							if (step_2326 == 1) {
								const temp_2330 = (native_2328.values[0]);
								switch (temp_2330&&temp_2330[0]) {
								case 0: {
									const s_2332 = temp_2330[1];
									if (this.parentNames.get(f) == null) { this.unique(s_2332, f) }
								} break;

								default:
								throw '@native takes string as argument'
								};
							} else if (this.parentNames.get(f) == null) { this.unique(name_2316, f) };
						};
					}
				} break;

				case 22: {
					const name_2334 = temp_2314[1];
					const expr_2336 = temp_2314[2];
					const vars_2338 = temp_2314[3];
					const rettype_2340 = temp_2314[4];
					if (name_2334 == 'new') { this.parentNames.set(f, 'new') } else {
						const atts_2342 = this.project.mapDecorators.get(f);
						{
							let step_2344 = 0;
							const native_2346 = Normalizer.getAtt(atts_2342, 'native');
							if (step_2344 == 0 && native_2346 != null) { step_2344 = 1 };
							if (step_2344 == 1) {
								const temp_2348 = (native_2346.values[0]);
								switch (temp_2348&&temp_2348[0]) {
								case 0: {
									const s_2350 = temp_2348[1];
									if (this.parentNames.get(f) == null) { this.unique(s_2350, f) }
								} break;

								default:
								throw '@native takes string as argument'
								};
							} else if (this.parentNames.get(f) == null) { this.unique(name_2334, f) };
						};
					}
				} break;

				case 47: {
					const field_2352 = temp_2314[1];
					{
						const temp_2354 = (field_2352);
						switch (temp_2354&&temp_2354[0]) {
						case 24: {
							const name_2356 = temp_2354[1];
							const t_2358 = temp_2354[2];
							const expr_2360 = temp_2354[3];
							const const_2362 = temp_2354[4];
							if (this.parentNames.get(field_2352) == null) { this.unique(name_2356, field_2352) }
						} break;

						case 22: {
							const name_2364 = temp_2354[1];
							const expr_2366 = temp_2354[2];
							const vars_2368 = temp_2354[3];
							const rettype_2370 = temp_2354[4];
							{
								const atts_2372 = this.project.mapDecorators.get(f);
								{
									let step_2374 = 0;
									const native_2376 = Normalizer.getAtt(atts_2372, 'native');
									if (step_2374 == 0 && native_2376 != null) { step_2374 = 1 };
									if (step_2374 == 1) {
										const temp_2378 = (native_2376.values[0]);
										switch (temp_2378&&temp_2378[0]) {
										case 0: {
											const s_2380 = temp_2378[1];
											if (this.parentNames.get(field_2352) == null) { this.unique(s_2380, field_2352) }
										} break;

										default:
										throw '@native takes string as argument'
										};
									} else if (this.parentNames.get(field_2352) == null) { this.unique(name_2364, field_2352) };
								};
							}
						} break;
						};
					}
				} break;
				};
			};
			this.popScope();
		};
		getClassDotField(expr_2382, name_2384) {
			{
				const temp_2386 = (expr_2382);
				switch (temp_2386&&temp_2386[0]) {
				case 26: {
					const t_2388 = temp_2386[1];
					const ext_2390 = temp_2386[2];
					const impl_2392 = temp_2386[3];
					const fields_2394 = temp_2386[4];
					const external_2396 = temp_2386[5];
					for (const f of $toIterator(fields_2394)) {
						const temp_2398 = (f);
						switch (temp_2398&&temp_2398[0]) {
						case 47: {
							const sf = temp_2398[1];
							if (DataHelper.nameOf(sf) == name_2384) { return (() => {
								const result_2401 = this.parentNames.get(sf);
								if (result_2401 != null) { return result_2401 };
								return name_2384;
							})() }
						} break;

						case 24: {
							const n_2403 = temp_2398[1];
							if (n_2403 == name_2384) { return (() => {
								const result_2405 = this.parentNames.get(f);
								if (result_2405 != null) { return result_2405 };
								return name_2384;
							})() }
						} break;
						};
					}
				} break;

				case 39: {
					const t_2407 = temp_2386[1];
					const fields_2409 = temp_2386[2];
					const valuesType_2411 = temp_2386[3];
					for (const f of $toIterator(fields_2409)) {
						const temp_2413 = (f);
						switch (temp_2413&&temp_2413[0]) {
						case 47: {
							const sf_2415 = temp_2413[1];
							if (DataHelper.nameOf(sf_2415) == name_2384) { return (() => {
								const result_2417 = this.parentNames.get(sf_2415);
								if (result_2417 != null) { return result_2417 };
								return name_2384;
							})() }
						} break;
						};
					}
				} break;
				};
			};
			return null;
		};
		unwrapNestingBlocks(block_2419) {
			const temp_2421 = (block_2419);
			switch (temp_2421&&temp_2421[0]) {
			case 1: {
				const el_2423 = temp_2421[1];
				{
					if (el_2423.length == 1) { return this.unwrapNestingBlocks(el_2423[0]) };
					return block_2419;
				}
			} break;

			default:
			return block_2419
			};
		};
		saveInlineIfViable(e_2425, value_2427) {
			const temp_2429 = (value_2427);
			switch (temp_2429&&temp_2429[0]) {
			case 1: {
				this.inline.set(e_2425, value_2427)
			} break;

			case 0: {
				this.inline.set(e_2425, value_2427)
			} break;

			case 3: {
				this.inline.set(e_2425, value_2427)
			} break;

			case 4: {
				this.inline.set(e_2425, value_2427)
			} break;

			case 5: {
				this.inline.set(e_2425, value_2427)
			} break;

			case 9: {
				this.inline.set(e_2425, value_2427)
			} break;
			};
		};
	}
	Normalizer.getAtt = (atts_2281, atname) => {
			if (atts_2281 != null && atts_2281.length > 0) { for (const att of $toIterator(atts_2281)) {
				if (att.name == atname) { return att };
			} };
			return null;
		};
	var Typer = class {
		constructor(project) {
			this.currentModule = new Module()
			this.scopes = [new Map()]
			this.scopeTypes = [new Map()]
			this.parents = new Map()
			this.types = new Map()
			this.typeString = null
			this.typeIntClass = new ClassType()
			this.typeInt = this.typeIntClass.instantiate()
			this.typeFloat = null
			this.typeBool = null
			this.typeArray = new ClassType()
			this.typeMap = (null)
			this.typeAnyClass = new ClassType()
			this.typeAny = this.typeAnyClass.instantiate()
			this.nodeAny = null
			this.typeVoid = null
			this.namespaces = new Map()
			this.typeBigInt = null
			this.typeInt32 = null
			this.typeInt64 = null
			this.typeInt16 = null
			this.typeInt8 = null
			this.typeUInt32 = null
			this.typeUInt64 = null
			this.typeUInt16 = null
			this.typeUInt8 = null
			this.typeFloat32 = null
			this.functionAllowedToThrow = false
			this.functionThrows = false
			this.insideTry = false
			this.insideFunction = false
			this.allowBreakAndContinue = false
			this.functionReturnsAType = null
			this.functionActuallyReturns = false
			this.insideClassMethod = false
			this.allowSuper = false
			this.thisType = (null)
			this.thisNode = (null)
		this.project = project };
		fillFiles(collected) {
			const fillModuleNamespace = (m) => {
				let el = (null);
				let root = null;
				{
					const temp = (m);
					switch (temp&&temp[0]) {
					case 36: {
						const path_2439 = temp[1];
						const els = temp[2];
						{
							el = els;
							root = path_2439;
						}
					} break;

					default:
					throw 'Unreachable #2'
					};
				};
				if (this.namespaces.get(root) == null) { this.namespaces.set(root, m) } else {
					let els_2442 = (null);
					{
						const temp_2444 = ((this.namespaces.get(root)));
						switch (temp_2444&&temp_2444[0]) {
						case 36: {
							const el_2446 = temp_2444[2];
							els_2442 = el_2446
						} break;

						default:
						throw 'Unreachable #1'
						};
					};
					while ((el.length > 0)) {
						els_2442.push(el.pop());
					};
				};
				{
					let els_2448 = (null);
					{
						const temp_2450 = ((this.namespaces.get(root)));
						switch (temp_2450&&temp_2450[0]) {
						case 36: {
							const el_2452 = temp_2450[2];
							els_2448 = el_2452
						} break;

						default:
						throw 'Unreachable #4'
						};
					};
					for (const e of $toIterator(els_2448)) {
						let name = this.nameOfModuleItem(e);
						let found = false;
						for (const el of $toIterator(els_2448)) {
							if (this.nameOfModuleItem(el) == name) {
								if (found) { this.fail(('The `' + (name) + '` already exists in module\n') + this.positionOf(el) + ('`' + (name) + '` is defined here'), e) };
								if ((!found)) { found = true };
							};
						};
					};
				};
			};
			for (const file of $toIterator(collected)) {
				let didInit = false;
				let lastOne = file[0];
				for (const e of $toIterator(file)) {
					const temp_2458 = (e);
					switch (temp_2458&&temp_2458[0]) {
					case 36: {
						const path_2460 = temp_2458[1];
						const el_2462 = temp_2458[2];
						{
							if (didInit) { this.fail('Modules should follow before expressions\n' + this.positionOf(lastOne) + 'Expression is here', e) };
							fillModuleNamespace(e);
						}
					} break;

					default:
					{
						lastOne = e;
						didInit = true;
					}
					};
				};
			};
			let intermediate = [];
			{
				let intermediateSubs = [];
				for (const ns of $toIterator(this.namespaces.keys())) {
					let path_2466 = ns.split('.');
					let namespace = path_2466.shift();
					const check = (namespace_2470) => { if (this.namespaces.get(namespace_2470) == null && intermediate.indexOf(namespace_2470) == (-1)) { intermediate.push(namespace_2470) } };
					check(namespace);
					while ((path_2466.length > 0)) {
						namespace += '.' + path_2466.shift();
						check(namespace);
					};
				};
				for (const path of $toIterator(intermediate)) {
					let m_2472 = /*Module*/[36,path.split('.'),[],"F:/hexa-dev/hexa/source/compiler/typer.hexa:122"];
					this.namespaces.set(path, m_2472);
				};
			};
			const findBasicType = (name_2475, callback) => {
				const subj = this.findInNamespaceRoots(name_2475);
				if (subj == null) { this.fail(('Cannot find basic type `' + (name_2475) + '`. This type should be a part of standard library of the compilation target.')) };
				return this.registerClassType(subj, callback);
			};
			findBasicType('Any', (type) => { this.typeAny = type.instantiate() });
			findBasicType('Int', (type_2480) => { this.typeInt = type_2480.instantiate() });
			findBasicType('Bool', (type_2482) => { this.typeBool = type_2482.instantiate() });
			findBasicType('Float', (type_2484) => { this.typeFloat = type_2484.instantiate() });
			findBasicType('String', (type_2486) => { this.typeString = type_2486.instantiate() });
			findBasicType('Array', (type_2488) => {});
			findBasicType('Map', (type_2490) => { this.typeMap = type_2490 });
			findBasicType('Void', (type_2492) => { this.typeVoid = type_2492.instantiate() });
			findBasicType('BigInt', (type_2494) => { this.typeBigInt = type_2494.instantiate() });
			findBasicType('Int32', (type_2496) => { this.typeInt32 = type_2496.instantiate() });
			findBasicType('Int64', (type_2498) => { this.typeInt64 = type_2498.instantiate() });
			findBasicType('Int16', (type_2500) => { this.typeInt16 = type_2500.instantiate() });
			findBasicType('Int8', (type_2502) => { this.typeInt8 = type_2502.instantiate() });
			findBasicType('UInt32', (type_2504) => { this.typeUInt32 = type_2504.instantiate() });
			findBasicType('UInt64', (type_2506) => { this.typeUInt64 = type_2506.instantiate() });
			findBasicType('UInt16', (type_2508) => { this.typeUInt16 = type_2508.instantiate() });
			findBasicType('UInt8', (type_2510) => { this.typeUInt8 = type_2510.instantiate() });
			findBasicType('Float32', (type_2512) => { this.typeFloat32 = type_2512.instantiate() });
			this.pushScope();
			for (const file of $toIterator(collected)) {
				for (const e of $toIterator(file)) {
					const temp_2514 = (e);
					switch (temp_2514&&temp_2514[0]) {
					case 36: {
						const path_2516 = temp_2514[1];
						const el_2518 = temp_2514[2];
						{
							for (const node of $toIterator(el_2518)) {
								const temp_2520 = (node);
								switch (temp_2520&&temp_2520[0]) {
								case 26: {
									{
										this.parents.set(node, e);
										this.fill(node);
									}
								} break;

								case 39: {
									{
										this.parents.set(node, e);
										this.fill(node);
									}
								} break;

								case 22: {
									const name_2522 = temp_2520[1];
									const expr = temp_2520[2];
									const vars = temp_2520[3];
									const rettype = temp_2520[4];
									{
										let step = 0;
										const rettype_2528 = rettype;
										if (step == 0 && rettype_2528 != null) { step = 1 };
										if (step == 1) { this.types.set(node, /*Function*/[10,this.varTypes(vars),this.toType(rettype_2528, node),"F:/hexa-dev/hexa/source/compiler/typer.hexa:170"]) };
									}
								} break;

								case 24: {
									const name_2530 = temp_2520[1];
									const t = temp_2520[2];
									const e = temp_2520[3];
									const const_2534 = temp_2520[4];
									{
										let step_2536 = 0;
										const t_2538 = t;
										if (step_2536 == 0 && t_2538 != null) { step_2536 = 1 };
										if (step_2536 == 1) { this.types.set(node, this.toType(t_2538, node)) };
									}
								} break;

								default:
								{
								}
								};
							};
							for (const node of $toIterator(el_2518)) {
								const temp_2540 = (node);
								switch (temp_2540&&temp_2540[0]) {
								case 26: {
									{
									}
								} break;

								case 39: {
									{
									}
								} break;

								default:
								{
									this.parents.set(node, e);
									this.fill(node);
								}
								};
							};
						}
					} break;

					default:
					{
					}
					};
				};
			};
			this.popScope();
			for (const file of $toIterator(collected)) {
				this.pushScope();
				for (const e of $toIterator(file)) {
					const temp_2542 = (e);
					switch (temp_2542&&temp_2542[0]) {
					case 36: {
						const path_2544 = temp_2542[1];
						const el_2546 = temp_2542[2];
						{
						}
					} break;

					default:
					this.fill(e)
					};
				};
				this.popScope();
			};
			if (Typer.failures.length > 0) {
				const errors = Typer.failures.slice();
				Typer.failures = [];
				throw new CompilerErrors(errors);
			};
		};
		fillModules() {
			const checkOverrides = (info, name_2551, e_2553) => {
				if (info.exported.has(name_2551)) { this.fail(('Module `' + (info.path) + '` already exports name `' + (name_2551) + '`'), e_2553) };
				if (info.imported.has(name_2551)) { this.fail(('Module `' + (info.path) + '` already imports name `' + (name_2551) + '`'), e_2553) };
			};
			for (const info of $toIterator(this.project.moduleInfo)) {
				const nodes = info.nodes;
				for (const e of $toIterator(nodes)) {
					let named = true;
					{
						const temp_2557 = (e);
						switch (temp_2557&&temp_2557[0]) {
						case 24: {
							{
							}
						} break;

						case 39: {
							{
							}
						} break;

						case 22: {
							{
							}
						} break;

						case 26: {
							{
							}
						} break;

						default:
						named = false
						};
					};
					if (named) {
						const name_2559 = DataHelper.nameOf(e);
						checkOverrides(info, name_2559, e);
						info.exported.set(name_2559, e);
					};
				};
			};
			for (const info of $toIterator(this.project.moduleInfo)) {
				const nodes_2561 = info.nodes;
				this.pushScope();
				let doneImports = false;
				for (const e of $toIterator(nodes_2561)) {
					let named_2564 = true;
					let lastOne_2566 = nodes_2561[0];
					{
						const temp_2568 = (e);
						switch (temp_2568&&temp_2568[0]) {
						case 37: {
							const els_2570 = temp_2568[1];
							const path_2572 = temp_2568[2];
							{
								if (doneImports) { this.fail('Imports should follow before expressions\n' + this.positionOf(lastOne_2566) + 'Expression is here', e) };
								const index = this.project.moduleName.indexOf(path_2572);
								if (index == (-1)) { this.fail('Cannot import ' + path_2572, e) };
								const importAs = (name_2576, to) => {
									let step_2579 = 0;
									const target = this.project.moduleInfo[index];
									if (step_2579 == 0 && target != null) { step_2579 = 1 };
									if (step_2579 == 1) {
										let step_2582 = 0;
										const what = target.exported.get(name_2576);
										if (step_2582 == 0 && what != null) { step_2582 = 1 };
										if (step_2582 == 1) {
											checkOverrides(info, to, e);
											info.imported.set(to, what);
										} else {
											const has = (() => {
												const result = [];
												const value = target.exported.keys();
												for (const key of $toIterator(value)) result.push(key);
												return result;
											})().join(', ');
											this.fail(('Module `' + (path_2572) + '` does not export `' + (name_2576) + '`\nAvailable exports: ' + (has) + ''), e);
										};
									};
								};
								for (const el of $toIterator(els_2570)) {
									const temp_2588 = (el);
									switch (temp_2588&&temp_2588[0]) {
									case 0: {
										const name_2590 = temp_2588[1];
										importAs(name_2590, name_2590)
									} break;

									case 1: {
										const name_2592 = temp_2588[1];
										importAs(name_2592, name_2592)
									} break;

									case 3: {
										const left = temp_2588[1];
										const right = temp_2588[2];
										{
											let lhs = '';
											{
												const temp_2597 = (left);
												switch (temp_2597&&temp_2597[0]) {
												case 0: {
													const name_2599 = temp_2597[1];
													lhs = name_2599
												} break;

												case 1: {
													const name_2601 = temp_2597[1];
													lhs = name_2601
												} break;
												};
											};
											{
												const temp_2603 = (right);
												switch (temp_2603&&temp_2603[0]) {
												case 0: {
													const name_2605 = temp_2603[1];
													importAs(lhs, name_2605)
												} break;

												case 1: {
													const name_2607 = temp_2603[1];
													importAs(lhs, name_2607)
												} break;
												};
											};
										}
									} break;

									default:
									this.fail('This import kind not implemented yet', e)
									};
								};
							}
						} break;

						default:
						{
							lastOne_2566 = e;
							doneImports = true;
							const node = e;
							this.currentModule = info;
							{
								const temp_2610 = (node);
								switch (temp_2610&&temp_2610[0]) {
								case 26: {
									{
										this.parents.set(node, e);
										this.fillModuleTypes(node);
									}
								} break;

								case 39: {
									{
										this.parents.set(node, e);
										this.fillModuleTypes(node);
									}
								} break;

								case 22: {
									const name_2612 = temp_2610[1];
									const expr_2614 = temp_2610[2];
									const vars_2616 = temp_2610[3];
									const rettype_2618 = temp_2610[4];
									{
										let step_2620 = 0;
										const rettype_2622 = rettype_2618;
										if (step_2620 == 0 && rettype_2622 != null) { step_2620 = 1 };
										if (step_2620 == 1) { this.types.set(node, /*Function*/[10,this.varTypes(vars_2616),this.toType(rettype_2622, node),"F:/hexa-dev/hexa/source/compiler/typer.hexa:322"]) };
									}
								} break;

								case 24: {
									const name_2624 = temp_2610[1];
									const t_2626 = temp_2610[2];
									const e_2628 = temp_2610[3];
									const const_2630 = temp_2610[4];
									{
										let step_2632 = 0;
										const t_2634 = t_2626;
										if (step_2632 == 0 && t_2634 != null) { step_2632 = 1 };
										if (step_2632 == 1) { this.types.set(node, this.toType(t_2634, node)) };
									}
								} break;

								default:
								{
								}
								};
							};
						}
						};
					};
				};
			};
			for (const info of $toIterator(this.project.moduleInfo)) {
				const nodes_2636 = info.nodes;
				this.pushScope();
				for (const node of $toIterator(nodes_2636)) {
					const temp_2638 = (node);
					switch (temp_2638&&temp_2638[0]) {
					case 37: {
						{
						}
					} break;

					case 26: {
						{
						}
					} break;

					case 39: {
						{
						}
					} break;

					default:
					{
						this.parents.set(node, /*Module*/[36,info.path,info.nodes,"F:/hexa-dev/hexa/source/compiler/typer.hexa:344"]);
						this.fill(node);
					}
					};
				};
				this.popScope();
			};
			if (Typer.failures.length > 0) {
				const errors_2640 = Typer.failures.slice();
				Typer.failures = [];
				throw new CompilerErrors(errors_2640);
			};
		};
		find(name_2642) {
			let subj_2644 = null;
			{
				let i = 0;
				let it = 0;
				let at = this.scopes.length;
				while (it < at) {
					i = it;
					it++;
					{
						subj_2644 = this.scopes[this.scopes.length - i - 1].get(name_2642);
						if (subj_2644 != null) { break };
					};
				};
			};
			if (subj_2644 == null) { subj_2644 = this.findInNamespaceRoots(name_2642) };
			return subj_2644;
		};
		proposeSimilar(names, subject, what_2651) {
			const available = ('Available ' + (what_2651) + ' are: ') + names.join(', ');
			const subject_2654 = subject.toLowerCase();
			const charSubj = subject_2654.split('');
			let bestValue = 0;
			let bestName = '';
			for (const name of $toIterator(names)) {
				const named_2659 = name.toLowerCase();
				if (named_2659.startsWith(subject_2654) || subject_2654.startsWith(named_2659)) { return ('Did you mean `' + (name) + '`?\n\n') + available };
				let index_2661 = 0;
				let thisValue = 0;
				for (const char of $toIterator(named_2659.split(''))) {
					if (char == charSubj[index_2661]) { thisValue++ };
					index_2661++;
				};
				if (thisValue > bestValue) {
					bestValue = thisValue;
					bestName = name;
				};
			};
			if (bestValue > 2) { return ('Did you mean `' + (bestName) + '`?\n\n') + available };
			return available;
		};
		registerClassType(node_2664, callback_2666) {
			let step_2668 = 0;
			const type_2670 = this.types.get(node_2664);
			if (step_2668 == 0 && type_2670 != null) { step_2668 = 1 };
			if (step_2668 == 1) {
				const temp_2672 = ((type_2670));
				switch (temp_2672&&temp_2672[0]) {
				case 3: {
					const t_2674 = temp_2672[1];
					{
						{
							let step_2676 = 0;
							const setup = callback_2666;
							if (step_2676 == 0 && setup != null) { step_2676 = 1 };
							if (step_2676 == 1) { setup(t_2674) };
						};
						return t_2674;
					}
				} break;
				};
			} else {
				const typeName = DataHelper.nameOf(node_2664);
				const type_2680 = (() => {
					const temp_2682 = (typeName);
					switch (temp_2682) {
					case 'Int': {
						return this.typeIntClass
					} break;

					case 'Array': {
						return this.typeArray
					} break;

					case 'Any': {
						return this.typeAnyClass
					} break;

					default:
					return new ClassType()
					};
				})();
				const _thisType = this.thisType;
				const _thisNode = this.thisNode;
				this.thisType = type_2680.instantiate();
				this.thisNode = node_2664;
				type_2680.parent = node_2664;
				type_2680.name = typeName;
				this.types.set(node_2664, /*Class*/[3,type_2680,"F:/hexa-dev/hexa/source/compiler/typer.hexa:473"]);
				{
					let step_2686 = 0;
					const setup_2688 = callback_2666;
					if (step_2686 == 0 && setup_2688 != null) { step_2686 = 1 };
					if (step_2686 == 1) { setup_2688(type_2680) };
				};
				{
					const temp_2690 = (type_2680.name);
					switch (temp_2690) {
					case 'Int': {
						{
						}
					} break;

					case 'Bool': {
						this.typeBool = type_2680.instantiate()
					} break;

					case 'Float': {
						this.typeFloat = type_2680.instantiate()
					} break;

					case 'String': {
						this.typeString = type_2680.instantiate()
					} break;

					case 'Array': {
						this.typeArray = type_2680
					} break;

					case 'Map': {
						this.typeMap = type_2680
					} break;

					case 'Any': {
						this.nodeAny = node_2664
					} break;

					case 'Void': {
						this.typeVoid = type_2680.instantiate()
					} break;
					};
				};
				const getRename = (f) => {
					const atts = this.project.mapDecorators.get(f);
					{
						let step_2695 = 0;
						const native = DataHelper.getAttribute(atts, 'native');
						if (step_2695 == 0 && native != null) { step_2695 = 1 };
						if (step_2695 == 1) {
							if (native.values.length != 1) { throw '@native takes one string argument' };
							if (native != null) {
								const temp_2698 = (native.values[0]);
								switch (temp_2698&&temp_2698[0]) {
								case 0: {
									const s = temp_2698[1];
									return s
								} break;

								default:
								throw '@native takes string as argument'
								};
							};
						};
					};
					return null;
				};
				{
					const temp_2701 = (node_2664);
					switch (temp_2701&&temp_2701[0]) {
					case 26: {
						const t_2703 = temp_2701[1];
						const extend = temp_2701[2];
						const implement = temp_2701[3];
						const f_2707 = temp_2701[4];
						const external = temp_2701[5];
						{
							{
								const temp_2710 = (t_2703);
								switch (temp_2710&&temp_2710[0]) {
								case 2: {
									const name_2712 = temp_2710[1];
									const params = temp_2710[2];
									{
										type_2680.genericParams.push(DataHelper.extractTypeName(params[0]));
										const names_2715 = type_2680.genericParams;
										{
											let i_2717 = 0;
											let it_2719 = 1;
											let at_2721 = params.length;
											while (it_2719 < at_2721) {
												i_2717 = it_2719;
												it_2719++;
												{
													const name_2723 = DataHelper.extractTypeName(params[i_2717]);
													if (names_2715.includes(name_2723)) { this.fail(('Parameter `' + (name_2723) + '` already exists in `<T, ...>`'), node_2664) };
													names_2715.push(name_2723);
												};
											};
										};
									}
								} break;
								};
							};
							{
								let step_2725 = 0;
								const ext = extend;
								if (step_2725 == 0 && ext != null) { step_2725 = 1 };
								if (step_2725 == 1) { this.toType(ext, node_2664) };
							};
							for (const impl of $toIterator(implement)) {
								this.toType(impl, node_2664);
							};
							this.pushScope();
							for (const genericParam of $toIterator(type_2680.genericParams)) {
								this.addScopeType(genericParam, this.typeAny);
							};
							for (const field of $toIterator(f_2707)) {
								{
									const temp_2728 = (field);
									switch (temp_2728&&temp_2728[0]) {
									case 22: {
										const name_2730 = temp_2728[1];
										{
											if (type_2680.fieldNames.includes(name_2730)) { this.fail(('Field `' + (name_2730) + '` already exists'), field) };
											type_2680.fieldNames.push(name_2730);
											if (name_2730 == 'new') { type_2680.constructor = type_2680.fieldNames.length - 1 } else {
												type_2680.fieldRenames[type_2680.fieldNames.length - 1] = getRename(field);
											};
											this.addScope(name_2730, field);
										}
									} break;

									case 24: {
										const name_2732 = temp_2728[1];
										const t_2734 = temp_2728[2];
										const e_2736 = temp_2728[3];
										{
											if (type_2680.fieldNames.includes(name_2732)) { this.fail(('Field `' + (name_2732) + '` already exists'), field) };
											type_2680.fieldNames.push(name_2732);
											type_2680.fieldInitialized[type_2680.fieldNames.length - 1] = false;
											type_2680.fieldRenames[type_2680.fieldNames.length - 1] = getRename(field);
											this.addScope(name_2732, field);
										}
									} break;

									case 27: {
										const field = temp_2728[1];
										{
											const temp_2739 = (field);
											switch (temp_2739&&temp_2739[0]) {
											case 24: {
												const name_2741 = temp_2739[1];
												{
													if (type_2680.fieldNames.includes(name_2741)) { this.fail(('Field `' + (name_2741) + '` already exists'), field) };
													type_2680.fieldNames.push(name_2741);
													this.addScope(name_2741, field);
												}
											} break;
											};
										}
									} break;

									case 47: {
										const f_2743 = temp_2728[1];
										{
											const temp_2745 = (f_2743);
											switch (temp_2745&&temp_2745[0]) {
											case 22: {
												const name_2747 = temp_2745[1];
												{
													if (type_2680.fieldNames.includes(name_2747)) { this.fail(('Field `' + (name_2747) + '` already exists'), field) };
													type_2680.fieldNames.push(name_2747);
													type_2680.fieldStatic[type_2680.fieldNames.length - 1] = true;
													this.addScope(name_2747, field);
												}
											} break;

											case 24: {
												const name_2749 = temp_2745[1];
												{
													if (type_2680.fieldNames.includes(name_2749)) { this.fail(('Field `' + (name_2749) + '` already exists'), field) };
													type_2680.fieldNames.push(name_2749);
													type_2680.fieldStatic[type_2680.fieldNames.length - 1] = true;
													this.addScope(name_2749, field);
												}
											} break;
											};
										}
									} break;

									default:
									this.fail('Wrong class field format', field)
									};
								};
								this.parents.set(field, node_2664);
							};
							for (const field of $toIterator(f_2707)) {
								const temp_2751 = (field);
								switch (temp_2751&&temp_2751[0]) {
								case 24: {
									const name_2753 = temp_2751[1];
									const t_2755 = temp_2751[2];
									const e_2757 = temp_2751[3];
									const const_2759 = temp_2751[4];
									{
										let step_2761 = 0;
										const t_2763 = t_2755;
										if (step_2761 == 0 && t_2763 != null) { step_2761 = 1 };
										if (step_2761 == 1) { this.types.set(field, this.toType(t_2763, field)) };
									}
								} break;

								case 22: {
									const name_2765 = temp_2751[1];
									const expr_2767 = temp_2751[2];
									const vars_2769 = temp_2751[3];
									const rettype_2771 = temp_2751[4];
									{
										let step_2773 = 0;
										const rettype_2775 = rettype_2771;
										if (step_2773 == 0 && rettype_2775 != null) { step_2773 = 1 };
										if (step_2773 == 1) { this.types.set(field, /*Function*/[10,this.varTypes(vars_2769),this.toType(rettype_2775, field),"F:/hexa-dev/hexa/source/compiler/typer.hexa:600"]) };
									}
								} break;

								case 47: {
									const f_2777 = temp_2751[1];
									{
										const temp_2779 = (f_2777);
										switch (temp_2779&&temp_2779[0]) {
										case 22: {
											const name_2781 = temp_2779[1];
											const expr_2783 = temp_2779[2];
											const vars_2785 = temp_2779[3];
											const rettype_2787 = temp_2779[4];
											{
												let step_2789 = 0;
												const rettype_2791 = rettype_2787;
												if (step_2789 == 0 && rettype_2791 != null) { step_2789 = 1 };
												if (step_2789 == 1) {
													this.types.set(f_2777, /*Function*/[10,this.varTypes(vars_2785),this.toType(rettype_2791, f_2777),"F:/hexa-dev/hexa/source/compiler/typer.hexa:606"]);
													this.types.set(field, this.types.get(f_2777));
												};
											}
										} break;

										case 24: {
											const name_2793 = temp_2779[1];
											const t_2795 = temp_2779[2];
											const e_2797 = temp_2779[3];
											const const_2799 = temp_2779[4];
											{
												let step_2801 = 0;
												const t_2803 = t_2795;
												if (step_2801 == 0 && t_2803 != null) { step_2801 = 1 };
												if (step_2801 == 1) {
													this.types.set(f_2777, this.toType(t_2803, f_2777));
													this.types.set(field, this.types.get(f_2777));
												};
											}
										} break;
										};
									}
								} break;
								};
							};
							for (const field of $toIterator(f_2707)) {
								const temp_2805 = (field);
								switch (temp_2805&&temp_2805[0]) {
								case 22: {
									const name_2807 = temp_2805[1];
									const expr_2809 = temp_2805[2];
									const vars_2811 = temp_2805[3];
									const rettype_2813 = temp_2805[4];
									{
										if (name_2807 == 'new') { type_2680.constructor = type_2680.fieldNames.length - 1 };
										if ((external) && (expr_2809 != null)) { if (name_2807 == 'new') { this.fail('External class constructor `new()` cannot have a body `{}`', field) } else {
											this.fail(('External class method `function ' + (name_2807) + '` cannot have a body `{}`'), field);
										} };
										const _insideClassMethod = this.insideClassMethod;
										const _allowSuper = this.allowSuper;
										this.insideClassMethod = true;
										this.allowSuper = (extend != null);
										if ((!external)) { this.fillFunction(field, expr_2809, vars_2811, rettype_2813) };
										if ((external) && (this.types.get(field) == null)) { this.types.set(field, /*Function*/[10,this.varTypes(vars_2811),/*?*/(rettype_2813 != null)? (this.toType(rettype_2813, field)) : this.typeVoid,"F:/hexa-dev/hexa/source/compiler/typer.hexa:639"]) };
										this.insideClassMethod = _insideClassMethod;
										this.allowSuper = _allowSuper;
									}
								} break;

								case 24: {
									const name_2817 = temp_2805[1];
									const t_2819 = temp_2805[2];
									const e_2821 = temp_2805[3];
									const const_2823 = temp_2805[4];
									{
										if ((external) && (e_2821 != null)) { this.fail(('External class field `var ' + (name_2817) + '` cannot have `= value`'), field) };
										const _insideClassMethod_2825 = this.insideClassMethod;
										this.insideClassMethod = true;
										if (e_2821 != null) { this.fillExpression(e_2821) };
										this.insideClassMethod = _insideClassMethod_2825;
										this.mixVarTypes(t_2819, e_2821, field);
										type_2680.fieldInitialized[type_2680.fieldNames.indexOf(name_2817)] = true;
										if (this.types.get(field) == null) { this.fail(('Field `var ' + (name_2817) + '` initialized, but got no type ') + e_2821, field) };
									}
								} break;

								case 27: {
									const f_2827 = temp_2805[1];
									{
										const temp_2829 = (f_2827);
										switch (temp_2829&&temp_2829[0]) {
										case 24: {
											const name_2831 = temp_2829[1];
											const t_2833 = temp_2829[2];
											const e_2835 = temp_2829[3];
											const const_2837 = temp_2829[4];
											{
												if ((external) && (e_2835 != null)) { this.fail(('External class field `var ' + (name_2831) + '` cannot have expression'), field) };
												const _insideClassMethod_2839 = this.insideClassMethod;
												this.insideClassMethod = true;
												if (e_2835 != null) { this.fillExpression(e_2835) };
												this.insideClassMethod = _insideClassMethod_2839;
												this.mixVarTypes(t_2833, e_2835, f_2827);
												type_2680.fieldInitialized[type_2680.fieldNames.indexOf(name_2831)] = true;
												if (this.types.get(f_2827) == null) { this.fail(('Property `' + (name_2831) + '` initialized, but got no type ') + e_2835, field) };
												this.types.set(field, this.types.get(f_2827));
											}
										} break;
										};
									}
								} break;

								case 47: {
									const f_2841 = temp_2805[1];
									{
										const temp_2843 = (f_2841);
										switch (temp_2843&&temp_2843[0]) {
										case 22: {
											const name_2845 = temp_2843[1];
											const expr_2847 = temp_2843[2];
											const vars_2849 = temp_2843[3];
											const rettype_2851 = temp_2843[4];
											{
												if ((external) && (expr_2847 != null)) { this.fail(('External class field `static function ' + (name_2845) + '` cannot have a body'), field) };
												const _insideClassMethod_2853 = this.insideClassMethod;
												this.insideClassMethod = false;
												if ((!external)) { this.fillFunction(f_2841, expr_2847, vars_2849, rettype_2851) };
												if (external) { this.types.set(f_2841, /*Function*/[10,this.varTypes(vars_2849),/*?*/(rettype_2851 != null)? (this.toType(rettype_2851, f_2841)) : this.typeVoid,"F:/hexa-dev/hexa/source/compiler/typer.hexa:694"]) };
												this.insideClassMethod = _insideClassMethod_2853;
												if (this.types.get(f_2841) == null) { this.fail('Function get no type: class ' + DataHelper.nameOf(node_2664) + ' static ' + name_2845, f_2841) };
												this.types.set(field, this.types.get(f_2841));
											}
										} break;

										case 24: {
											const name_2855 = temp_2843[1];
											const t_2857 = temp_2843[2];
											const e_2859 = temp_2843[3];
											const const_2861 = temp_2843[4];
											{
												if ((external) && (e_2859 != null)) { this.fail(('External class field `static var ' + (name_2855) + '` cannot have expression'), field) };
												if (e_2859 != null) { this.fillExpression(e_2859) };
												this.mixVarTypes(t_2857, e_2859, f_2841);
												this.types.set(field, this.types.get(f_2841));
											}
										} break;
										};
									}
								} break;

								default:
								this.fail('Wrong class field format', node_2664)
								};
							};
							this.popScope();
						}
					} break;

					default:
					this.fail('ClassType expects (declare) class node, but got ' + node_2664, node_2664)
					};
				};
				this.thisType = _thisType;
				this.thisNode = _thisNode;
				return type_2680;
			};
		};
		registerEnumType(node_2863) {
			let step_2865 = 0;
			const type_2867 = this.types.get(node_2863);
			if (step_2865 == 0 && type_2867 != null) { step_2865 = 1 };
			if (step_2865 == 1) {
				const temp_2869 = ((type_2867));
				switch (temp_2869&&temp_2869[0]) {
				case 6: {
					const t_2871 = temp_2869[1];
					return t_2871
				} break;
				};
			} else {
				const type_2873 = new EnumType();
				type_2873.parent = node_2863;
				type_2873.name = DataHelper.nameOf(node_2863);
				this.types.set(node_2863, /*Enum*/[6,type_2873,"F:/hexa-dev/hexa/source/compiler/typer.hexa:738"]);
				{
					const temp_2875 = (node_2863);
					switch (temp_2875&&temp_2875[0]) {
					case 39: {
						const t_2877 = temp_2875[1];
						const f_2879 = temp_2875[2];
						const valuesType = temp_2875[3];
						const extend_2882 = temp_2875[4];
						{
							this.pushScope();
							{
								let step_2884 = 0;
								const valuesType_2886 = valuesType;
								if (step_2884 == 0 && valuesType_2886 != null) { step_2884 = 1 };
								if (step_2884 == 1) { type_2873.fieldsTypeSimple = this.toType(valuesType_2886, node_2863) };
							};
							if ((type_2873.fieldsTypeSimple != null) && (type_2873.fieldsTypeSimple != this.typeInt) && (type_2873.fieldsTypeSimple != this.typeString)) { this.fail('Simple enums may be only of types `Int` and `String`', node_2863) };
							if ((f_2879.length == 0) && (extend_2882 == null)) { this.fail(('Enum `' + (type_2873.name) + '` must have at least one value `enum ' + (type_2873.name) + ' { Value }`'), node_2863) };
							for (const field of $toIterator(f_2879)) {
								{
									const temp_2888 = (field);
									switch (temp_2888&&temp_2888[0]) {
									case 51: {
										const t_2890 = temp_2888[1];
										{
											const temp_2892 = (t_2890);
											switch (temp_2892&&temp_2892[0]) {
											case 1: {
												const name_2894 = temp_2892[1];
												{
													if (type_2873.fieldNames.includes(name_2894)) { throw this.fail(('Field `' + (name_2894) + '` already exists'), node_2863) };
													type_2873.fieldNames.push(name_2894);
													type_2873.fieldEnumConstructor[type_2873.fieldNames.length - 1] = true;
													type_2873.tagBindVars[type_2873.fieldNames.length - 1] = [];
													type_2873.tagBindVarsNames[type_2873.fieldNames.length - 1] = [];
													type_2873.fieldType[type_2873.fieldNames.length - 1] = /*EnumInstance*/[7,type_2873,type_2873.fieldNames.length - 1,"F:/hexa-dev/hexa/source/compiler/typer.hexa:773"];
												}
											} break;

											default:
											this.fail('Wrong enum constructor format, should be `Name`', node_2863)
											};
										}
									} break;

									case 13: {
										const e_2896 = temp_2888[1];
										const args = temp_2888[2];
										const argNames = temp_2888[3];
										{
											if (valuesType != null) { throw this.fail('Cannot use `Value(args)` format for simple enum', node_2863) };
											{
												const temp_2900 = (e_2896);
												switch (temp_2900&&temp_2900[0]) {
												case 51: {
													const t_2902 = temp_2900[1];
													{
														const temp_2904 = (t_2902);
														switch (temp_2904&&temp_2904[0]) {
														case 1: {
															const name_2906 = temp_2904[1];
															{
																if (type_2873.fieldNames.includes(name_2906)) { throw this.fail(('Field `' + (name_2906) + '` already exists'), node_2863) };
																type_2873.fieldNames.push(name_2906);
																type_2873.fieldEnumConstructor[type_2873.fieldNames.length - 1] = true;
																type_2873.fieldType[type_2873.fieldNames.length - 1] = /*EnumConstructor*/[8,type_2873,type_2873.fieldNames.length - 1,"F:/hexa-dev/hexa/source/compiler/typer.hexa:791"];
																const tagBindVars = [];
																const tagBindVarsNames = [];
																type_2873.tagBindVars[type_2873.fieldNames.length - 1] = tagBindVars;
																type_2873.tagBindVarsNames[type_2873.fieldNames.length - 1] = tagBindVarsNames;
																if (args.length == 0) { this.fail('Enum constructor expects more than zero arguments `(value: Type)`', e_2896) };
																{
																	let i_2910 = 0;
																	let it_2912 = 0;
																	let at_2914 = args.length;
																	while (it_2912 < at_2914) {
																		i_2910 = it_2912;
																		it_2912++;
																		{
																			if (argNames[i_2910] == null) { this.fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args[i_2910]) };
																			tagBindVars[i_2910] = Typer.nodeToNodeType(args[i_2910]);
																			if (tagBindVarsNames.includes(argNames[i_2910])) { this.fail(('Enum constructor argument `' + (argNames[i_2910]) + '` already exists'), args[i_2910]) };
																			tagBindVarsNames[i_2910] = argNames[i_2910];
																		};
																	};
																};
															}
														} break;

														default:
														this.fail('Wrong enum constructor format, should be `Name(value: T)`', e_2896)
														};
													}
												} break;
												};
											};
										}
									} break;

									case 10: {
										const a = temp_2888[1];
										const op = temp_2888[2];
										const b = temp_2888[3];
										{
											if (op != 91) { this.fail(('Should use `Value = value` not `Value ' + (Token.stringify(op)) + ' value` format for enum tag value'), node_2863) };
											if (valuesType == null) { this.fail('Cannot use `Value = value` format for complex enum', node_2863) };
											{
												const temp_2919 = (a);
												switch (temp_2919&&temp_2919[0]) {
												case 51: {
													const t_2921 = temp_2919[1];
													{
														const temp_2923 = (t_2921);
														switch (temp_2923&&temp_2923[0]) {
														case 1: {
															const name_2925 = temp_2923[1];
															{
																if (type_2873.fieldNames.includes(name_2925)) { this.fail(('Field `' + (name_2925) + '` already exists'), node_2863) };
																type_2873.fieldNames.push(name_2925);
																type_2873.fieldEnumConstructor[type_2873.fieldNames.length - 1] = true;
																{
																	const temp_2927 = (b);
																	switch (temp_2927&&temp_2927[0]) {
																	case 5: {
																		if (type_2873.fieldsTypeSimple != this.typeInt) { this.fail(('`' + (name_2925) + ' = value` expects constant value of type `' + (Type.stringify(type_2873.fieldsTypeSimple)) + '`'), b) }
																	} break;

																	case 0: {
																		if (type_2873.fieldsTypeSimple != this.typeString) { this.fail(('`' + (name_2925) + ' = value` expects constant value of type `' + (Type.stringify(type_2873.fieldsTypeSimple)) + '`'), b) }
																	} break;
																	};
																};
																this.fillExpression(b);
																type_2873.fieldType[type_2873.fieldNames.length - 1] = this.types.get(b);
															}
														} break;
														};
													}
												} break;
												};
											};
										}
									} break;

									case 1: {
										const name_2929 = temp_2888[1];
										this.fail(('Cannot use lowercase `' + (name_2929) + '` format for enum values'), node_2863)
									} break;

									case 47: {
										const f_2931 = temp_2888[1];
										{
											const temp_2933 = (f_2931);
											switch (temp_2933&&temp_2933[0]) {
											case 22: {
												const name_2935 = temp_2933[1];
												{
													if (type_2873.fieldNames.includes(name_2935)) { this.fail(('Field `' + (name_2935) + '` already exists'), node_2863) };
													type_2873.fieldNames.push(name_2935);
													type_2873.fieldStatic[type_2873.fieldNames.length - 1] = true;
													this.addScope(name_2935, field);
												}
											} break;

											case 24: {
												const name_2937 = temp_2933[1];
												{
													if (type_2873.fieldNames.includes(name_2937)) { this.fail(('Field `' + (name_2937) + '` already exists'), node_2863) };
													type_2873.fieldNames.push(name_2937);
													type_2873.fieldStatic[type_2873.fieldNames.length - 1] = true;
													this.addScope(name_2937, field);
												}
											} break;
											};
										}
									} break;

									default:
									this.fail('Wrong enum field format', field)
									};
								};
								this.parents.set(field, node_2863);
							};
							for (const field of $toIterator(f_2879)) {
								const temp_2939 = (field);
								switch (temp_2939&&temp_2939[0]) {
								case 22: {
									const name_2941 = temp_2939[1];
									const expr_2943 = temp_2939[2];
									const vars_2945 = temp_2939[3];
									const rettype_2947 = temp_2939[4];
									this.fillFunction(field, expr_2943, vars_2945, rettype_2947)
								} break;

								case 24: {
									const name_2949 = temp_2939[1];
									{
									}
								} break;

								case 47: {
									const f_2951 = temp_2939[1];
									{
										const temp_2953 = (f_2951);
										switch (temp_2953&&temp_2953[0]) {
										case 22: {
											const name_2955 = temp_2953[1];
											const expr_2957 = temp_2953[2];
											const vars_2959 = temp_2953[3];
											const rettype_2961 = temp_2953[4];
											{
												const _insideClassMethod_2963 = this.insideClassMethod;
												this.insideClassMethod = false;
												if (rettype_2961 != null) { this.types.set(f_2951, /*Function*/[10,[],this.toType(rettype_2961, f_2951),"F:/hexa-dev/hexa/source/compiler/typer.hexa:891"]) } else {
													this.types.set(f_2951, /*Function*/[10,[],this.typeVoid,"F:/hexa-dev/hexa/source/compiler/typer.hexa:893"]);
												};
												this.types.set(field, this.types.get(f_2951));
												this.fillFunction(f_2951, expr_2957, vars_2959, rettype_2961);
												this.insideClassMethod = _insideClassMethod_2963;
												if (this.types.get(f_2951) == null) { this.fail('Function get no type: enum ' + DataHelper.nameOf(node_2863) + ' static ' + name_2955, f_2951) };
												this.types.set(field, this.types.get(f_2951));
											}
										} break;

										case 24: {
											const name_2965 = temp_2953[1];
											const t_2967 = temp_2953[2];
											const e_2969 = temp_2953[3];
											const const_2971 = temp_2953[4];
											{
												if (e_2969 != null) { this.fillExpression(e_2969) };
												this.mixVarTypes(t_2967, e_2969, f_2951);
												this.types.set(field, this.types.get(f_2951));
											}
										} break;
										};
									}
								} break;

								case 51: {
									{
									}
								} break;

								case 13: {
									{
									}
								} break;

								case 10: {
									{
									}
								} break;

								default:
								this.fail('Unknown enum field format', field)
								};
							};
							this.popScope();
						}
					} break;

					default:
					this.fail('EnumType expects (declare) enum node, but got ' + node_2863, node_2863)
					};
				};
				return type_2873;
			};
		};
		fail(msg, node_2974) {
			this.failNonFatal(msg, node_2974);
			const errors_2976 = Typer.failures.slice();
			Typer.failures = [];
			throw new CompilerErrors(errors_2976);
		};
		failNonFatal(msg_2978, node_2980) {
			const data = this.project.data.get(node_2980);
			{
				let step_2983 = 0;
				const data_2985 = data;
				if (step_2983 == 0 && data_2985 != null) { step_2983 = 1 };
				if (step_2983 == 1) { Typer.failures.push(new CompilerError(3, msg_2978, data_2985.line, data_2985.column, data_2985.fileName)) } else {
					Typer.failures.push(new CompilerError(3, msg_2978, 0, 0, ''));
				};
			};
		};
		positionOf(node_2987) {
			const data_2989 = this.project.data.get(node_2987);
			if (data_2989 == null) { return '[Unknown]: ' };
			return '[' + data_2989.fileName + ':' + data_2989.line + ':' + data_2989.column + ']: ';
		};
		nameOfModuleItem(node_3008) {
			const temp_3010 = (node_3008);
			switch (temp_3010&&temp_3010[0]) {
			case 24: {
				const name_3012 = temp_3010[1];
				return name_3012
			} break;

			case 22: {
				const name_3014 = temp_3010[1];
				{
					let step_3016 = 0;
					const named_3018 = name_3014;
					if (step_3016 == 0 && named_3018 != null) { step_3016 = 1 };
					if (step_3016 == 1) { return named_3018 } else {
						throw 'Module function should have a name';
					};
				}
			} break;

			case 48: {
				const node_3020 = temp_3010[1];
				{
					const temp_3022 = (node_3020);
					switch (temp_3022&&temp_3022[0]) {
					case 26: {
						const t_3024 = temp_3022[1];
						{
							const temp_3026 = (t_3024);
							switch (temp_3026&&temp_3026[0]) {
							case 1: {
								const name_3028 = temp_3026[1];
								return name_3028
							} break;

							case 2: {
								const name_3030 = temp_3026[1];
								return name_3030
							} break;
							};
						}
					} break;
					};
				}
			} break;

			case 26: {
				const t_3032 = temp_3010[1];
				{
					const temp_3034 = (t_3032);
					switch (temp_3034&&temp_3034[0]) {
					case 1: {
						const name_3036 = temp_3034[1];
						return name_3036
					} break;

					case 2: {
						const name_3038 = temp_3034[1];
						return name_3038
					} break;
					};
				}
			} break;

			case 39: {
				const t_3040 = temp_3010[1];
				{
					const temp_3042 = (t_3040);
					switch (temp_3042&&temp_3042[0]) {
					case 1: {
						const name_3044 = temp_3042[1];
						return name_3044
					} break;

					case 2: {
						const name_3046 = temp_3042[1];
						return name_3046
					} break;
					};
				}
			} break;

			case 9: {
				const t_3048 = temp_3010[1];
				{
					const temp_3050 = (t_3048);
					switch (temp_3050&&temp_3050[0]) {
					case 1: {
						const name_3052 = temp_3050[1];
						return name_3052
					} break;

					case 2: {
						const name_3054 = temp_3050[1];
						return name_3054
					} break;
					};
				}
			} break;

			default:
			this.fail('Improper module item format, wrap expressions as `{ expressions }`', node_3008)
			};
		};
		findInNamespaceRoots(name_3056) {
			{
				let step_3058 = 0;
				const node_3060 = this.currentModule.imported.get(name_3056);
				if (step_3058 == 0 && node_3060 != null) { step_3058 = 1 };
				if (step_3058 == 1) { return node_3060 };
			};
			{
				let step_3062 = 0;
				const node_3064 = this.project.globals.get(name_3056);
				if (step_3062 == 0 && node_3064 != null) { step_3062 = 1 };
				if (step_3062 == 1) { return node_3064 };
			};
			return null;
			if (this.namespaces.get(name_3056) != null) { return this.namespaces.get(name_3056) };
			let m_3066 = this.namespaces.get('');
			let el_3068 = (null);
			{
				const temp_3070 = ((m_3066));
				switch (temp_3070&&temp_3070[0]) {
				case 36: {
					const els_3072 = temp_3070[2];
					el_3068 = els_3072
				} break;

				default:
				return null
				};
			};
			for (const e of $toIterator(el_3068)) {
				if (name_3056 == this.nameOfModuleItem(e)) { return e };
			};
			return null;
		};
		pushScope() {
			this.scopes.push(new Map());
			this.scopeTypes.push(new Map());
		};
		popScope() {
			this.scopes.pop();
			this.scopeTypes.pop();
		};
		addScope(name_3074, node_3076) { this.scopes[this.scopes.length - 1].set(name_3074, node_3076) };
		addScopeType(name_3078, type_3080) { this.scopeTypes[this.scopeTypes.length - 1].set(name_3078, type_3080) };
		unify(to_3082, fromValue, node_3085) {
			if (to_3082 == fromValue) { return to_3082 };
			if (to_3082 == this.typeAny) { return to_3082 };
			if (fromValue == this.typeVoid) { this.fail(('Incompatible types `' + (Type.stringify(to_3082)) + '` and non-value type `Void`'), node_3085) };
			if ((to_3082 == this.typeFloat) && (fromValue == this.typeInt)) { return this.typeFloat };
			const isNullable = (t_3088) => {
				{
					const temp_3090 = (t_3088);
					switch (temp_3090&&temp_3090[0]) {
					case 1: {
						return true
					} break;

					case 2: {
						return true
					} break;
					};
				};
				return false;
			};
			const unwrapNullable = (t_3093) => {
				{
					const temp_3095 = (t_3093);
					switch (temp_3095&&temp_3095[0]) {
					case 1: {
						const handle = temp_3095[1];
						return handle.value
					} break;

					case 2: {
						const t_3098 = temp_3095[1];
						return t_3098
					} break;
					};
				};
				return t_3093;
			};
			const instanceOfClass = (t_3101) => {
				{
					const temp_3103 = (unwrapNullable(t_3101));
					switch (temp_3103&&temp_3103[0]) {
					case 4: {
						const t_3105 = temp_3103[1];
						return t_3105
					} break;

					case 3: {
						const t_3107 = temp_3103[1];
						this.fail(('Cannot take classes `class ' + (t_3107.name) + '` as values'), node_3085)
					} break;
					};
				};
				return null;
			};
			{
				const temp_3109 = (to_3082);
				switch (temp_3109&&temp_3109[0]) {
				case 1: {
					const handle_3111 = temp_3109[1];
					if (handle_3111.value == null) { handle_3111.value = (() => {
						const temp_3113 = (fromValue);
						switch (temp_3113&&temp_3113[0]) {
						case 1: {
							const handle_3115 = temp_3113[1];
							return handle_3115.value
						} break;

						case 2: {
							const t_3117 = temp_3113[1];
							return t_3117
						} break;

						default:
						return fromValue
						};
					})() }
				} break;
				};
			};
			let toNullable = isNullable(to_3082);
			let fromNullable = isNullable(fromValue);
			let toInstance = instanceOfClass(to_3082);
			let fromInstance = instanceOfClass(fromValue);
			if (toInstance == null || fromInstance == null) { return (() => {
				const result_3123 = to_3082;
				if (result_3123 != null) { return result_3123 };
				return fromValue;
			})() };
			if ((toInstance != fromInstance) && (unwrapNullable(to_3082) != this.typeAny) && (unwrapNullable(fromValue) != this.typeAny)) { this.fail(('Incompatible types `' + (Type.stringify(to_3082)) + '` and value of `' + (Type.stringify(fromValue)) + '`'), node_3085) };
			return (() => {
				const result_3125 = to_3082;
				if (result_3125 != null) { return result_3125 };
				return fromValue;
			})();
		};
		findType(name_3127) {
			{
				let i_3129 = 0;
				let it_3131 = 0;
				let at_3133 = this.scopes.length;
				while (it_3131 < at_3133) {
					i_3129 = it_3131;
					it_3131++;
					{
						let step_3135 = 0;
						const subj_3137 = this.scopes[this.scopes.length - i_3129 - 1].get(name_3127);
						if (step_3135 == 0 && subj_3137 != null) { step_3135 = 1 };
						if (step_3135 == 1) { return subj_3137 };
					};
				};
			};
			const rooted = this.findInNamespaceRoots(name_3127);
			if (rooted == null) {};
			return rooted;
		};
		findActualType(name_3140) {
			{
				let i_3142 = 0;
				let it_3144 = 0;
				let at_3146 = this.scopeTypes.length;
				while (it_3144 < at_3146) {
					i_3142 = it_3144;
					it_3144++;
					{
						let step_3148 = 0;
						const subj_3150 = this.scopeTypes[this.scopeTypes.length - i_3142 - 1].get(name_3140);
						if (step_3148 == 0 && subj_3150 != null) { step_3148 = 1 };
						if (step_3148 == 1) { return subj_3150 };
					};
				};
			};
			return null;
			return null;
		};
		toType(t_3152, node_3154) {
			const temp_3156 = (t_3152);
			switch (temp_3156&&temp_3156[0]) {
			case 1: {
				const name_3158 = temp_3156[1];
				{
					const nodeType = (() => {
						const result_3161 = this.findType(name_3158);
						if (result_3161 != null) { return result_3161 };
						return (() => {
							const result_3163 = this.currentModule.exported.get(name_3158);
							if (result_3163 != null) { return result_3163 };
							return this.currentModule.imported.get(name_3158);
						})();
					})();
					if (this.types.get(nodeType) == null) {
						const temp_3165 = (nodeType);
						switch (temp_3165&&temp_3165[0]) {
						case 26: {
							this.registerClassType(nodeType)
						} break;

						case 39: {
							this.registerEnumType(nodeType)
						} break;

						case null: case undefined: {
							{
							}
						} break;

						default:
						{
						}
						};
					};
					const type_3167 = (() => {
						const result_3169 = this.findActualType(name_3158);
						if (result_3169 != null) { return result_3169 };
						return this.types.get(nodeType);
					})();
					{
						const temp_3171 = (type_3167);
						switch (temp_3171&&temp_3171[0]) {
						case 3: {
							const type_3173 = temp_3171[1];
							{
								if (type_3173.genericParams.length > 0) { this.fail(('The type `' + (type_3173.name) + '` requires `<' + (type_3173.genericParams) + '>` generic parameters'), node_3154) };
								return type_3173.instantiate();
							}
						} break;

						case 6: {
							const type_3175 = temp_3171[1];
							return this.types.get(nodeType)
						} break;

						case null: case undefined: {
							this.fail(('Cannot find type ^`' + (name_3158) + '`'), node_3154)
						} break;

						default:
						{
							if (type_3167 == this.typeAny) { return this.typeAny };
							this.fail(('Unsupported type `' + (name_3158) + '`'), node_3154);
						}
						};
					};
				}
			} break;

			case 2: {
				const name_3177 = temp_3156[1];
				const params_3179 = temp_3156[2];
				{
					const nodeType_3181 = (() => {
						const result_3183 = this.findType(name_3177);
						if (result_3183 != null) { return result_3183 };
						return (() => {
							const result_3185 = this.currentModule.exported.get(name_3177);
							if (result_3185 != null) { return result_3185 };
							return this.currentModule.imported.get(name_3177);
						})();
					})();
					if (this.types.get(nodeType_3181) == null) {
						const temp_3187 = (nodeType_3181);
						switch (temp_3187&&temp_3187[0]) {
						case 26: {
							this.registerClassType(nodeType_3181)
						} break;

						case 39: {
							this.registerEnumType(nodeType_3181)
						} break;
						};
					};
					const type_3189 = (() => {
						const result_3191 = this.findActualType(name_3177);
						if (result_3191 != null) { return result_3191 };
						return this.types.get(nodeType_3181);
					})();
					{
						const temp_3193 = (type_3189);
						switch (temp_3193&&temp_3193[0]) {
						case 3: {
							const type_3195 = temp_3193[1];
							{
								if (type_3195.genericParams.length == 0) { this.fail(('The type `' + (type_3195.name) + '` requires zero generic parameters'), node_3154) };
								if (type_3195.genericParams.length != params_3179.length) { this.fail(('The type `' + (type_3195.name) + '` requires `<' + (type_3195.genericParams) + '>` generic parameters'), node_3154) };
								return type_3195.instantiateGeneric((() => {
									const result_3197 = [];
									const value_3199 = params_3179;
									for (const p of $toIterator(value_3199)) result_3197.push(this.toType(p, node_3154));
									return result_3197;
								})());
							}
						} break;

						case null: case undefined: {
							this.fail(('Cannot find type +`' + (name_3177) + '`'), node_3154)
						} break;

						default:
						{
							if (type_3189 == this.typeAny) { return this.typeAny };
							this.fail(('Unsupported type `' + (name_3177) + '`'), node_3154);
						}
						};
					};
				}
			} break;

			case 0: {
				const t_3201 = temp_3156[1];
				return /*Nullable*/[2,this.toType(t_3201, node_3154),"F:/hexa-dev/hexa/source/compiler/typer.hexa:1261"]
			} break;

			case 3: {
				const args_3203 = temp_3156[1];
				const ret = temp_3156[2];
				return /*Function*/[10,(() => {
					const result_3206 = [];
					const value_3208 = args_3203;
					for (const arg of $toIterator(value_3208)) result_3206.push(this.toType(arg, node_3154));
					return result_3206;
				})(),this.toType(ret, node_3154),"F:/hexa-dev/hexa/source/compiler/typer.hexa:1263"]
			} break;

			case 5: {
				const names_3210 = temp_3156[1];
				const el_3212 = temp_3156[2];
				{
					const els_3214 = (() => {
						const result_3216 = [];
						const value_3218 = el_3212;
						for (const e of $toIterator(value_3218)) result_3216.push(this.toType(e, node_3154));
						return result_3216;
					})();
					return /*Struct*/[11,names_3210,els_3214,"F:/hexa-dev/hexa/source/compiler/typer.hexa:1266"];
				}
			} break;

			default:
			this.fail('Unsupported node type ' + t_3152 + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3154)
			};
		};
		mixVarTypes(t_3220, e_3222, node_3224) {
			if ((t_3220 != null) && (e_3222 != null)) { this.types.set(node_3224, this.unify(this.toType(t_3220, node_3224), this.types.get(e_3222), e_3222)) };
			if ((t_3220 == null) && (e_3222 != null)) { this.types.set(node_3224, this.types.get(e_3222)) };
			if ((t_3220 == null) && (e_3222 == null)) { this.types.set(node_3224, /*UnknownNullable*/[1,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:1281"]) };
			if ((t_3220 != null) && (e_3222 == null)) { this.types.set(node_3224, this.toType(t_3220, node_3224)) };
		};
		varTypes(vars_3226) {
			const varTypes = [];
			for (const v of $toIterator(vars_3226)) {
				const temp_3229 = (v);
				switch (temp_3229&&temp_3229[0]) {
				case 24: {
					const t_3231 = temp_3229[2];
					{
						let step_3233 = 0;
						const t_3235 = t_3231;
						if (step_3233 == 0 && t_3235 != null) { step_3233 = 1 };
						if (step_3233 == 1) { varTypes.push(this.toType(t_3235, v)) } else {
							varTypes.push(/*Unknown*/[0,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:1297"]);
						};
					}
				} break;
				};
			};
			return varTypes;
		};
		fillFunction(node_3237, expr_3239, vars_3241, rettype_3243, arrow) {
			this.pushScope();
			const _insideFunction = this.insideFunction;
			const _functionAllowedToThrow = this.functionAllowedToThrow;
			const _functionThrows = this.functionThrows;
			const _functionReturnsAType = this.functionReturnsAType;
			const _functionActuallyReturns = this.functionActuallyReturns;
			const _insideTry = this.insideTry;
			{
				let i_3252 = 0;
				let it_3254 = 0;
				let at_3256 = vars_3241.length;
				while (it_3254 < at_3256) {
					i_3252 = it_3254;
					it_3254++;
					{
						const v = vars_3241[i_3252];
						{
							const temp_3259 = (v);
							switch (temp_3259&&temp_3259[0]) {
							case 24: {
								const vname = temp_3259[1];
								const t_3262 = temp_3259[2];
								const e_3264 = temp_3259[3];
								const const_3266 = temp_3259[4];
								{
									if ((t_3262 != null) && (this.toType(t_3262, v) == this.typeVoid)) { this.fail('Argument cannot be of type `Void`', v) };
									if (t_3262 != null) { this.types.set(v, this.toType(t_3262, v)) };
									if (e_3264 != null) {
										this.fillExpression(e_3264);
										{
											let step_3268 = 0;
											const t_3270 = this.types.get(v);
											if (step_3268 == 0 && t_3270 != null) { step_3268 = 1 };
											if (step_3268 == 1) { this.unify(this.types.get(e_3264), t_3270, e_3264) };
										};
									};
									this.addScope(vname, v);
								}
							} break;
							};
						};
					};
				};
			};
			let ret_3272 = null;
			{
				let step_3274 = 0;
				const rt = rettype_3243;
				if (step_3274 == 0 && rt != null) { step_3274 = 1 };
				if (step_3274 == 1) { ret_3272 = this.toType(rt, node_3237) };
			};
			this.functionReturnsAType = ret_3272;
			this.functionActuallyReturns = false;
			const atts_3277 = this.project.mapDecorators.get(node_3237);
			{
				let step_3279 = 0;
				const noThrow = DataHelper.getAttribute(atts_3277, 'noThrow');
				if (step_3279 == 0 && noThrow != null) { step_3279 = 1 };
				if (step_3279 == 1) {
					if (noThrow.values.length > 0) { this.fail('Attribute `@noThrow` should have no parameters', node_3237) };
					this.functionAllowedToThrow = false;
				} else {
					this.functionAllowedToThrow = true;
				};
			};
			{
				let step_3282 = 0;
				const throws = DataHelper.getAttribute(atts_3277, 'throws');
				if (step_3282 == 0 && throws != null) { step_3282 = 1 };
				if (step_3282 == 1) {
					if (this.functionAllowedToThrow == false) { this.fail('Attribute `@noThrow` cannot be used with `@throws`', node_3237) };
					this.functionThrows = true;
				} else {
					this.functionThrows = false;
				};
			};
			this.insideFunction = true;
			this.insideTry = false;
			if ((arrow) && (expr_3239 != null)) { this.fillExpression(expr_3239) };
			if (((!arrow)) && (expr_3239 != null)) { this.fill(expr_3239) };
			this.popScope();
			ret_3272 = this.functionReturnsAType;
			if (arrow) { if ((arrow) && (ret_3272 == null) && (expr_3239 != null)) { ret_3272 = this.types.get(expr_3239) } else {
				this.unify(this.types.get(expr_3239), ret_3272, expr_3239);
			} } else {
				if (ret_3272 == null) { ret_3272 = this.typeVoid };
				if ((ret_3272 != this.typeVoid) && (expr_3239 != null) && (this.functionActuallyReturns == false)) { this.fail(('Function expects result of `' + (Type.stringify(ret_3272)) + '` but never does `return value`'), node_3237) };
			};
			this.insideFunction = _insideFunction;
			this.functionReturnsAType = _functionReturnsAType;
			this.functionActuallyReturns = _functionActuallyReturns;
			this.types.set(node_3237, /*Function*/[10,(() => {
				const result_3285 = [];
				const value_3287 = vars_3241;
				for (const v of $toIterator(value_3287)) result_3285.push(this.types.get(v));
				return result_3285;
			})(),ret_3272,"F:/hexa-dev/hexa/source/compiler/typer.hexa:1402"]);
		};
		fillModuleTypes(node_3289) {
			const temp_3291 = (node_3289);
			switch (temp_3291&&temp_3291[0]) {
			case 26: {
				const t_3293 = temp_3291[1];
				const extend_3295 = temp_3291[2];
				const implement_3297 = temp_3291[3];
				const f_3299 = temp_3291[4];
				const external_3301 = temp_3291[5];
				{
					this.addScope(DataHelper.extractTypeName(t_3293), node_3289);
					this.registerClassType(node_3289);
				}
			} break;

			case 39: {
				const t_3303 = temp_3291[1];
				const f_3305 = temp_3291[2];
				const valuesType_3307 = temp_3291[3];
				{
					this.addScope(DataHelper.extractTypeName(t_3303), node_3289);
					this.registerEnumType(node_3289);
				}
			} break;

			case 9: {
				const alias = temp_3291[1];
				const value_3310 = temp_3291[2];
				{
					this.types.set(node_3289, /*Alias*/[9,null,"F:/hexa-dev/hexa/source/compiler/typer.hexa:1419"]);
					this.addScope(this.nameOfModuleItem(node_3289), node_3289);
				}
			} break;
			};
		};
		fill(node_3312) {
			const temp_3314 = (node_3312);
			switch (temp_3314&&temp_3314[0]) {
			case 26: {
				this.fail('Defining classes within blocks not allowed', node_3312)
			} break;

			case 39: {
				this.fail('Defining enums within blocks not allowed', node_3312)
			} break;

			case 9: {
				{
					this.types.set(node_3312, /*Alias*/[9,null,"F:/hexa-dev/hexa/source/compiler/typer.hexa:1435"]);
					this.addScope(this.nameOfModuleItem(node_3312), node_3312);
				}
			} break;

			case 25: {
				const e_3316 = temp_3314[1];
				for (const ee of $toIterator(e_3316)) {
					this.fill(ee);
				}
			} break;

			case 12: {
				const el_3318 = temp_3314[1];
				{
					this.pushScope();
					for (const e of $toIterator(el_3318)) {
						{
							const temp_3320 = (e);
							switch (temp_3320&&temp_3320[0]) {
							case 1: {
								const name_3322 = temp_3320[1];
								{
								}
							} break;
							};
						};
						this.fill(e);
					};
					this.popScope();
				}
			} break;

			case 24: {
				const name_3324 = temp_3314[1];
				const t_3326 = temp_3314[2];
				const e_3328 = temp_3314[3];
				const const_3330 = temp_3314[4];
				const external_3332 = temp_3314[5];
				{
					if ((e_3328 == null) && (const_3330) && ((!external_3332))) { this.fail(('Constant should have a value `let ' + (name_3324) + ' = value`'), node_3312) };
					if ((e_3328 != null) && (external_3332)) { this.fail(('External variable should not have a value `declare let ' + (name_3324) + '`'), node_3312) };
					if ((t_3326 == null) && (external_3332)) { this.fail(('External variable should have a type `declare let ' + (name_3324) + ': T`'), node_3312) };
					if (e_3328 != null) {
						this.pushScope();
						this.fillExpression(e_3328);
						this.popScope();
					};
					this.mixVarTypes(t_3326, e_3328, node_3312);
					this.addScope(name_3324, node_3312);
				}
			} break;

			case 10: {
				const a_3334 = temp_3314[1];
				const op_3336 = temp_3314[2];
				const b_3338 = temp_3314[3];
				{
					this.fillExpression(a_3334);
					this.fillExpression(b_3338);
					let parent = this.parents.get(a_3334);
					if (op_3336 == 91) {
						const temp_3341 = (parent);
						switch (temp_3341&&temp_3341[0]) {
						case null: case undefined: {
							{
							}
						} break;

						case 24: {
							const name_3343 = temp_3341[1];
							const const_3345 = temp_3341[4];
							{
								if (const_3345) { this.fail(('Cannot reassign a constant `let ' + (name_3343) + '`, redefine it as `var ' + (name_3343) + '` to allow reassignment\n') + this.positionOf(parent) + ('`let ' + (name_3343) + '` is defined here'), node_3312) };
								this.types.set(node_3312, this.unify(this.types.get(a_3334), this.types.get(b_3338), b_3338));
							}
						} break;

						case 1: {
							const name_3347 = temp_3341[1];
							this.fail(('Cannot reassign case parameter `' + (name_3347) + '`'), node_3312)
						} break;

						case 22: {
							const name_3349 = temp_3341[1];
							this.fail(('Cannot reassign a function `' + (name_3349) + '`'), node_3312)
						} break;

						case 26: {
							this.fail('Cannot reassign class', node_3312)
						} break;

						case 39: {
							this.fail('Cannot reassign enum', node_3312)
						} break;

						case 49: {
							const name_3351 = temp_3341[1];
							this.fail(('Cannot reassign iterator value `' + (name_3351) + '` of for loop\n') + this.positionOf(parent) + ('`for (' + (name_3351) + ' in ...)` is defined here'), node_3312)
						} break;

						case 47: {
							{
							}
						} break;

						case 4: {
							this.fail('Cannot reassign `super`', node_3312)
						} break;

						default:
						this.fail('`=` not implemented for: ' + parent, node_3312)
						};
					};
				}
			} break;

			case 18: {
				if ((!this.allowBreakAndContinue)) { this.fail('Cannot use `break` outside of loop', node_3312) }
			} break;

			case 49: {
				const name_3353 = temp_3314[1];
				const over = temp_3314[2];
				const by = temp_3314[3];
				const range = temp_3314[4];
				{
					this.pushScope();
					this.fillExpression(over);
					const overType = this.types.get(over);
					{
						const temp_3359 = (overType);
						switch (temp_3359&&temp_3359[0]) {
						case 4: {
							const type_3361 = temp_3359[1];
							const generic = temp_3359[2];
							if ((generic != null) && (generic.length == 1)) { this.types.set(node_3312, generic[0]) } else if (overType == this.typeInt) { this.types.set(node_3312, this.typeInt) } else {
								this.fail('Type of iterable is neither Int nor Array, but ' + Type.stringify(overType), over);
							}
						} break;

						case 2: {
							this.fail('Type of iterable should not be nullable', over)
						} break;

						case 1: {
							this.fail('Type of iterable should not be nullable', over)
						} break;

						case null: case undefined: {
							{
							}
						} break;

						default:
						this.fail('Type of iterable is neiter Int nor Array', over)
						};
					};
					{
						let step_3364 = 0;
						const range_3366 = range;
						if (step_3364 == 0 && range_3366 != null) { step_3364 = 1 };
						if (step_3364 == 1) {
							this.fillExpression(range_3366);
							if (this.types.get(range_3366) != this.typeInt) { this.fail('Range end must be of Int type', range_3366) };
							if (overType != this.typeInt) { this.fail('Range start must be of Int type', over) };
							this.types.set(node_3312, this.typeInt);
						};
					};
					this.addScope(name_3353, node_3312);
					const _allowBreakAndContinue = this.allowBreakAndContinue;
					this.allowBreakAndContinue = true;
					{
						const temp_3369 = (by);
						switch (temp_3369&&temp_3369[0]) {
						case 12: {
							{
							}
						} break;

						default:
						this.fail('Loop body must be a `{` block `}`', by)
						};
					};
					this.fill(by);
					this.allowBreakAndContinue = _allowBreakAndContinue;
					this.popScope();
				}
			} break;

			case 22: {
				const name_3371 = temp_3314[1];
				const expr_3373 = temp_3314[2];
				const vars_3375 = temp_3314[3];
				const rettype_3377 = temp_3314[4];
				const external_3379 = temp_3314[5];
				{
					if (((!external_3379)) && (expr_3373 == null)) { this.fail(('Non-external function `' + (name_3371) + '` should have a body'), node_3312) };
					if ((external_3379) && (rettype_3377 == null)) { this.fail(('External function `' + (name_3371) + '` should have a returning type'), node_3312) };
					this.addScope(name_3371, node_3312);
					this.fillFunction(node_3312, expr_3373, vars_3375, rettype_3377);
					if (false) {
						const _insideFunction_3381 = this.insideFunction;
						this.insideFunction = true;
						this.pushScope();
						if (expr_3373 != null) { this.fill(expr_3373) };
						this.popScope();
						this.insideFunction = _insideFunction_3381;
					};
				}
			} break;

			case 14: {
				const econd = temp_3314[1];
				const eif = temp_3314[2];
				const eelse = temp_3314[3];
				{
					let depth = 0;
					for (const e of $toIterator(econd)) {
						const temp_3387 = (e);
						switch (temp_3387&&temp_3387[0]) {
						case 24: {
							const name_3389 = temp_3387[1];
							const t_3391 = temp_3387[2];
							const expr_3393 = temp_3387[3];
							const const_3395 = temp_3387[4];
							{
								if ((!const_3395)) { this.fail('Only if-let bindings supported, not if-var', node_3312) };
								if (t_3391 != null) { this.fail('Do not specify a type `: T` in if-let bindings', node_3312) };
								if (expr_3393 == null) { this.fail(('if-let binding should have a value `' + (name_3389) + ' = value'), node_3312) };
								depth++;
								this.pushScope();
								this.pushScope();
								this.fillExpression(expr_3393);
								this.popScope();
								{
									const temp_3397 = ((this.types.get(expr_3393)));
									switch (temp_3397&&temp_3397[0]) {
									case 2: {
										const t_3399 = temp_3397[1];
										this.types.set(e, t_3399)
									} break;

									case 1: {
										const handle_3401 = temp_3397[1];
										{
											let step_3403 = 0;
											const t_3405 = handle_3401.value;
											if (step_3403 == 0 && t_3405 != null) { step_3403 = 1 };
											if (step_3403 == 1) { this.types.set(e, t_3405) } else {
												this.fail('if-let cannot bind not fully known nullable type', node_3312);
											};
										}
									} break;

									default:
									this.types.set(e, this.types.get(expr_3393))
									};
								};
								this.addScope(name_3389, e);
							}
						} break;

						default:
						{
							this.fillExpression(e);
							const type_3407 = this.types.get(e);
							if ((type_3407 != this.typeBool) && (type_3407 != this.typeAny) && (type_3407 != null)) { this.fail('`if (value)` expects `value` only of type `Bool`, but got `' + Type.stringify(this.types.get(e)) + '`', e) };
						}
						};
					};
					this.fill(eif);
					while ((depth > 0)) {
						depth--;
						this.popScope();
					};
					if (eelse != null) { this.fill(eelse) };
				}
			} break;

			case 35: {
				const exprs = temp_3314[1];
				const conds = temp_3314[2];
				const guards = temp_3314[3];
				const cases = temp_3314[4];
				this.fillSwitch(node_3312, false)
			} break;

			case 28: {
				const e_3413 = temp_3314[1];
				const t_3415 = temp_3314[2];
				const v_3417 = temp_3314[3];
				const ca = temp_3314[4];
				{
					const _insideTry_3420 = this.insideTry;
					this.insideTry = true;
					{
						const temp_3422 = (e_3413);
						switch (temp_3422&&temp_3422[0]) {
						case 12: {
							{
							}
						} break;

						default:
						this.fail('Try body must be a `{ block }`', e_3413)
						};
					};
					this.fill(e_3413);
					this.insideTry = _insideTry_3420;
					{
						let i_3424 = 0;
						let it_3426 = 0;
						let at_3428 = ca.length;
						while (it_3426 < at_3428) {
							i_3424 = it_3426;
							it_3426++;
							{
								const type_3430 = this.toType(t_3415[i_3424], ca[i_3424]);
								{
									const temp_3432 = (type_3430);
									switch (temp_3432&&temp_3432[0]) {
									case 11: {
										this.fail('Catch type must be a specific class, not `{}`', ca[i_3424])
									} break;

									case 10: {
										this.fail('Catch type must be a specific class, not function', ca[i_3424])
									} break;
									};
								};
								this.types.set(t_3415[i_3424], type_3430);
								this.pushScope();
								this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_3417[i_3424]), v_3417[i_3424]);
								{
									const temp_3434 = (ca[i_3424]);
									switch (temp_3434&&temp_3434[0]) {
									case 12: {
										{
										}
									} break;

									default:
									this.fail('Catch body must be a `{ block }`', ca[i_3424])
									};
								};
								this.fill(ca[i_3424]);
								this.popScope();
							};
						};
					};
				}
			} break;

			case 21: {
				const econd_3436 = temp_3314[1];
				const e_3438 = temp_3314[2];
				const pre = temp_3314[3];
				{
					if (pre == true) { this.fillExpression(econd_3436) };
					const _allowBreakAndContinue_3441 = this.allowBreakAndContinue;
					this.allowBreakAndContinue = true;
					{
						const temp_3443 = (e_3438);
						switch (temp_3443&&temp_3443[0]) {
						case 12: {
							{
							}
						} break;

						default:
						this.fail('`while` statements must be wrapped with a `{` block `}`', e_3438)
						};
					};
					this.fill(e_3438);
					this.allowBreakAndContinue = _allowBreakAndContinue_3441;
					if (pre == false) { this.fillExpression(econd_3436) };
					this.types.set(node_3312, this.typeVoid);
				}
			} break;

			case 19: {
				{
					this.types.set(node_3312, this.typeVoid);
					if ((!this.allowBreakAndContinue)) { this.fail('Cannot use `continue` outside of loop', node_3312) };
				}
			} break;

			default:
			this.fillExpression(node_3312)
			};
		};
		fillExpression(node_3445) {
			const temp_3447 = (node_3445);
			switch (temp_3447&&temp_3447[0]) {
			case 1: {
				const name_3449 = temp_3447[1];
				{
					let subj_3451 = null;
					{
						let i_3453 = 0;
						let it_3455 = 0;
						let at_3457 = this.scopes.length;
						while (it_3455 < at_3457) {
							i_3453 = it_3455;
							it_3455++;
							{
								subj_3451 = this.scopes[this.scopes.length - i_3453 - 1].get(name_3449);
								if (subj_3451 != null) { break };
							};
						};
					};
					if (subj_3451 == null) { subj_3451 = this.findInNamespaceRoots(name_3449) };
					if ((subj_3451 == null) && (name_3449 == 'const')) { this.fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node_3445) };
					if (subj_3451 == null) { this.fail(('Cannot find variable with name `' + (name_3449) + '`'), node_3445) };
					if ((this.parents.get(node_3445) != null) && (this.parents.get(node_3445) != subj_3451)) { this.fail(('Parent overwitten from ' + (this.parents.get(node_3445)) + ' to ' + (subj_3451) + ' for node ' + (node_3445) + '') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3445) };
					this.parents.set(node_3445, subj_3451);
					{
						let step_3459 = 0;
						const type_3461 = this.types.get(subj_3451);
						if (step_3459 == 0 && type_3461 != null) { step_3459 = 1 };
						if (step_3459 == 1) { this.types.set(node_3445, type_3461) };
					};
				}
			} break;

			case 23: {
				const expr_3463 = temp_3447[1];
				const vars_3465 = temp_3447[2];
				const rettype_3467 = temp_3447[3];
				{
					this.fillFunction(node_3445, expr_3463, vars_3465, rettype_3467, true);
					if (false) {
						this.pushScope();
						const _insideFunction_3469 = this.insideFunction;
						this.insideFunction = true;
						this.fillExpression(expr_3463);
						this.popScope();
						this.insideFunction = _insideFunction_3469;
					};
				}
			} break;

			case 22: {
				const name_3471 = temp_3447[1];
				const expr_3473 = temp_3447[2];
				const vars_3475 = temp_3447[3];
				const rettype_3477 = temp_3447[4];
				const external_3479 = temp_3447[5];
				{
					if (external_3479) { this.fail(('External function `declare function ' + (name_3471) + '` cannot be taken as a value'), node_3445) };
					this.fillFunction(node_3445, expr_3473, vars_3475, rettype_3477);
					if (false) {
						this.pushScope();
						this.addScope(name_3471, node_3445);
						const _insideFunction_3481 = this.insideFunction;
						this.insideFunction = true;
						if (expr_3473 != null) { this.fill(expr_3473) };
						this.popScope();
						this.insideFunction = _insideFunction_3481;
					};
				}
			} break;

			case 32: {
				const el_3483 = temp_3447[1];
				{
					const temp_3485 = (el_3483[0]);
					switch (temp_3485&&temp_3485[0]) {
					case 49: {
						const name_3487 = temp_3485[1];
						const over_3489 = temp_3485[2];
						const by_3491 = temp_3485[3];
						const range_3493 = temp_3485[4];
						{
							if (el_3483.length > 1) { this.fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el_3483[1]) };
							if (range_3493 != null) { this.fail('Ranges `...range` are not supported here yet', range_3493) };
							this.pushScope();
							this.fillExpression(over_3489);
							this.types.set(el_3483[0], this.types.get(over_3489));
							this.addScope(name_3487, el_3483[0]);
							const _allowBreakAndContinue_3495 = this.allowBreakAndContinue;
							this.allowBreakAndContinue = false;
							this.fillExpression(by_3491);
							this.allowBreakAndContinue = _allowBreakAndContinue_3495;
							this.popScope();
							this.types.set(node_3445, this.typeArray.instantiateGeneric([this.types.get(by_3491)]));
						}
					} break;

					default:
					{
						for (const e of $toIterator(el_3483)) {
							this.fillExpression(e);
						};
						this.types.set(node_3445, this.typeArray.instantiateGeneric([/*?*/(el_3483.length > 0)? (this.types.get(el_3483[0])) : /*Unknown*/[0,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:1830"]]));
					}
					};
				}
			} break;

			case 33: {
				const keys = temp_3447[1];
				const values = temp_3447[2];
				{
					if (keys.length == 0) {
						this.types.set(node_3445, this.typeMap.instantiateGeneric([/*Unknown*/[0,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:1840"], /*Unknown*/[0,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:1841"]]));
						return;
					};
					{
						let i_3499 = 0;
						let it_3501 = 0;
						let at_3503 = keys.length;
						while (it_3501 < at_3503) {
							i_3499 = it_3501;
							it_3501++;
							{
								this.fillExpression(keys[i_3499]);
								this.fillExpression(values[i_3499]);
							};
						};
					};
					this.types.set(node_3445, this.typeMap.instantiateGeneric([this.types.get(keys[0]), this.types.get(values[0])]));
				}
			} break;

			case 44: {
				const e_3505 = temp_3447[1];
				const kind = temp_3447[2];
				const t_3508 = temp_3447[3];
				{
					const type_3510 = this.toType(t_3508, node_3445);
					if (type_3510 == this.typeVoid) { this.fail('Conversion `as Void` makes no sense', e_3505) };
					this.fillExpression(e_3505);
					if (this.types.get(e_3505) == this.typeVoid) { this.fail(('Conversion of `value as ' + (Type.stringify(t_3508)) + '` where `value` is of type `Void` makes no sense'), e_3505) };
					this.types.set(t_3508, type_3510);
					this.types.set(node_3445, type_3510);
				}
			} break;

			case 43: {
				const e_3512 = temp_3447[1];
				const t_3514 = temp_3447[2];
				{
					const type_3516 = this.toType(t_3514, node_3445);
					if (type_3516 == this.typeAny) { this.fail('Comparing `is Any` makes no sense, always true', e_3512) };
					if (type_3516 == this.typeVoid) { this.fail('Comparing `is Void` makes no sense', e_3512) };
					this.fillExpression(e_3512);
					this.types.set(t_3514, type_3516);
					this.types.set(node_3445, this.typeBool);
				}
			} break;

			case 12: {
				const el_3518 = temp_3447[1];
				if (el_3518.length == 0) { this.types.set(node_3445, /*Struct*/[11,[],[],"F:/hexa-dev/hexa/source/compiler/typer.hexa:1884"]) } else {
					this.pushScope();
					{
						let i_3520 = 0;
						let it_3522 = 0;
						let at_3524 = el_3518.length;
						while (it_3522 < at_3524) {
							i_3520 = it_3522;
							it_3522++;
							{
								if (i_3520 < el_3518.length - 1) { this.fill(el_3518[i_3520]) };
							};
						};
					};
					const latest = el_3518[el_3518.length - 1];
					this.fillExpression(latest);
					this.types.set(node_3445, this.types.get(latest));
					this.popScope();
				}
			} break;

			case 29: {
				const e_3527 = temp_3447[1];
				const n = temp_3447[2];
				{
					{
						const temp_3530 = (e_3527);
						switch (temp_3530&&temp_3530[0]) {
						case 4: {
							if ((!this.allowSuper)) { this.fail('Cannot access `super` here', node_3445) }
						} break;

						default:
						this.fillExpression(e_3527)
						};
					};
					{
						let step_3532 = 0;
						const etype = (this.types.get(e_3527));
						if (step_3532 == 0 && etype != null) { step_3532 = 1 };
						if (step_3532 == 1) {
							const temp_3535 = (etype);
							switch (temp_3535&&temp_3535[0]) {
							case 4: {
								const type_3537 = temp_3535[1];
								{
									type_3537.useless = false;
									if (etype == this.typeAny) {
										this.types.set(node_3445, this.typeAny);
										return;
									};
									const index_3539 = type_3537.fieldNames.indexOf(n);
									if (index_3539 < 0) { this.fail(('Class `' + (this.nameOfModuleItem(type_3537.parent)) + '` has no field `.' + (n) + '`\nAvailable fields are: ') + type_3537.fieldNames.join(', '), (() => {
										const result_3541 = e_3527;
										if (result_3541 != null) { return result_3541 };
										return node_3445;
									})()) };
									if (type_3537.fieldStatic[index_3539] == true) { this.fail(('Class `' + (this.nameOfModuleItem(type_3537.parent)) + '` field `.' + (n) + '` is static'), node_3445) };
									{
										const temp_3543 = (type_3537.parent);
										switch (temp_3543&&temp_3543[0]) {
										case 26: {
											const t_3545 = temp_3543[1];
											const extend_3547 = temp_3543[2];
											const implement_3549 = temp_3543[3];
											const fields = temp_3543[4];
											const external_3552 = temp_3543[5];
											{
												this.registerClassType(type_3537.parent);
												for (const field of $toIterator(fields)) {
													if (DataHelper.nameOf(field) == n) {
														this.types.set(node_3445, this.types.get(field));
														this.parents.set(node_3445, field);
														if (this.types.get(field) == null) {
															console.log(this.positionOf(node_3445) + ('Note: field fieldInitialized[' + (n) + '] ='), type_3537.fieldInitialized[type_3537.fieldNames.indexOf(n)]);
															this.fail('Type for this field is null: ' + n, field);
														};
													};
												};
											}
										} break;

										default:
										this.fail(type_3537.parent, type_3537.parent)
										};
									};
								}
							} break;

							case 3: {
								const type_3554 = temp_3535[1];
								{
									type_3554.useless = false;
									const index_3556 = type_3554.fieldNames.indexOf(n);
									if (index_3556 < 0) { this.fail(('Class `' + (this.nameOfModuleItem(type_3554.parent)) + '` has no static field `.' + (n) + '`\nAvailable fields are: ') + type_3554.fieldNames.join(', '), node_3445) };
									if (type_3554.fieldStatic[index_3556] != true) { this.fail(('Class `' + (this.nameOfModuleItem(type_3554.parent)) + '` field `.' + (n) + '` is not static'), node_3445) };
									{
										const temp_3558 = (type_3554.parent);
										switch (temp_3558&&temp_3558[0]) {
										case 26: {
											const t_3560 = temp_3558[1];
											const extend_3562 = temp_3558[2];
											const implement_3564 = temp_3558[3];
											const fields_3566 = temp_3558[4];
											const external_3568 = temp_3558[5];
											for (const field of $toIterator(fields_3566)) {
												if (DataHelper.nameOf(field) == n) {
													this.types.set(node_3445, this.types.get(field));
													this.parents.set(node_3445, field);
												};
											}
										} break;

										default:
										this.fail(type_3554.parent, type_3554.parent)
										};
									};
								}
							} break;

							case 6: {
								const type_3570 = temp_3535[1];
								{
									const index_3572 = type_3570.fieldNames.indexOf(n);
									if (index_3572 < 0) { this.fail(('Enum `' + (type_3570.name) + '` has no field `.' + (n) + '`'), node_3445) };
									if (type_3570.fieldStatic[index_3572] != true) { this.fail(('Enum field `.' + (n) + '` is not static'), node_3445) };
									{
										const temp_3574 = (type_3570.parent);
										switch (temp_3574&&temp_3574[0]) {
										case 39: {
											const t_3576 = temp_3574[1];
											const fields_3578 = temp_3574[2];
											const valuesType_3580 = temp_3574[3];
											for (const field of $toIterator(fields_3578)) {
												const temp_3582 = (field);
												switch (temp_3582&&temp_3582[0]) {
												case 13: {
													{
													}
												} break;

												case 51: {
													{
													}
												} break;

												case 10: {
													{
													}
												} break;

												default:
												if (DataHelper.nameOf(field) == n) {
													this.types.set(node_3445, this.types.get(field));
													this.parents.set(node_3445, field);
												}
												};
											}
										} break;

										default:
										this.fail(type_3570.parent, type_3570.parent)
										};
									};
								}
							} break;

							case 11: {
								const names_3584 = temp_3535[1];
								const els_3586 = temp_3535[2];
								{
									const index_3588 = names_3584.indexOf(n);
									if (index_3588 < 0) {
										let object = '';
										{
											const temp_3591 = (e_3527);
											switch (temp_3591&&temp_3591[0]) {
											case 1: {
												const name_3593 = temp_3591[1];
												object = (' `' + (name_3593) + '`')
											} break;

											default:
											{
											}
											};
										};
										if (names_3584.length == 0) { this.fail(('Object' + (object) + ' is empty `{}` and has no fields. Create object with all fields defined upfront, like this: `obj = { ' + (n) + ': value }`'), node_3445) };
										if (names_3584.length != 0) { this.fail(('Object' + (object) + ' has no field `.' + (n) + '`\nAvailable fields are: ') + names_3584.join(', '), node_3445) };
									};
									this.types.set(node_3445, els_3586[index_3588]);
								}
							} break;

							case 1: {
								const handle_3595 = temp_3535[1];
								{
									this.failNonFatal(('Cannot access `.' + (n) + '` of nullable type `' + (Type.stringify(etype)) + '`, try to unwrap it with `if(let)`'), node_3445);
									this.types.set(node_3445, this.typeAny);
								}
							} break;

							case 2: {
								const type_3597 = temp_3535[1];
								{
									this.failNonFatal(('Cannot access `.' + (n) + '` of nullable type `' + (Type.stringify(etype)) + '`, try to unwrap it with `if(let)`'), node_3445);
									this.types.set(node_3445, this.typeAny);
								}
							} break;

							case 0: {
								const handle_3599 = temp_3535[1];
								{
									let step_3601 = 0;
									const type_3603 = handle_3599.value;
									if (step_3601 == 0 && type_3603 != null) { step_3601 = 1 };
									if (step_3601 == 1) {} else {
										this.failNonFatal(('Cannot access `.' + (n) + '` due to type of value being unknown, try to specify a proper type (set full type `[T]` if this value coming from array)'), node_3445);
										this.types.set(node_3445, this.typeAny);
									};
								}
							} break;

							case null: case undefined: {
								this.fail(('Cannot access `.' + (n) + '` due to type being `null`, seems to be internal compiler error'), node_3445)
							} break;

							default:
							this.fail(('Cannot access `.' + (n) + '` due to type being unhandled `' + (Type.stringify(etype)) + '`, seems to be internal compiler error'), node_3445)
							};
						} else {
							this.types.set(node_3445, this.typeAny);
						};
					};
				}
			} break;

			case 30: {
				const e_3605 = temp_3447[1];
				const n_3607 = temp_3447[2];
				{
					{
						const temp_3609 = (e_3605);
						switch (temp_3609&&temp_3609[0]) {
						case 4: {
							this.fail('Cannot access `super` here', node_3445)
						} break;
						};
					};
					this.fillExpression(e_3605);
					{
						const temp_3611 = ((this.types.get(e_3605)));
						switch (temp_3611&&temp_3611[0]) {
						case 3: {
							const type_3613 = temp_3611[1];
							{
								const index_3615 = type_3613.fieldNames.indexOf(n_3607);
								if (index_3615 < 0) { this.fail(('Class has no field `.' + (n_3607) + '`'), node_3445) };
								if (type_3613.fieldStatic[index_3615] != true) { this.fail(('Class field `.' + (n_3607) + '` is not static'), node_3445) };
							}
						} break;

						case 6: {
							const type_3617 = temp_3611[1];
							{
								const index_3619 = type_3617.fieldNames.indexOf(n_3607);
								if (index_3619 < 0) { this.fail(('Enum has no value constructor `.' + (n_3607) + '`\n') + this.proposeSimilar(type_3617.fieldNames.filter((element, index_3622) => (type_3617.fieldEnumConstructor[index_3622])), n_3607, 'constructors'), node_3445) };
								if (type_3617.fieldEnumConstructor[index_3619] != true) { this.fail(('Enum field `.' + (n_3607) + '` is not a value constructor'), node_3445) };
								{
									let step_3624 = 0;
									const fieldType = type_3617.fieldType[index_3619];
									if (step_3624 == 0 && fieldType != null) { step_3624 = 1 };
									if (step_3624 == 1) { this.types.set(node_3445, fieldType) } else {
										this.fail(('Enum field type is null for `' + (Node.stringify(node_3445)) + '`'), node_3445);
									};
								};
							}
						} break;

						case null: case undefined: {
							this.fail(('Doing .Upper `' + (Node.stringify(node_3445)) + '` over `' + (Node.stringify(e_3605)) + '` (' + (e_3605) + ') of type null'), node_3445)
						} break;

						default:
						{
						}
						};
					};
				}
			} break;

			case 51: {
				const t_3627 = temp_3447[1];
				{
					const temp_3629 = (t_3627);
					switch (temp_3629&&temp_3629[0]) {
					case 1: {
						const name_3631 = temp_3629[1];
						{
							const subj_3633 = this.find(name_3631);
							if (subj_3633 == null) { this.fail(('Cannot find type with name `' + (name_3631) + '`'), node_3445) };
							if ((this.parents.get(node_3445) != null) && (this.parents.get(node_3445) != subj_3633)) { this.fail(('Parent overwitten from ' + (this.parents.get(node_3445)) + ' to ' + (subj_3633) + ' for node ' + (node_3445) + '') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3445) };
							this.parents.set(node_3445, subj_3633);
							{
								let step_3635 = 0;
								const type_3637 = this.types.get(subj_3633);
								if (step_3635 == 0 && type_3637 != null) { step_3635 = 1 };
								if (step_3635 == 1) { this.types.set(node_3445, type_3637) } else {
									{
										const temp_3639 = (subj_3633);
										switch (temp_3639&&temp_3639[0]) {
										case 26: {
											this.registerClassType(subj_3633)
										} break;

										case 39: {
											this.registerEnumType(subj_3633)
										} break;
										};
									};
									{
										let step_3641 = 0;
										const type_3643 = this.types.get(subj_3633);
										if (step_3641 == 0 && type_3643 != null) { step_3641 = 1 };
										if (step_3641 == 1) { this.types.set(node_3445, type_3643) } else {
											console.log(this.positionOf(subj_3633) + ('' + (name_3631) + ' is here'));
											this.fail(('Cannot find type for `' + (name_3631) + '` even after late build') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3445);
										};
									};
								};
							};
						}
					} break;

					case 2: {
						const name_3645 = temp_3629[1];
						this.fail(('Cannot use generic type `' + (name_3645) + '` as a value'), node_3445)
					} break;

					default:
					this.fail('Cannot use this type as a value', node_3445)
					};
				}
			} break;

			case 31: {
				const path_3647 = temp_3447[1];
				const t_3649 = temp_3447[2];
				const el_3651 = temp_3447[3];
				const names_3653 = temp_3447[4];
				const values_3655 = temp_3447[5];
				{
					const type_3657 = this.toType(t_3649, node_3445);
					const subj_3659 = this.find(DataHelper.extractTypeName(t_3649));
					this.parents.set(node_3445, subj_3659);
					for (const e of $toIterator(el_3651)) {
						this.fillExpression(e);
					};
					{
						const temp_3661 = (type_3657);
						switch (temp_3661&&temp_3661[0]) {
						case 4: {
							const type_3663 = temp_3661[1];
							{
								if (type_3663.constructor == (-1)) { this.fail('Cannot construct class without `new () {}` constructor', node_3445) };
								type_3663.useless = false;
							}
						} break;

						default:
						this.fail('Constructor `new` may instantiate only classes', node_3445)
						};
					};
					this.types.set(node_3445, type_3657);
				}
			} break;

			case 38: {
				const names_3665 = temp_3447[1];
				const el_3667 = temp_3447[2];
				{
					{
						let name_3669 = 0;
						let it_3671 = 0;
						let at_3673 = names_3665.length;
						while (it_3671 < at_3673) {
							name_3669 = it_3671;
							it_3671++;
							{
								if (names_3665.indexOf(names_3665[name_3669]) != name_3669) { this.fail(('Field `' + (names_3665[name_3669]) + '` already exists'), node_3445) };
							};
						};
					};
					for (const e of $toIterator(el_3667)) {
						this.fillExpression(e);
					};
					const els_3675 = (() => {
						const result_3677 = [];
						const value_3679 = el_3667;
						for (const e of $toIterator(value_3679)) result_3677.push(this.types.get(e));
						return result_3677;
					})();
					this.types.set(node_3445, /*Struct*/[11,names_3665,els_3675,"F:/hexa-dev/hexa/source/compiler/typer.hexa:2119"]);
				}
			} break;

			case 28: {
				const e_3681 = temp_3447[1];
				const t_3683 = temp_3447[2];
				const v_3685 = temp_3447[3];
				const ca_3687 = temp_3447[4];
				{
					const _insideTry_3689 = this.insideTry;
					this.insideTry = true;
					this.fillExpression(e_3681);
					this.insideTry = _insideTry_3689;
					{
						let i_3691 = 0;
						let it_3693 = 0;
						let at_3695 = ca_3687.length;
						while (it_3693 < at_3695) {
							i_3691 = it_3693;
							it_3693++;
							{
								this.pushScope();
								this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_3685[i_3691]), v_3685[i_3691]);
								this.fill(ca_3687[i_3691]);
								this.popScope();
							};
						};
					};
					this.types.set(node_3445, this.types.get(e_3681));
				}
			} break;

			case 14: {
				const econd_3697 = temp_3447[1];
				const eif_3699 = temp_3447[2];
				const eelse_3701 = temp_3447[3];
				const ternary = temp_3447[4];
				{
					if (econd_3697.length > 1) { this.fail('More than one condition is not yet supported', econd_3697[1]) };
					{
						const temp_3704 = (econd_3697[0]);
						switch (temp_3704&&temp_3704[0]) {
						case 24: {
							this.fail('Variable bindings in ternary conditions are not yet supported', econd_3697[0])
						} break;
						};
					};
					if (eelse_3701 == null) { this.fail('Expression `if` should have an `else` clause', eif_3699) };
					this.fillExpression(econd_3697[0]);
					if (ternary == false) {
						{
							const temp_3706 = (eif_3699);
							switch (temp_3706&&temp_3706[0]) {
							case 12: {
								{
								}
							} break;

							default:
							this.fail('Ternary `if` should have a `{ block }` as a body', eif_3699)
							};
						};
						{
							const temp_3708 = (eelse_3701);
							switch (temp_3708&&temp_3708[0]) {
							case 12: {
								{
								}
							} break;

							default:
							this.fail('Ternary `else` should have a `{ block }` as a body', eelse_3701)
							};
						};
					};
					this.fillExpression(eif_3699);
					this.fillExpression(eelse_3701);
					this.types.set(node_3445, this.unify(this.types.get(eif_3699), this.types.get(eelse_3701), eelse_3701));
				}
			} break;

			case 8: {
				this.types.set(node_3445, /*UnknownNullable*/[1,{value:null},"F:/hexa-dev/hexa/source/compiler/typer.hexa:2170"])
			} break;

			case 0: {
				this.types.set(node_3445, this.typeString)
			} break;

			case 2: {
				this.types.set(node_3445, this.typeBool)
			} break;

			case 5: {
				this.types.set(node_3445, this.typeInt)
			} break;

			case 6: {
				const meta = temp_3447[2];
				{
					const temp_3711 = (meta);
					switch (temp_3711) {
					case 1: {
						this.types.set(node_3445, this.typeBigInt)
					} break;

					case 2: {
						this.types.set(node_3445, this.typeInt32)
					} break;

					case 3: {
						this.types.set(node_3445, this.typeInt64)
					} break;

					case 4: {
						this.types.set(node_3445, this.typeInt16)
					} break;

					case 5: {
						this.types.set(node_3445, this.typeInt8)
					} break;

					case 6: {
						this.types.set(node_3445, this.typeUInt32)
					} break;

					case 7: {
						this.types.set(node_3445, this.typeUInt64)
					} break;

					case 8: {
						this.types.set(node_3445, this.typeUInt16)
					} break;

					case 9: {
						this.types.set(node_3445, this.typeUInt8)
					} break;

					case 10: {
						this.types.set(node_3445, this.typeFloat32)
					} break;

					default:
					this.fail('Unhandled meta type of number', node_3445)
					};
				}
			} break;

			case 7: {
				this.types.set(node_3445, this.typeFloat)
			} break;

			case 15: {
				const e_3713 = temp_3447[1];
				{
					this.fillExpression(e_3713);
					this.types.set(node_3445, this.types.get(e_3713));
				}
			} break;

			case 50: {
				const a_3715 = temp_3447[1];
				const b_3717 = temp_3447[2];
				{
					this.fillExpression(a_3715);
					this.fillExpression(b_3717);
					this.unify(this.types.get(a_3715), this.types.get(b_3717), b_3717);
					this.types.set(node_3445, this.types.get(b_3717));
				}
			} break;

			case 13: {
				const e_3719 = temp_3447[1];
				const el_3721 = temp_3447[2];
				const elNames = temp_3447[3];
				{
					{
						const temp_3724 = (e_3719);
						switch (temp_3724&&temp_3724[0]) {
						case 4: {
							if ((!this.allowSuper)) { this.fail('Cannot access `super` here', node_3445) }
						} break;

						default:
						this.fillExpression(e_3719)
						};
					};
					for (const e of $toIterator(el_3721)) {
						this.fillExpression(e);
					};
					{
						const temp_3726 = ((this.types.get(e_3719)));
						switch (temp_3726&&temp_3726[0]) {
						case 10: {
							const args_3728 = temp_3726[1];
							const returns = temp_3726[2];
							{
								{
									let i_3731 = 0;
									let it_3733 = 0;
									let at_3735 = el_3721.length;
									while (it_3733 < at_3735) {
										i_3731 = it_3733;
										it_3733++;
										{
											let step_3737 = 0;
											const arg = args_3728[i_3731];
											if (step_3737 == 0 && arg != null) { step_3737 = 1 };
											if (step_3737 == 1) { this.unify(arg, this.types.get(el_3721[i_3731]), el_3721[i_3731]) };
										};
									};
								};
								this.types.set(node_3445, returns);
							}
						} break;

						case 8: {
							const type_3740 = temp_3726[1];
							const tag = temp_3726[2];
							{
								const name_3743 = type_3740.fieldNames[tag];
								if (el_3721.length < type_3740.tagBindVars[tag].length) { this.fail(('Not enough enum parameters, required `' + (name_3743) + '` parameters are: ') + type_3740.tagBindVarsNames[tag].join(', '), node_3445) };
								if (el_3721.length > type_3740.tagBindVars[tag].length) { this.fail(('Too many enum parameters, required `' + (name_3743) + '` parameters are: ') + type_3740.tagBindVarsNames[tag].join(', '), node_3445) };
								if (el_3721.length == 0) { this.fail('Use syntax without empty `()`', node_3445) };
								this.types.set(node_3445, /*EnumInstance*/[7,type_3740,tag,"F:/hexa-dev/hexa/source/compiler/typer.hexa:2261"]);
							}
						} break;

						case null: case undefined: {
							{
							}
						} break;

						default:
						if (this.types.get(e_3719) == this.typeAny) { this.types.set(node_3445, this.typeAny) } else {
							this.fail('Calling *not* a function, type is `' + Type.stringify(this.types.get(e_3719)) + '`', e_3719);
						}
						};
					};
				}
			} break;

			case 10: {
				const a_3745 = temp_3447[1];
				const op_3747 = temp_3447[2];
				const b_3749 = temp_3447[3];
				{
					this.fill(a_3745);
					this.fillExpression(b_3749);
					if ((op_3747 == 111) && (this.types.get(a_3745) == this.typeString)) { this.types.set(node_3445, this.types.get(a_3745)) } else if (op_3747 == 97 || op_3747 == 96 || op_3747 == 100 || op_3747 == 99 || op_3747 == 92 || op_3747 == 93 || op_3747 == 95 || op_3747 == 103) { this.types.set(node_3445, this.typeBool) } else {
						this.types.set(node_3445, (() => {
							const result_3751 = this.types.get(b_3749);
							if (result_3751 != null) { return result_3751 };
							return this.types.get(a_3745);
						})());
					};
				}
			} break;

			case 20: {
				const op_3753 = temp_3447[1];
				const postfix = temp_3447[2];
				const e_3756 = temp_3447[3];
				{
					this.fillExpression(e_3756);
					if ((op_3753 == 89) && ((!postfix))) {
						const type_3758 = this.types.get(e_3756);
						if ((type_3758 != this.typeBool) && (type_3758 != this.typeAny) && (type_3758 != null)) { this.fail(('Operator `!value` takes `value` of type `Bool` only, but got `' + (Type.stringify(this.types.get(e_3756))) + '`'), e_3756) };
						this.types.set(node_3445, this.typeBool);
						return;
					};
					this.types.set(node_3445, this.types.get(e_3756));
					const mutates = op_3753 == 87 || op_3753 == 86;
					if ((!mutates)) { return };
					let parent_3761 = this.parents.get(e_3756);
					{
						const temp_3763 = (parent_3761);
						switch (temp_3763&&temp_3763[0]) {
						case 24: {
							const name_3765 = temp_3763[1];
							const const_3767 = temp_3763[4];
							if (const_3767) { this.fail(('Cannot change a constant `let ' + (name_3765) + '`, redefine it as `var ' + (name_3765) + '` to allow value changes\n') + this.positionOf(parent_3761) + ('`let ' + (name_3765) + '` is defined here'), node_3445) }
						} break;

						case 22: {
							const name_3769 = temp_3763[1];
							this.fail(('Cannot `' + (Token.stringify(op_3753)) + '` a function `' + (name_3769) + '`'), node_3445)
						} break;

						case 49: {
							const name_3771 = temp_3763[1];
							this.fail(('Cannot change iterator value `' + (name_3771) + '` of for loop\n') + this.positionOf(parent_3761) + ('`for (' + (name_3771) + ' in ...)` is defined here'), node_3445)
						} break;

						case 47: {
							const f_3773 = temp_3763[1];
							{
								const temp_3775 = (f_3773);
								switch (temp_3775&&temp_3775[0]) {
								case 22: {
									const name_3777 = temp_3775[1];
									this.fail(('Cannot `' + (Token.stringify(op_3753)) + '` a static function `' + (name_3777) + '`'), node_3445)
								} break;

								case 24: {
									const name_3779 = temp_3775[1];
									const const_3781 = temp_3775[4];
									if (const_3781) { this.fail(('Cannot change a constant `static let ' + (name_3779) + '`, redefine it as `static var ' + (name_3779) + '` to allow value changes\n') + this.positionOf(parent_3761) + ('`static let ' + (name_3779) + '` is defined here'), node_3445) }
								} break;
								};
							}
						} break;

						default:
						{
							const temp_3783 = (e_3756);
							switch (temp_3783&&temp_3783[0]) {
							case 34: {
								{
								}
							} break;

							default:
							{
								const ops = /*?*/(87)? ('increment `++`') : 'decrement `--`';
								this.fail(('You can ' + (ops) + ' only a variable, .field or array element'), node_3445);
							}
							};
						}
						};
					};
					let hha = 1;
					{
					};
				}
			} break;

			case 34: {
				const e_3787 = temp_3447[1];
				const i_3789 = temp_3447[2];
				{
					this.fillExpression(e_3787);
					this.fillExpression(i_3789);
					let indexableIsAny = false;
					{
						const temp_3792 = ((this.types.get(e_3787)));
						switch (temp_3792&&temp_3792[0]) {
						case 4: {
							const type_3794 = temp_3792[1];
							const generic_3796 = temp_3792[2];
							if (type_3794.name == 'Any') { indexableIsAny = true }
						} break;
						};
					};
					if ((!indexableIsAny)) {
						const temp_3798 = ((this.types.get(i_3789)));
						switch (temp_3798&&temp_3798[0]) {
						case 4: {
							const type_3800 = temp_3798[1];
							if ((type_3800.name != 'Int') && (type_3800.name != 'Any')) { this.fail('`value[i]` expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_3789)) + '`', e_3787) }
						} break;

						case null: case undefined: {
							{
							}
						} break;

						default:
						this.fail('`value[i]`????? expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_3789)) + '`', e_3787)
						};
					};
					{
						const temp_3802 = ((this.types.get(e_3787)));
						switch (temp_3802&&temp_3802[0]) {
						case 4: {
							const type_3804 = temp_3802[1];
							const generic_3806 = temp_3802[2];
							if ((generic_3806 != null) && (generic_3806.length == 1)) { this.types.set(node_3445, generic_3806[0]) } else if (['Array', 'Buffer', 'Uint8Array', 'Uint32Array'].includes(type_3804.name)) { this.types.set(node_3445, this.toType(/*Type*/[1,'Int',"F:/hexa-dev/hexa/source/compiler/typer.hexa:2409"], node_3445)) } else if (['Any'].includes(type_3804.name)) { this.types.set(node_3445, this.toType(/*Type*/[1,'Any',"F:/hexa-dev/hexa/source/compiler/typer.hexa:2411"], node_3445)) } else {
								this.fail('value[i] generic is null or >1', e_3787);
							}
						} break;

						case null: case undefined: {
							{
							}
						} break;

						default:
						{
						}
						};
					};
				}
			} break;

			case 11: {
				const a_3808 = temp_3447[1];
				const op_3810 = temp_3447[2];
				const b_3812 = temp_3447[3];
				{
					if (op_3810 == 95) { this.fail('`===` not supported, use `strictEqual`', node_3445) };
					if (op_3810 == 95) { this.fail('`!==` not supported, use `strictNotEqual`', node_3445) };
					this.fillExpression(a_3808);
					let parent_3814 = this.parents.get(a_3808);
					{
						const temp_3816 = (parent_3814);
						switch (temp_3816&&temp_3816[0]) {
						case 24: {
							const name_3818 = temp_3816[1];
							const const_3820 = temp_3816[4];
							if (const_3820) { this.fail(('Cannot change a constant `let ' + (name_3818) + '`, redefine it as `var ' + (name_3818) + '` to allow value changes\n') + this.positionOf(parent_3814) + ('`let ' + (name_3818) + '` is defined here'), node_3445) }
						} break;

						case 22: {
							const name_3822 = temp_3816[1];
							this.fail(('Cannot reassign a function `' + (name_3822) + '`'), node_3445)
						} break;

						case 49: {
							const name_3824 = temp_3816[1];
							this.fail(('Cannot change iterator value `' + (name_3824) + '` of for loop\n') + this.positionOf(parent_3814) + ('`for (' + (name_3824) + ' in ...)` is defined here'), node_3445)
						} break;

						default:
						{
						}
						};
					};
					this.fillExpression(b_3812);
					this.types.set(node_3445, this.unify(this.types.get(a_3808), this.types.get(b_3812), b_3812));
				}
			} break;

			case 17: {
				const e_3826 = temp_3447[1];
				{
					if ((!this.insideFunction) && (!this.insideTry)) { this.fail('Cannot throw outside of `function` or `try`', node_3445) };
					if (this.insideFunction && (!this.functionAllowedToThrow)) { this.fail('Cannot throw in a @noThrow function', node_3445) };
					if (this.insideFunction) { this.functionThrows = true };
					this.fillExpression(e_3826);
				}
			} break;

			case 3: {
				{
					if ((!this.insideClassMethod)) { this.fail('Cannot access `this` outside of class method', node_3445) };
					if (this.thisType == null) { this.fail('Cannot access `this` in class method', node_3445) };
					this.types.set(node_3445, this.thisType);
					this.parents.set(node_3445, this.thisNode);
				}
			} break;

			case 4: {
				this.fail('Cannot use `super` as value', node_3445)
			} break;

			case 16: {
				const e_3828 = temp_3447[1];
				{
					{
						const temp_3830 = (e_3828);
						switch (temp_3830&&temp_3830[0]) {
						case 24: {
							const name_3832 = temp_3830[1];
							const const_3834 = temp_3830[4];
							{
								const prefix = /*?*/(const_3834)? ('let') : 'var';
								this.fail(('This `return` tries to return a variable `' + (prefix) + ' ' + (name_3832) + '`. Try to wrap it into braces like this `{ return } ' + (prefix) + ' ' + (name_3832) + '`'), node_3445);
							}
						} break;

						case 16: {
							this.fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node_3445)
						} break;
						};
					};
					if ((!this.insideFunction)) { this.fail('Cannot use `return` outside of function', node_3445) };
					if (e_3828 != null) {
						if (this.functionReturnsAType == this.typeVoid) { this.fail('Function returns `Void`, cannot return a value here', e_3828) };
						this.fillExpression(e_3828);
						const ret_3837 = this.types.get(e_3828);
						if (ret_3837 == this.typeVoid) { this.fail('Cannot `return` a `Void` non-value', node_3445) };
						this.functionReturnsAType = this.unify(this.functionReturnsAType, ret_3837, e_3828);
						this.functionActuallyReturns = true;
					} else {
						let step_3839 = 0;
						const ret_3841 = this.functionReturnsAType;
						if (step_3839 == 0 && ret_3841 != null) { step_3839 = 1 };
						if (step_3839 == 1) { if (ret_3841 != this.typeVoid) { this.fail(('Expected `return value` of type `' + (Type.stringify(ret_3841)) + '`'), node_3445) } } else {
							this.functionReturnsAType = this.typeVoid;
						};
					};
				}
			} break;

			case 45: {
				this.fail('Cannot use underscore `_` outside of case pattern', node_3445)
			} break;

			case 47: {
				this.fail('Cannot use `static` here: only applicable to class fields', node_3445)
			} break;

			case 48: {
				this.fail('Cannot use `private` here: only applicable to class fields and module declarations', node_3445)
			} break;

			case 36: {
				{
				}
			} break;

			case 18: {
				this.fail('Cannot use `break` as a value', node_3445)
			} break;

			case 19: {
				this.fail('Cannot use `continue` as a value', node_3445)
			} break;

			case 26: {
				this.fail('Cannot use `class` as a value', node_3445)
			} break;

			case 39: {
				this.fail('Cannot use `enum` as a value', node_3445)
			} break;

			case 9: {
				this.fail('Cannot use `declare` as a value', node_3445)
			} break;

			case 37: {
				this.fail('Cannot use `import` as a value', node_3445)
			} break;

			case 24: {
				const name_3843 = temp_3447[1];
				const const_3845 = temp_3447[4];
				{
					const prefix_3847 = /*?*/(const_3845)? ('let') : 'var';
					this.fail(('Cannot use `' + (prefix_3847) + ' ' + (name_3843) + '` as a value'), node_3445);
				}
			} break;

			case 35: {
				this.fillSwitch(node_3445, true)
			} break;

			case 21: {
				this.fail('Cannot use `while` as a value', node_3445)
			} break;

			case 49: {
				this.fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node_3445)
			} break;

			case null: case undefined: {
				this.fail('Got null node. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3445)
			} break;

			default:
			this.fail('Unknown node expression kind to type ' + node_3445 + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_3445)
			};
		};
		fillSwitch(node_3849, value_3851) {
			const temp_3853 = (node_3849);
			switch (temp_3853&&temp_3853[0]) {
			case 35: {
				const exprs_3855 = temp_3853[1];
				const conds_3857 = temp_3853[2];
				const guards_3859 = temp_3853[3];
				const cases_3861 = temp_3853[4];
				{
					for (const e of $toIterator(exprs_3855)) {
						this.pushScope();
						this.fillExpression(e);
						this.popScope();
					};
					{
						let step_3863 = 0;
						const expr_3865 = exprs_3855[1];
						if (step_3863 == 0 && expr_3865 != null) { step_3863 = 1 };
						if (step_3863 == 1) { this.fail('Multiple switch values are not yet supported', expr_3865) };
					};
					const unwrapUnknownAndNullable = (type_3868) => {
						{
							const temp_3870 = (type_3868);
							switch (temp_3870&&temp_3870[0]) {
							case null: case undefined: {
								return null
							} break;

							case 2: {
								const type_3872 = temp_3870[1];
								return unwrapUnknownAndNullable(type_3872)
							} break;

							case 0: {
								const type_3874 = temp_3870[1];
								return unwrapUnknownAndNullable(type_3874.value)
							} break;

							case 1: {
								const type_3876 = temp_3870[1];
								return unwrapUnknownAndNullable(type_3876.value)
							} break;
							};
						};
						return type_3868;
					};
					const etype_3878 = unwrapUnknownAndNullable(this.types.get(exprs_3855[0]));
					if (etype_3878 == null) { this.fail(('Value of switch `' + (Node.stringify(exprs_3855[0])) + '` must have a known type at this postition'), exprs_3855[0]) };
					let enumType = null;
					let shortHandSyntax = false;
					if (etype_3878 == this.typeBool) {} else if (etype_3878 == this.typeInt) {} else if (etype_3878 == this.typeString) {} else if (etype_3878 == this.typeFloat) { this.fail('Due to imprecise nature of `Float` type, switching over it is not allowed', exprs_3855[0]) } else {
						const temp_3882 = (etype_3878);
						switch (temp_3882&&temp_3882[0]) {
						case 6: {
							const type_3884 = temp_3882[1];
							enumType = type_3884
						} break;

						case 7: {
							const type_3886 = temp_3882[1];
							enumType = type_3886
						} break;

						default:
						this.fail(('Cannot switch over `' + (Type.stringify(etype_3878)) + '` type'), exprs_3855[0])
						};
					};
					let tags = [];
					let i_3889 = 0;
					while ((i_3889 < cases_3861.length)) {
						this.pushScope();
						let e_3891 = conds_3857[i_3889];
						let currentType = null;
						let currentTag = null;
						let currentTagBind = 0;
						let interval = false;
						const follow = (e_3898) => {
							const temp_3900 = (e_3898);
							switch (temp_3900&&temp_3900[0]) {
							case 30: {
								const ex = temp_3900[1];
								const name_3903 = temp_3900[2];
								{
									this.fillExpression(e_3898);
									{
										const temp_3905 = ((this.types.get(ex)));
										switch (temp_3905&&temp_3905[0]) {
										case 6: {
											const type_3907 = temp_3905[1];
											{
												currentType = type_3907;
												currentTag = name_3903;
												if (tags.includes(currentTag)) { this.fail(('Tag `' + (currentTag) + '` already matched'), e_3898) } else {
													tags.push(currentTag);
												};
											}
										} break;
										};
									};
								}
							} break;

							case 15: {
								const e_3909 = temp_3900[1];
								this.fill(e_3909)
							} break;

							case 45: {
								{
								}
							} break;

							case 8: {
								{
								}
							} break;

							case 2: {
								if (etype_3878 != this.typeBool) { this.fail('Cannot switch over boolean here', e_3898) }
							} break;

							case 5: {
								if (etype_3878 != this.typeInt) { this.fail('Cannot switch over number here', e_3898) }
							} break;

							case 0: {
								if (etype_3878 != this.typeString) { this.fail('Cannot switch over string here', e_3898) }
							} break;

							case 13: {
								const ex_3911 = temp_3900[1];
								const args_3913 = temp_3900[2];
								const argNames_3915 = temp_3900[3];
								{
									follow(ex_3911);
									currentTagBind = 0;
									if (args_3913.length == 0) { this.fail(('Do not use `()` empty pattern, use `' + (currentTag) + '(...)` syntax to ignore all bindings'), e_3898) };
									{
										let step_3917 = 0;
										const enumType_3919 = enumType;
										let temp_3921 = null;
										if (step_3917 == 0 && enumType_3919 != null) {
											temp_3921 = enumType_3919.fieldsTypeSimple != null;
											step_3917 = 1;
										};
										if (step_3917 == 1 && temp_3921 != false) { step_3917 = 2 };
										if (step_3917 == 2) { this.fail(('The `' + (enumType_3919.name) + '` is simple enum and has no `()` bindings'), e_3898) };
									};
									{
										let step_3923 = 0;
										const enumType_3925 = enumType;
										let temp_3927 = null;
										if (step_3923 == 0 && enumType_3925 != null) {
											temp_3927 = shortHandSyntax == true;
											step_3923 = 1;
										};
										let i_3929 = null;
										if (step_3923 == 1 && temp_3927 != false) {
											i_3929 = enumType_3925.fieldNames.indexOf(currentTag);
											step_3923 = 2;
										};
										let binds = null;
										if (step_3923 == 2 && i_3929 != null) {
											binds = enumType_3925.tagBindVarsNames[i_3929];
											step_3923 = 3;
										};
										let temp_3932 = null;
										if (step_3923 == 3 && binds != null) {
											temp_3932 = binds.length == 0;
											step_3923 = 4;
										};
										if (step_3923 == 4 && temp_3932 != false) { step_3923 = 5 };
										if (step_3923 == 5) {
											const temp_3934 = (args_3913[0]);
											switch (temp_3934&&temp_3934[0]) {
											case 46: {
												{
												}
											} break;

											default:
											this.fail(('The `' + (currentTag) + '` has no `()` bindings, use `' + (currentTag) + '(...)` syntax to ignore all future bindings added'), e_3898)
											};
										};
									};
									for (const ee of $toIterator(args_3913)) {
										if (interval) { this.fail('Do not match any patterns after `...` interval', ee) };
										{
											const temp_3936 = (ee);
											switch (temp_3936&&temp_3936[0]) {
											case 46: {
												interval = true
											} break;

											case 1: {
												const name_3938 = temp_3936[1];
												{
													follow(ee);
													currentTagBind++;
												}
											} break;

											case 45: {
												{
													{
														let step_3940 = 0;
														const enumType_3942 = enumType;
														let temp_3944 = null;
														if (step_3940 == 0 && enumType_3942 != null) {
															temp_3944 = shortHandSyntax == true;
															step_3940 = 1;
														};
														let i_3946 = null;
														if (step_3940 == 1 && temp_3944 != false) {
															i_3946 = enumType_3942.fieldNames.indexOf(currentTag);
															step_3940 = 2;
														};
														let binds_3948 = null;
														if (step_3940 == 2 && i_3946 != null) {
															binds_3948 = enumType_3942.tagBindVarsNames[i_3946];
															step_3940 = 3;
														};
														let temp_3950 = null;
														if (step_3940 == 3 && binds_3948 != null) {
															temp_3950 = binds_3948.length <= currentTagBind;
															step_3940 = 4;
														};
														if (step_3940 == 4 && temp_3950 != false) { step_3940 = 5 };
														if (step_3940 == 5) { this.fail('Too many bindings ignored with `_` for `F` tag, use `...` syntax to ignore all future bindings', e_3898) };
													};
													currentTagBind++;
												}
											} break;

											default:
											this.fail('This case pattern is not supported', e_3898)
											};
										};
									};
								}
							} break;

							case 51: {
								const t_3952 = temp_3900[1];
								{
									shortHandSyntax = true;
									{
										const temp_3954 = (t_3952);
										switch (temp_3954&&temp_3954[0]) {
										case 1: {
											const name_3956 = temp_3954[1];
											{
												let step_3958 = 0;
												const enumType_3960 = enumType;
												if (step_3958 == 0 && enumType_3960 != null) { step_3958 = 1 };
												if (step_3958 == 1) {
													let step_3962 = 0;
													const i_3964 = enumType_3960.fieldNames.indexOf(name_3956);
													let temp_3966 = null;
													if (step_3962 == 0 && i_3964 != null) {
														temp_3966 = enumType_3960.fieldEnumConstructor[i_3964] == true;
														step_3962 = 1;
													};
													if (step_3962 == 1 && temp_3966 != false) { step_3962 = 2 };
													if (step_3962 == 2) {
														currentType = enumType_3960;
														currentTag = name_3956;
														if (tags.includes(currentTag)) { this.fail(('Tag `' + (currentTag) + '` already matched'), e_3898) } else {
															tags.push(currentTag);
														};
													} else {
														this.fail(('The `' + (name_3956) + '` is not an enum constructor of `' + (enumType_3960.name) + '`'), e_3898);
													};
												} else {
													this.fail('This case pattern is not supported over non-enum types', e_3898);
												};
											}
										} break;

										default:
										this.fail('This case pattern is not supported', e_3898)
										};
									};
								}
							} break;

							case 1: {
								const name_3968 = temp_3900[1];
								if (name_3968.charAt(0) == name_3968.charAt(0).toUpperCase()) { this.fill(e_3898) } else {
									this.addScope(name_3968, e_3898);
									{
										let step_3970 = 0;
										const currentType_3972 = currentType;
										if (step_3970 == 0 && currentType_3972 != null) { step_3970 = 1 };
										if (step_3970 == 1) {
											const indexOf = currentType_3972.fieldNames.indexOf(currentTag);
											if (indexOf == (-1)) { this.fail('currentType.fieldNames.indexOf == -1', e_3898) };
											const type_3975 = currentType_3972.tagBindVars[indexOf][currentTagBind];
											const name_3977 = currentType_3972.tagBindVarsNames[indexOf][currentTagBind];
											if (name_3977 == null) {
												const available_3979 = currentType_3972.tagBindVarsNames[indexOf].join(', ');
												if (available_3979.length == 0) { this.fail('No bindings available for `.' + currentTag + '`', e_3898) };
												this.fail(('Too many bindings requested for `' + (currentTag) + '`, available are: ') + available_3979, e_3898);
											};
											if (type_3975 != null) { this.types.set(e_3898, this.toType(type_3975, e_3898)) } else {
												this.fail('tagBindVars no type for ' + name_3977, e_3898);
											};
										} else {
											this.fail('No currentType for ' + name_3968, e_3898);
										};
									};
								}
							} break;

							case 10: {
								const a_3981 = temp_3900[1];
								const op_3983 = temp_3900[2];
								const b_3985 = temp_3900[3];
								if (op_3983 == 104) {
									follow(a_3981);
									follow(b_3985);
								} else {
									this.fail('This case pattern is not supported', e_3898);
								}
							} break;

							case 14: {
								const econd_3987 = temp_3900[1];
								{
									this.pushScope();
									this.fill(econd_3987[0]);
									this.popScope();
								}
							} break;

							default:
							this.fail('This case pattern is not supported', e_3898)
							};
						};
						follow(e_3891);
						let e_3989 = cases_3861[i_3889];
						this.pushScope();
						{
							let step_3991 = 0;
							const guard = guards_3859[i_3889];
							if (step_3991 == 0 && guard != null) { step_3991 = 1 };
							if (step_3991 == 1) {
								this.fillExpression(guard);
								if (this.types.get(guard) != this.typeBool) { this.fail('Case guard must be a simple boolean expression', guard) };
							};
						};
						if (value_3851 == false) { this.fill(e_3989) };
						if (value_3851 == true) {
							this.fillExpression(e_3989);
							if (this.types.get(node_3849) == null) { this.types.set(node_3849, this.types.get(e_3989)) } else {
								this.types.set(node_3849, this.unify(this.types.get(node_3849), this.types.get(e_3989), e_3989));
							};
						};
						this.popScope();
						this.popScope();
						i_3889++;
					};
				}
			} break;
			};
		};
	}
	Typer.never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'
	Typer.failures = []
	Typer.nodeToNodeType = (node_2991) => {
			const temp_2993 = (node_2991);
			switch (temp_2993&&temp_2993[0]) {
			case 32: {
				const el_2995 = temp_2993[1];
				{
					if (el_2995.length > 1) { this.fail('Array type `[T]` cannot have more than 1 parameter `T`', el_2995[1]) };
					return /*ParametricType*/[2,'Array',[Typer.nodeToNodeType(el_2995[0])],"F:/hexa-dev/hexa/source/compiler/typer.hexa:960"];
				}
			} break;

			case 51: {
				const t_2997 = temp_2993[1];
				return t_2997
			} break;

			case 38: {
				const names_2999 = temp_2993[1];
				const el_3001 = temp_2993[2];
				{
					const types = (() => {
						const result_3004 = [];
						const value_3006 = el_3001;
						for (const e of $toIterator(value_3006)) result_3004.push(Typer.nodeToNodeType(e));
						return result_3004;
					})();
					return /*Object*/[5,names_2999,types,"F:/hexa-dev/hexa/source/compiler/typer.hexa:965"];
				}
			} break;

			default:
			this.fail('Cannot nodeToNodeType of ' + Node.stringify(node_2991), node_2991)
			};
		};
	var Tokens = class {
		constructor(tokens, length, values, lines, columns, fileName, meta) {
		{
			this.token = tokens;
			this.length = length;
			this.value = values;
			this.line = lines;
			this.column = columns;
			this.fileName = fileName;
			this.meta = meta;
		} };
	}
	var Lexer = class {
	}
	Lexer.isident = Buffer.alloc(256)
	Lexer.isUpper = Buffer.alloc(256)
	Lexer.ops8a = Buffer.alloc(256)
	Lexer.op16token = Buffer.alloc(768)
	Lexer.kwd
	Lexer.tokenize = (bytes, fileName_4004) => {
			let position = 0;
			const len = bytes.length;
			let to = 0;
			let s = '';
			let p = 0;
			let line = 1;
			let columnBase = 0;
			const params = [];
			const meta_4014 = [];
			const tokens_4016 = Buffer.alloc(len + 1);
			let lines_4018 = [];
			let columns_4020 = [];
			const add = (t) => {
				tokens_4016[(to++)] = t;
				lines_4018.push(line);
				columns_4020.push(position - columnBase - 1);
			};
			const addn = (t_4025, p_4027) => {
				params[to] = p_4027;
				add(t_4025);
			};
			const addm = (t_4030, p_4032, m) => {
				params[to] = p_4032;
				meta_4014[to] = m;
				add(t_4030);
			};
			const curPos = () => { return position - columnBase - 1 };
			const get_8 = (pos) => { return bytes[pos] };
			const not_eof = () => { return (position < len) };
			const new_line = () => {
				line++;
				columnBase = position;
			};
			const fail = (message, erline = null, column = null, filename = null) => {
				let erline_4045 = /*?*/(erline != null)? (erline) : line;
				let column_4047 = /*?*/(column != null)? (column) : curPos();
				let filename_4049 = /*?*/(filename != null)? (filename) : fileName_4004;
				return new CompilerErrors([new CompilerError(2, message, erline_4045, column_4047, filename_4049)]);
			};
			if ((len > 2) && (get_8(0) == 239) && (get_8(1) == 187) && (get_8(2) == 191)) { position += 3 };
			if ((len > 2) && (get_8(0) == 35) && (get_8(1) == 33)) { while ((position < len && get_8(position) != 10)) {
				position++;
			} };
			while ((position < len)) {
				let _8 = 0;
				do {{
					_8 = get_8(position);
					if (_8 == 10) { new_line() };
				}} while ((_8 <= 32 && ((++position) < len)));
				let uuu = 0;
				let bbb = 0;
				let kkk = 0;
				const test = uuu + bbb * kkk + uuu;
				const test_4056 = uuu + (bbb * kkk) + uuu;
				const test_4058 = (uuu + (bbb * kkk)) + uuu;
				const test_4060 = uuu && bbb || kkk;
				const test_4062 = (-uuu) && bbb || kkk;
				const test_4064 = (-uuu) && uuu;
				const test_4066 = uuu && uuu || (uuu++) && uuu;
				const test_4068 = uuu && (uuu++);
				const test_4070 = (-uuu) && uuu || (uuu++);
				const test_4072 = (-uuu) && (uuu++);
				uuu = (++uuu);
				uuu = (--uuu);
				uuu = (++uuu) + uuu;
				uuu = (++uuu) + (-uuu);
				const fff = () => { return 1 };
				uuu = (-fff()) + 5;
				const fff_4075 = () => { return true };
				let bbb_4077 = true;
				bbb_4077 = fff_4075(1) && fff_4075(2) && fff_4075(3) && fff_4075(4);
				bbb_4077 = fff_4075(1) && fff_4075(2) || fff_4075(3) && fff_4075(4);
				if ((!not_eof())) { break };
				let _16 = /*?*/((len - position) > 1)? (_8 | (get_8(position + 1) << 8)) : _8;
				if (_8 == 47) {
					if (_16 == 12079) {
						let pos_4080 = position + 2;
						while ((get_8(position) != 10 && not_eof())) {
							position++;
						};
						continue;
					};
					if (_16 == 10799 && get_8(position + 2) == 42) {
						position += 3;
						p = position;
						while ((not_eof())) {
							let _32 = /*?*/((len - position) > 3)? (bytes.readUInt32LE(position)) : get_8(position);
							if ((_32 & 255) == 10) { new_line() } else if ((_32 & 16777215) == 3090986) { break };
							position++;
						};
						if ((!not_eof())) { throw fail('Unclosed doc-comment') };
						addn(65, bytes.toString('utf8', p, position));
						position += 3;
						continue;
					};
					if (_16 == 10799) {
						let pos_4083 = position + 2;
						p = 0;
						position += 2;
						while ((not_eof())) {
							_16 = /*?*/((len - position) > 1)? (bytes.readUInt16LE(position)) : get_8(position);
							if ((_16 & 255) == 10) { new_line() } else if (_16 == 12074 && p > 0) { p-- } else if (_16 == 10799) { p++ } else if (_16 == 12074 && p == 0) { break };
							position++;
						};
						position += 2;
						continue;
					};
				};
				if (((_8 & 95) >= 65 && (_8 & 95) <= 90) || (_8 == 95)) {
					const titlechar = _8;
					p = position + 1;
					_8 = get_8(p);
					while ((p < len && Lexer.isident[_8] != 0)) {
						_8 = get_8((++p));
					};
					s = bytes.toString('ascii', position, p);
					const t_4086 = /*?*/(((_16 & 255) <= 90))? (null) : Lexer.kwd.get(s);
					{
						let step = 0;
						const t_4089 = t_4086;
						if (step == 0 && t_4089 != null) { step = 1 };
						if (step == 1) { add(t_4089) } else {
							if (titlechar >= 65 && titlechar <= 90) { addn(61, s) } else {
								addn(62, s);
							};
						};
					};
					position = p;
					continue;
				};
				if (_8 == 96) {
					position++;
					const pos_4091 = position;
					while ((not_eof())) {
						if ((get_8(position) == 96) && (get_8(position + 1) == 96)) {
							position++;
							position++;
							continue;
						};
						if (get_8(position) == 96) { break };
						if (get_8(position) == 10) { new_line() };
						position++;
					};
					let result = bytes.toString('utf8', pos_4091, position);
					if (result.indexOf('``') != (-1)) { result = result.split('``').join('') };
					addn(66, result);
					position++;
					continue;
				};
				if (_16 == 11822 && (get_8(position + 2) == 46)) {
					add(98);
					position += 3;
					continue;
				};
				if (_16 == 15934 && (get_8(position + 2) == 62)) {
					add(108);
					position += 3;
					continue;
				};
				const hash = Lexer.simplehash(_16);
				if (_16 == Lexer.op16token.readUInt16LE(hash * 2)) {
					add(Lexer.op16token[hash + 512]);
					position += 2;
					continue;
				};
				const found = Lexer.ops8a[_8];
				if (found != 0) {
					add(found);
					position++;
					continue;
				};
				if (_8 < 40) {
					p = _8;
					position++;
					const pos_4096 = position;
					while ((get_8(position) != p && not_eof())) {
						if (get_8(position) == 10) { new_line() };
						if (get_8(position) == '\\'.charCodeAt(0)) {
							position += 2;
							continue;
						};
						_16 = /*?*/((len - position) > 1)? (bytes.readUInt16LE(position)) : get_8(position);
						position++;
					};
					let result_4098 = bytes.toString('utf8', pos_4096, position);
					if (result_4098.indexOf('\r\n') != (-1)) { result_4098 = result_4098.split('\r\n').join('\n') };
					addn(64, result_4098);
					position++;
					continue;
				};
				if (_16 == 30768) {
					p = position;
					p += 2;
					_8 = get_8(position);
					while (((_8 >= 65 && _8 <= 70) || (_8 >= 48 && _8 <= 57) || (_8 >= 97 && _8 <= 102))) {
						_8 = get_8((++p));
					};
					if (p - position == 2) { throw fail('Integer `0x` not allowed!') };
					let m_4100 = 0;
					let offset = 0;
					if (get_8(p) == 110) {
						m_4100 = 1;
						offset = 1;
					} else if (get_8(p) == 105) {
						const header = bytes.readUInt16LE(p + 1);
						if (get_8(p + 1) == 56) {
							m_4100 = 5;
							offset = 2;
						} else if (header == 51 + 50 * 256) {
							m_4100 = 2;
							offset = 3;
						} else if (header == 54 + 52 * 256) {
							m_4100 = 3;
							offset = 3;
						} else if (header == 49 + 54 * 256) {
							m_4100 = 4;
							offset = 3;
						};
					} else if (get_8(p) == 117) {
						const header_4104 = bytes.readUInt16LE(p + 1);
						if (get_8(p + 1) == 56) {
							m_4100 = 9;
							offset = 2;
						} else if (header_4104 == 51 + 50 * 256) {
							m_4100 = 6;
							offset = 3;
						} else if (header_4104 == 54 + 52 * 256) {
							m_4100 = 7;
							offset = 3;
						} else if (header_4104 == 49 + 54 * 256) {
							m_4100 = 8;
							offset = 3;
						};
					};
					addm(63, bytes.toString('ascii', position, p), m_4100);
					position = p + offset;
					continue;
				};
				if (_8 < 58) {
					p = position;
					_8 = get_8(p);
					let found_4106 = 63;
					while ((_8 >= 48 && _8 <= 57)) {
						_8 = get_8((++p));
					};
					if (_8 == 46 && get_8(p + 1) != 46) {
						_8 = get_8((++p));
						while ((_8 >= 48 && _8 <= 57)) {
							_8 = get_8((++p));
						};
						found_4106 = 60;
					};
					if (_8 == 101 || _8 == 69) {
						_8 = get_8((++p));
						if (_8 == 43 || _8 == 45) { _8 = get_8((++p)) };
						while ((_8 >= 48 && _8 <= 57)) {
							_8 = get_8((++p));
						};
						found_4106 = 60;
					};
					let m_4108 = 0;
					let offset_4110 = 0;
					if (get_8(p) == 110) {
						m_4108 = 1;
						offset_4110 = 1;
					} else if (get_8(p) == 105) {
						const header_4112 = bytes.readUInt16LE(p + 1);
						if (get_8(p + 1) == 56) {
							m_4108 = 5;
							offset_4110 = 2;
						} else if (header_4112 == 51 + 50 * 256) {
							m_4108 = 2;
							offset_4110 = 3;
						} else if (header_4112 == 54 + 52 * 256) {
							m_4108 = 3;
							offset_4110 = 3;
						} else if (header_4112 == 49 + 54 * 256) {
							m_4108 = 4;
							offset_4110 = 3;
						};
					} else if (get_8(p) == 117) {
						const header_4114 = bytes.readUInt16LE(p + 1);
						if (get_8(p + 1) == 56) {
							m_4108 = 9;
							offset_4110 = 2;
						} else if (header_4114 == 51 + 50 * 256) {
							m_4108 = 6;
							offset_4110 = 3;
						} else if (header_4114 == 54 + 52 * 256) {
							m_4108 = 7;
							offset_4110 = 3;
						} else if (header_4114 == 49 + 54 * 256) {
							m_4108 = 8;
							offset_4110 = 3;
						};
					} else if (get_8(p) == 102) {
						const header_4116 = bytes.readUInt16LE(p + 1);
						if (header_4116 == 51 + 50 * 256) {
							m_4108 = 10;
							offset_4110 = 3;
						};
					};
					addm(found_4106, bytes.toString('ascii', position, p), m_4108);
					position = p + offset_4110;
					continue;
				};
				if (position >= len) { break };
				throw fail('Unexpected character ' + String.fromCharCode(_8));
				break;
			};
			add(0);
			return new Tokens(tokens_4016, to, params, lines_4018, columns_4020, fileName_4004, meta_4014);
		};
	Lexer.init = () => {
			{
				let _8_4118 = 0;
				let it = 0;
				while (it < 256) {
					_8_4118 = it;
					it++;
					{
						Lexer.isident[_8_4118] = /*?*/(((_8_4118 >= 65 && _8_4118 <= 90) || (_8_4118 >= 48 && _8_4118 <= 57) || (_8_4118 >= 97 && _8_4118 <= 122) || _8_4118 == 95))? (128) : 0;
					};
				};
			};
			let a = /*?*/(false + true)? ('aa') : 'bb';
			a = /*?*/(false + true)? ('aa') : 'bb';
			{
				let _8_4122 = 0;
				let it_4124 = 0;
				while (it_4124 < 256) {
					_8_4122 = it_4124;
					it_4124++;
					{
						Lexer.isident[_8_4122] = /*?*/(((_8_4122 >= 65 && _8_4122 <= 90) || (_8_4122 >= 48 && _8_4122 <= 57) || (_8_4122 >= 97 && _8_4122 <= 122) || _8_4122 == 95))? (128) : 0;
					};
				};
			};
			Lexer.kwd = new Map([['_', 1], ['as', 58], ['break', 3], ['case', 4], ['catch', 6], ['class', 7], ['continue', 8], ['do', 9], ['else', 10], ['enum', 11], ['extends', 12], ['declare', 13], ['false', 14], ['for', 15], ['function', 16], ['fun', 21], ['if', 17], ['implements', 18], ['import', 2], ['in', 20], ['interface', 22], ['let', 23], ['new', 25], ['null', 26], ['module', 28], ['private', 29], ['return', 31], ['static', 32], ['super', 59], ['switch', 33], ['this', 34], ['throw', 35], ['true', 36], ['try', 37], ['var', 40], ['while', 41], ['and', 92], ['or', 93], ['not', 89], ['is', 57]]);
			const ops8 = new Map([[64, 70], [36, 83], [35, 78], [33, 89], [37, 101], [38, 112], [40, 80], [41, 79], [42, 102], [43, 111], [44, 75], [45, 107], [46, 77], [47, 94], [58, 76], [59, 82], [60, 99], [61, 91], [62, 96], [63, 81], [91, 72], ['\\'.charCodeAt(0), 110], [93, 71], [94, 109], [123, 74], [124, 104], [125, 73], [126, 88]]);
			for (const key of $toIterator(ops8.keys())) {
				Lexer.ops8a[key] = ops8.get(key);
			};
			const ops16 = new Map([[11051, 87], [11565, 86], [15420, 105], [15649, 103], [15676, 100], [15677, 95], [15678, 97], [15934, 106], [31868, 93], [9766, 92], [15933, 90], [11839, 113]]);
			for (const key1 of $toIterator(ops16.keys())) {
				for (const key2 of $toIterator(ops16.keys())) {
					if (key1 != key2 && Lexer.simplehash(key1) == Lexer.simplehash(key2)) { throw new CompilerError(2, '2-byte op hash collision: ' + key1 + ' ' + key2, 0, 0, 'INTERNAL') };
				};
			};
			for (const key of $toIterator(ops16.keys())) {
				const hash_4128 = Lexer.simplehash(key);
				Lexer.op16token.writeUInt16LE(key, hash_4128 * 2);
				Lexer.op16token[hash_4128 + 512] = ops16.get(key);
			};
			return;
		};
	Lexer.simplehash = (val) => { return ((val & 255) + (((val >> (8 * 1)) & 255) << 3)) & 239 };
	var Parser = class {
		constructor(lexe_4137, project_4139, lint_4141) {
			this.lint = false
			this.i = 0
			this.endif = 0
			this.lasttok = (-1)
			this.lasttokchecks = 10
			this.hints = []
			this.classExternal = false
			this.parametricTypeNesting = 0
			this.parametricTypeNestingToken = 0
		{
			this.lex = lexe_4137;
			this.lint = lint_4141;
			this.project = project_4139;
			this.nodes = [];
			while ((this.i < this.lex.length && this.tok() != 0)) {
				this.nodes.push(this.parseExpr());
			};
		} };
		parseFields() {
			let fields = [];
			while ((this.tok() != 73)) {
				let atts = [];
				while ((this.tok() == 70)) {
					atts.push(this.parseAttribute());
				};
				const pos = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
				const pos_4146 = new NodeData(pos.line, pos.column, this.lex.fileName);
				let _static = false;
				if (this.tok() == 32) {
					_static = true;
					this.i++;
				};
				{
					const temp = (this.tok());
					switch (temp) {
					case 29: {
						this.i++
					} break;

					case 40: {
						{
							let f = this.parseExpr();
							this.project.data.set(f, pos_4146);
							if (_static) {
								f = /*Static*/[47,f,"F:/hexa-dev/hexa/source/compiler/parser.hexa:79"];
								this.project.data.set(f, pos_4146);
							};
							this.project.mapDecorators.set(f, atts);
							fields.push(f);
						}
					} break;

					case 16: case 21: {
						{
							let f_4151 = this.parseExpr();
							this.project.data.set(f_4151, pos_4146);
							if (_static) {
								f_4151 = /*Static*/[47,f_4151,"F:/hexa-dev/hexa/source/compiler/parser.hexa:88"];
								this.project.data.set(f_4151, pos_4146);
							};
							this.project.mapDecorators.set(f_4151, atts);
							fields.push(f_4151);
						}
					} break;

					case 23: {
						{
							let f_4153 = this.parseExpr();
							this.project.data.set(f_4153, pos_4146);
							if (_static) {
								f_4153 = /*Static*/[47,f_4153,"F:/hexa-dev/hexa/source/compiler/parser.hexa:97"];
								this.project.data.set(f_4153, pos_4146);
							};
							this.project.mapDecorators.set(f_4153, atts);
							fields.push(f_4153);
						}
					} break;

					case 25: {
						{
							this.i++;
							let expr = null;
							let vars = [];
							let types = [];
							let values = [];
							this.step(80);
							if (this.tok() != 79) { while (true) {
								vars.push(this.getgo(62));
								let expr_4159 = null;
								let t = null;
								if (this.tok() == 76) {
									this.i++;
									t = this.parseType();
								};
								if (this.tok() == 91) {
									this.i++;
									expr_4159 = this.parseExpr();
								};
								types.push(t);
								values.push(expr_4159);
								if (this.tok() == 75) { this.i++ } else {
									break;
								};
							} };
							this.step(79);
							let tmp = this.i;
							while ((this.tok() == 70)) {
								this.parseAttribute();
							};
							if (this.tok() != 73 && this.tok() != 16 && this.tok() != 21) {
								this.i = tmp;
								expr = this.parseExpr();
							} else {
								this.i = tmp;
							};
							let v = [];
							{
								let i = 0;
								let it = 0;
								let at = vars.length;
								while (it < at) {
									i = it;
									it++;
									{
										v.push(/*Var*/[24,vars[i],types[i],values[i],true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:150"]);
									};
								};
							};
							{
								const temp_4167 = (expr);
								switch (temp_4167&&temp_4167[0]) {
								case null: case undefined: {
									{
									}
								} break;

								case 12: {
									{
									}
								} break;

								default:
								{
									this.i--;
									this.fail('Constructor `new` should have a `{ block }` as a body');
								}
								};
							};
							const field = /*Function*/[22,'new',expr,v,null,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:159"];
							this.project.data.set(field, pos_4146);
							fields.push(field);
						}
					} break;

					case 62: {
						{
							const name = this.getgo(62);
							if ((name == 'get') && (this.tok() == 62)) {
								const field_4171 = this.getgo(62);
								this.fail(('Use property `var ' + (field_4171) + ' { get { return value } }` instead of `get ' + (field_4171) + '()`'));
							};
							if ((name == 'set') && (this.tok() == 62)) {
								const field_4173 = this.getgo(62);
								this.step(80);
								const value = this.getgo(62);
								this.fail(('Use property `var ' + (field_4173) + ' { set(' + (value) + ') { ... } }` instead of `set ' + (field_4173) + '(' + (value) + ')`'));
							};
							if (this.tok() == 80) {
								if (name == 'constructor') { this.fail('Use `new()` syntax instead of `constructor()`') };
								if (_static) { this.fail('Use `static function ' + name + '()` syntax for static methods') } else {
									this.fail('Use `function ' + name + '()` syntax for methods');
								};
							};
							this.fail('Fields should start with `var ' + name + '` or `let ' + name + '`');
						}
					} break;

					case 61: {
						this.fail('Fields cannot start with uppercase character `' + this.print() + '` -> `' + this.print().toLowerCase() + '`')
					} break;

					case 74: {
						{
							const pos_4176 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
							const field_4178 = fields.pop();
							let v_4180 = null;
							let t_4182 = null;
							let n = null;
							let onlyGet = false;
							{
								const temp_4186 = (field_4178);
								switch (temp_4186&&temp_4186[0]) {
								case 24: {
									const name_4188 = temp_4186[1];
									const type = temp_4186[2];
									const expr_4191 = temp_4186[3];
									const const_4193 = temp_4186[4];
									{
										if (expr_4191 != null) { this.fail('Property should not have a `= value`') };
										v_4180 = field_4178;
										t_4182 = type;
										n = name_4188;
										onlyGet = const_4193;
									}
								} break;

								default:
								this.fail('Only `var` and `let` fields may have a getter `let v: T { get() ... }`')
								};
							};
							this.i++;
							if (this.print() == 'set') { this.fail('Expected `get` before `set`') };
							if (this.print() != 'get') { this.fail('Expected `get`') };
							const kind = this.print();
							let getterExpr = null;
							if (kind == 'get') {
								this.i++;
								getterExpr = this.parseExpr();
							};
							const kind_4197 = this.print();
							let setterExpr = null;
							let setterVar = null;
							if ((kind_4197 == 'set') && (onlyGet)) { this.fail('Constants `let` may have only getter `get`') };
							if (kind_4197 == 'set') {
								this.i++;
								this.step(80);
								setterVar = this.getgo(62);
								this.step(79);
								setterExpr = this.parseExpr();
							};
							if ((setterExpr == null) && ((!onlyGet))) { this.fail('Variables `var` should have both getter `get` and setter `set`') };
							this.step(73);
							const getter = /*?*/((getterExpr == null))? (null) : /*Function*/[22,'get_' + n,getterExpr,[],t_4182,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:252"];
							const setter = /*?*/((setterExpr == null))? (null) : /*Function*/[22,'set_' + n,setterExpr,[/*Var*/[24,setterVar,t_4182,null,true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:254"]],null,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:253"];
							const property = /*Property*/[27,field_4178,getter,setter,"F:/hexa-dev/hexa/source/compiler/parser.hexa:256"];
							this.project.data.set(property, new NodeData(pos_4176.line, pos_4176.column, this.lex.fileName));
							this.project.data.set(getter, new NodeData(pos_4176.line, pos_4176.column, this.lex.fileName));
							this.project.data.set(setter, new NodeData(pos_4176.line, pos_4176.column, this.lex.fileName));
							fields.push(property);
							{
								let step = 0;
								const getter_4205 = getter;
								if (step == 0 && getter_4205 != null) { step = 1 };
								if (step == 1) { fields.push(getter_4205) };
							};
							{
								let step_4207 = 0;
								const setter_4209 = setter;
								if (step_4207 == 0 && setter_4209 != null) { step_4207 = 1 };
								if (step_4207 == 1) { fields.push(setter_4209) };
							};
						}
					} break;

					default:
					this.fail('Fields cannot start with `' + this.print() + '`')
					};
				};
			};
			return fields;
		};
		tok() {
			if (this.i > this.lex.length) {
				console.log('Parser is out of token space!');
				console.log('This should NOT happen.');
				console.log('Please, issue a developer (with a sample code).');
				this.fail(this.lex.fileName + ': Parser internal error: out of token space');
			};
			let t_4211 = this.lex.token[this.i];
			if (this.lasttok != this.i) {
				this.lasttok = this.i;
				this.lasttokchecks = 1000;
			} else {
				this.lasttokchecks--;
				if (this.lasttokchecks < 0) { this.fail('Parser internal error: Same token parsed too many times: ' + ('`' + (this.print()) + '`')) };
			};
			if ((t_4211 == 78) && (this.lex.value[this.i + 1] == 'end')) { if (this.endif > 0) {
				this.i++;
				this.i++;
				this.endif--;
				this.tok();
			} else {
				this.fail('Unexpected `#end`');
			} };
			if ((t_4211 == 78) && (this.offset(1) == 17)) {
				this.i++;
				this.i++;
				const defName = this.getgo(62);
				const def = this.project.defines[defName];
				if ((def == null) && (this.lint == false)) { this.fail('`#if` looks for the `' + defName + '` parameter which is *not* defined in project file.' + (' Add `\"define\": { \"' + (defName) + '\": false }` to `hexa.json` or `--define ' + (defName) + '=false` to suppress this message.')) };
				if (def == true) { this.endif++ };
				if (def == false || this.lint == true) {
					let endifs = 1;
					while ((this.i < this.lex.length)) {
						if ((this.offset(0) == 78) && (this.offset(1) == 17)) {
							this.i++;
							this.i++;
							endifs++;
							continue;
						};
						if ((this.offset(0) == 78) && (this.lex.value[this.i + 1] == 'end')) {
							this.i++;
							this.i++;
							endifs--;
							if (endifs == 0) { break };
							continue;
						};
						this.i++;
					};
				};
				this.tok();
			};
			return this.lex.token[this.i];
		};
		print() { return Token.stringify(this.lex.token[this.i], this.lex.value[this.i]) };
		expect(t_4216) { if (t_4216 != this.tok()) { this.expected(Token.stringify(t_4216)) } };
		fail(message, line, column, filename) {
			const line_4222 = /*?*/(line != null)? (line) : this.lex.line[this.i];
			const column_4224 = /*?*/(column != null)? (column) : this.lex.column[this.i];
			const filename_4226 = /*?*/(filename != null)? (filename) : this.lex.fileName;
			this.hints.push(new CompilerError(0, message, line_4222, column_4224, filename_4226));
			throw new CompilerErrors(this.hints);
		};
		failHint(message_4228, line_4230, column_4232, filename_4234) {
			const line_4236 = /*?*/(line_4230 != null)? (line_4230) : this.lex.line[this.i];
			const column_4238 = /*?*/(column_4232 != null)? (column_4232) : this.lex.column[this.i];
			const filename_4240 = /*?*/(filename_4234 != null)? (filename_4234) : this.lex.fileName;
			this.hints.push(new CompilerError(0, message_4228, line_4236, column_4238, filename_4240));
		};
		getgo(t_4242) {
			this.expect(t_4242);
			return this.lex.value[(this.i++)];
		};
		step(t_4244) {
			this.expect(t_4244);
			this.i++;
		};
		next() { this.i++ };
		offset(v_4246) { return this.lex.token[this.i + v_4246] };
		unexpected() {
			let token = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
			let error = ('Unexpected `' + (token) + '`');
			if (this.tok() == 82) { error += ' semicolon. Note: Hexa has no semicolons!' };
			if (this.print() == 'public') { error += '. Note: Hexa has no `public` keyword!' };
			this.fail(error);
		};
		expected(str) {
			let token_4251 = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
			this.fail(('Expected `' + (str) + '` before `' + (token_4251) + '`'));
		};
		parseExpr() {
			let atts_4253 = [];
			while ((this.tok() == 70)) {
				atts_4253.push(this.parseAttribute());
			};
			let node = this.tok();
			let nodePosition = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
			let result = null;
			{
				const temp_4258 = (node);
				switch (temp_4258) {
				case 13: {
					{
						this.i++;
						{
							const temp_4260 = (this.tok());
							switch (temp_4260) {
							case 16: case 21: {
								result = this.parseFunction(false, true)
							} break;

							case 40: case 23: {
								{
									const parsed = this.parseVar(true);
									if (parsed.length > 1) { result = /*Vars*/[25,parsed,"F:/hexa-dev/hexa/source/compiler/parser.hexa:471"] } else {
										result = parsed[0];
									};
								}
							} break;

							case 7: case 22: {
								result = this.parseClass(true)
							} break;

							case 61: {
								{
									const alias = this.parseType();
									this.step(91);
									const value_4264 = this.parseType();
									result = /*TypeAlias*/[9,alias,value_4264,"F:/hexa-dev/hexa/source/compiler/parser.hexa:481"];
								}
							} break;

							default:
							this.fail(('Wrong `declare` format, got `' + (Token.stringify(this.tok())) + '`'))
							};
						};
					}
				} break;

				case 74: {
					{
						this.i++;
						if (this.tok() == 73) {
							this.i++;
							result = /*Block*/[12,[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:589"];
						} else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
							let names = [];
							let el = [];
							while (true) {
								names.push(this.getgo(62));
								this.step(76);
								el.push(this.parseExpr());
								if (this.tok() == 75) {
									this.i++;
									if (this.tok() == 73) { this.fail('Unexpected `}`, remove trailing `,` comma') };
									continue;
								} else {
									break;
								};
							};
							if (this.tok() != 73) { this.fail(('Expected `}` or `,` before `' + (this.print()) + '`')) };
							this.step(73);
							result = /*Object*/[38,names,el,"F:/hexa-dev/hexa/source/compiler/parser.hexa:611"];
						} else {
							let el_4268 = [];
							while ((this.tok() != 73)) {
								el_4268.push(this.parseExpr());
							};
							this.step(73);
							result = /*Block*/[12,el_4268,"F:/hexa-dev/hexa/source/compiler/parser.hexa:618"];
						};
					}
				} break;

				case 17: {
					{
						this.i++;
						if (this.tok() == 80) { this.step(80) };
						let econd = [this.parseExpr()];
						while ((this.tok() == 75)) {
							this.next();
							econd.push(this.parseExpr());
						};
						if (this.tok() == 79) { this.step(79) };
						let eif = null;
						let eifAt = this.i;
						if (this.tok() != 76) { eif = this.parseExpr() };
						let eelse = null;
						let eelseAt = this.i;
						if (this.tok() == 10) {
							this.i++;
							eelse = this.parseExpr();
						};
						if (eif != null) {
							const temp_4275 = (eif);
							switch (temp_4275&&temp_4275[0]) {
							case 12: {
								{
								}
							} break;

							default:
							{
								const temp_4277 = this.i;
								this.i = eifAt;
								this.failHint('`if` body must be a `{` block `}`');
								this.i = temp_4277;
							}
							};
						};
						if (eelse != null) {
							const temp_4279 = (eelse);
							switch (temp_4279&&temp_4279[0]) {
							case 12: {
								{
								}
							} break;

							case 14: {
								{
								}
							} break;

							default:
							{
								const temp_4281 = this.i;
								this.i = eelseAt;
								this.failHint('`else` body must be a `{` block `}`');
								this.i = temp_4281;
							}
							};
						};
						result = /*If*/[14,econd,eif,eelse,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:669"];
					}
				} break;

				case 41: {
					{
						this.i++;
						let econd_4283 = this.parseExpr();
						let e = this.parseExpr();
						result = /*While*/[21,econd_4283,e,true,"F:/hexa-dev/hexa/source/compiler/parser.hexa:675"];
					}
				} break;

				case 9: {
					{
						this.i++;
						let e_4286 = this.parseExpr();
						this.step(41);
						let econd_4288 = this.parseExpr();
						result = /*While*/[21,econd_4288,e_4286,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:682"];
					}
				} break;

				case 80: {
					{
						const startsAt = this.i;
						this.next();
						if ((this.tok() == 79 && this.offset(1) == 90) || (this.tok() == 62 && this.offset(1) == 75) || (this.tok() == 62 && this.offset(1) == 76) || (this.tok() == 62 && this.offset(1) == 79 && this.offset(2) == 90)) {
							let vars_4291 = [];
							let types_4293 = [];
							let values_4295 = [];
							while ((this.tok() != 79)) {
								vars_4291.push(this.getgo(62));
								if (this.tok() == 76) {
									this.i++;
									types_4293.push(this.parseType());
								};
								if (this.tok() == 91) {
									this.i++;
									values_4295.push(this.parseExpr());
								};
								if (this.tok() == 75) { this.i++ };
							};
							this.step(79);
							this.step(90);
							let v_4297 = [];
							{
								let i_4299 = 0;
								let it_4301 = 0;
								let at_4303 = vars_4291.length;
								while (it_4301 < at_4303) {
									i_4299 = it_4301;
									it_4301++;
									{
										v_4297.push(/*Var*/[24,vars_4291[i_4299],types_4293[i_4299],values_4295[i_4299],true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:720"]);
									};
								};
							};
							result = /*Arrow*/[23,this.parseExpr(),v_4297,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:722"];
						} else {
							if (this.tok() == 0) {
								this.i = startsAt;
								this.fail('The parenthesis `(` has got unclosed to the end of the file');
							};
							let expr_4305 = this.parseExpr();
							if (this.tok() == 0) {
								this.i = startsAt;
								this.fail('The parenthesis `(` has got unclosed to the end of the file');
							};
							this.step(79);
							result = /*Parenthesis*/[15,expr_4305,"F:/hexa-dev/hexa/source/compiler/parser.hexa:738"];
						};
					}
				} break;

				case 31: {
					{
						this.i++;
						{
							const temp_4307 = (this.tok());
							switch (temp_4307) {
							case 73: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:745"]
							} break;

							case 40: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:746"]
							} break;

							case 23: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:747"]
							} break;

							case 4: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:748"]
							} break;

							case 3: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:749"]
							} break;

							case 8: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:750"]
							} break;

							case 31: {
								result = /*Return*/[16,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:751"]
							} break;

							default:
							result = /*Return*/[16,this.parseExpr(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:752"]
							};
						};
					}
				} break;

				case 35: {
					{
						this.i++;
						result = /*Throw*/[17,this.parseExpr(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:756"];
					}
				} break;

				case 8: {
					{
						this.i++;
						result = /*Continue*/[19];
					}
				} break;

				case 3: {
					{
						this.i++;
						result = /*Break*/[18];
					}
				} break;

				case 1: {
					{
						this.i++;
						result = /*Underscore*/[45];
					}
				} break;

				case 98: {
					{
						this.i++;
						result = /*Interval*/[46];
					}
				} break;

				case 87: case 86: case 89: case 88: case 107: {
					{
						const id = this.lex.token[this.i];
						this.i++;
						const value_4310 = this.parseExpr();
						const fix = (value_4313) => {
							const temp_4315 = (value_4313);
							switch (temp_4315&&temp_4315[0]) {
							case 10: {
								const aa = temp_4315[1];
								const op = temp_4315[2];
								const bb = temp_4315[3];
								return /*Binop*/[10,fix(aa),op,bb,"F:/hexa-dev/hexa/source/compiler/parser.hexa:802"]
							} break;

							default:
							return /*Unop*/[20,id,false,value_4313,"F:/hexa-dev/hexa/source/compiler/parser.hexa:803"]
							};
						};
						result = fix(value_4310);
					}
				} break;

				case 60: {
					result = /*Float*/[7,parseFloat(this.getgo(60)),"F:/hexa-dev/hexa/source/compiler/parser.hexa:816"]
				} break;

				case 63: {
					{
						const meta = this.lex.meta[this.i];
						const value_4321 = this.getgo(63);
						{
							const temp_4323 = (meta);
							switch (temp_4323) {
							case 0: {
								{
									const at_4325 = this.i;
									const v_4327 = parseInt(value_4321);
									if (v_4327 > 2147483647 || v_4327 < (-2147483647)) {
										this.i = at_4325;
										this.fail(('Integer `' + (value_4321) + '` is too large for *signed* 32 bit, use `' + (value_4321) + 'u32` or `' + (value_4321) + 'n`'));
									};
									result = /*Int*/[5,v_4327,"F:/hexa-dev/hexa/source/compiler/parser.hexa:829"];
								}
							} break;

							default:
							result = /*MetaInt*/[6,BigInt(value_4321),meta,"F:/hexa-dev/hexa/source/compiler/parser.hexa:831"]
							};
						};
					}
				} break;

				case 61: {
					if (this.lex.token[this.i + 1] == 99) {
						let res = this.parseType();
						result = /*NodeTypeValue*/[51,res,"F:/hexa-dev/hexa/source/compiler/parser.hexa:837"];
					} else if (this.lex.token[this.i + 1] == 81) {
						let name_4330 = this.getgo(61);
						this.i++;
						result = /*NodeTypeValue*/[51,/*Optional*/[0,/*Type*/[1,name_4330,"F:/hexa-dev/hexa/source/compiler/parser.hexa:841"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:841"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:841"];
					} else {
						let name_4332 = this.getgo(61);
						result = /*NodeTypeValue*/[51,/*Type*/[1,name_4332,"F:/hexa-dev/hexa/source/compiler/parser.hexa:844"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:844"];
					}
				} break;

				case 62: {
					{
						let name_4334 = this.getgo(62);
						if (this.tok() == 90) {
							this.next();
							result = /*Arrow*/[23,this.parseExpr(),[/*Var*/[24,name_4334,null,null,true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:850"]],null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:850"];
						} else {
							result = /*Ident*/[1,name_4334,"F:/hexa-dev/hexa/source/compiler/parser.hexa:852"];
						};
					}
				} break;

				case 66: {
					result = /*String*/[0,this.getgo(66),"F:/hexa-dev/hexa/source/compiler/parser.hexa:855"]
				} break;

				case 64: {
					{
						let str_4336 = this.getgo(64);
						if (this.hasInterpolation(str_4336)) { result = /*Parenthesis*/[15,this.parseInterpolations(str_4336),"F:/hexa-dev/hexa/source/compiler/parser.hexa:860"] } else {
							result = /*String*/[0,str_4336,"F:/hexa-dev/hexa/source/compiler/parser.hexa:862"];
						};
					}
				} break;

				case 36: {
					{
						this.i++;
						result = /*Bool*/[2,true,"F:/hexa-dev/hexa/source/compiler/parser.hexa:865"];
					}
				} break;

				case 14: {
					{
						this.i++;
						result = /*Bool*/[2,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:867"];
					}
				} break;

				case 34: {
					{
						this.i++;
						result = /*This*/[3];
					}
				} break;

				case 26: {
					{
						this.i++;
						result = /*Null*/[8];
					}
				} break;

				case 59: {
					{
						this.i++;
						result = /*Super*/[4];
					}
				} break;

				case 40: {
					{
						let parsed_4338 = this.parseVar();
						if (parsed_4338.length > 1) { result = /*Vars*/[25,parsed_4338,"F:/hexa-dev/hexa/source/compiler/parser.hexa:877"] } else {
							result = parsed_4338[0];
						};
					}
				} break;

				case 23: {
					{
						let parsed_4340 = this.parseVar();
						if (parsed_4340.length > 1) { result = /*Vars*/[25,parsed_4340,"F:/hexa-dev/hexa/source/compiler/parser.hexa:884"] } else {
							result = parsed_4340[0];
						};
					}
				} break;

				case 37: {
					{
						this.i++;
						let expr_4342 = this.parseExpr();
						let vars_4344 = [];
						let t_4346 = [];
						let v_4348 = [];
						let catches = [];
						while ((this.tok() == 6)) {
							this.step(6);
							if (this.tok() == 80) { this.step(80) };
							let name_4351 = this.getgo(62);
							vars_4344.push(name_4351);
							this.step(76);
							let type_4353 = this.parseType();
							{
								t_4346.push(type_4353);
							};
							v_4348.push(/*Var*/[24,name_4351,type_4353,null,true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:908"]);
							if (this.tok() == 79) { this.step(79) };
							catches.push(this.parseExpr());
						};
						result = /*Try*/[28,expr_4342,t_4346,v_4348,catches,"F:/hexa-dev/hexa/source/compiler/parser.hexa:915"];
					}
				} break;

				case 2: {
					{
						this.i++;
						if (this.tok() == 64) {
							result = /*Import*/[37,[],this.getgo(64),"F:/hexa-dev/hexa/source/compiler/parser.hexa:921"];
							this.project.data.set(result, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
							return result;
						};
						let el_4355 = [];
						while (true) {
							if (this.tok() == 62) { el_4355.push(/*Lower*/[0,this.getgo(62),"F:/hexa-dev/hexa/source/compiler/parser.hexa:932"]) } else if (this.tok() == 61) { el_4355.push(/*Upper*/[1,this.getgo(61),"F:/hexa-dev/hexa/source/compiler/parser.hexa:934"]) } else if (this.tok() == 102) {
								this.i++;
								this.step(58);
								el_4355.push(/*As*/[3,/*AllTheThings*/[2],/*Lower*/[0,this.getgo(62),"F:/hexa-dev/hexa/source/compiler/parser.hexa:939"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:939"]);
							} else {
								this.fail('Incorrect `import` syntax');
							};
							if (this.tok() == 58) {
								this.i++;
								if (this.tok() == 62) { el_4355.push(/*As*/[3,el_4355.pop(),/*Lower*/[0,this.getgo(62),"F:/hexa-dev/hexa/source/compiler/parser.hexa:947"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:947"]) } else if (this.tok() == 61) { el_4355.push(/*As*/[3,el_4355.pop(),/*Upper*/[1,this.getgo(61),"F:/hexa-dev/hexa/source/compiler/parser.hexa:949"],"F:/hexa-dev/hexa/source/compiler/parser.hexa:949"]) } else {
									this.fail('Incorrect `import x as y` syntax');
								};
							};
							if (this.tok() == 75) { this.i++ } else {
								break;
							};
						};
						this.step(20);
						result = /*Import*/[37,el_4355,this.getgo(64),"F:/hexa-dev/hexa/source/compiler/parser.hexa:991"];
						this.project.data.set(result, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
						return result;
					}
				} break;

				case 28: {
					{
						this.i++;
						let path_4357 = [];
						let el_4359 = [];
						result = /*Module*/[36,'',el_4359,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1012"];
						this.project.data.set(result, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
						return result;
					}
				} break;

				case 11: {
					{
						this.i++;
						let t_4361 = this.parseType();
						let valuesType = null;
						if (this.tok() == 76) {
							this.i++;
							valuesType = this.parseType();
						};
						let extend = null;
						if (this.tok() == 12) {
							this.i++;
							extend = this.parseType();
						};
						this.step(74);
						let names_4365 = [];
						while ((this.tok() != 73)) {
							while ((this.tok() == 70)) {
								atts_4253.push(this.parseAttribute());
							};
							atts_4253 = [];
							names_4365.push(this.parseExpr());
						};
						this.step(73);
						result = /*Enum*/[39,t_4361,names_4365,valuesType,extend,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1039"];
					}
				} break;

				case 7: case 22: {
					{
						let att = atts_4253;
						atts_4253 = [];
						const me = this.parseClass();
						this.project.mapDecorators.set(me, att);
						result = me;
					}
				} break;

				case 16: case 21: {
					result = this.parseFunction()
				} break;

				case 72: {
					{
						this.i++;
						let el_4369 = [];
						let values_4371 = [];
						let isMap = false;
						if (this.tok() != 71) { while (true) {
							if (this.tok() == 76) {
								isMap = true;
								this.next();
								break;
							};
							el_4369.push(this.parseExpr());
							if (this.tok() == 76) {
								this.i++;
								values_4371.push(this.parseExpr());
								isMap = true;
							};
							if (this.tok() == 75) {
								this.i++;
								if (this.tok() == 71) { this.fail('Unexpected `]`, remove trailing comma `,` before `]` or add a value after `,` if required') };
							} else {
								break;
							};
						} };
						this.step(71);
						if (isMap) { result = /*Map*/[33,el_4369,values_4371,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1081"] } else {
							result = /*Array*/[32,el_4369,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1083"];
						};
					}
				} break;

				case 25: {
					{
						this.i++;
						let t_4374 = this.parseType();
						let names_4376 = [];
						let values_4378 = [];
						if (this.tok() == 74) {
							this.i++;
							if (this.tok() == 73) { this.step(73) } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
								while ((this.tok() != 73)) {
									names_4376.push(this.getgo(62));
									this.step(76);
									values_4378.push(this.parseExpr());
									if (this.tok() == 75) { this.i++ };
								};
								this.step(73);
							};
						};
						this.step(80);
						let args = [];
						let argNames = [];
						if (this.tok() != 79) { while (true) {
							{
								const temp_4382 = (this.tok());
								switch (temp_4382) {
								case 79: {
									this.fail('Unexpected `)`, remove trailing `,` comma')
								} break;

								case 61: {
									{
										argNames.push(null);
										args.push(this.parseExpr());
										if (this.tok() == 76) {
											this.step(76);
											this.parseType();
										};
									}
								} break;

								default:
								{
									if (this.lex.token[this.i + 1] == 76) {
										argNames.push(this.getgo(62));
										this.step(76);
									} else {
										argNames.push(null);
									};
									args.push(this.parseExpr());
								}
								};
							};
							if (this.tok() == 75) { this.i++ } else {
								break;
							};
						} };
						this.step(79);
						result = /*New*/[31,[],t_4374,args,names_4376,values_4378,argNames,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1138"];
					}
				} break;

				case 33: {
					{
						this.i++;
						let exprs = [this.parseExpr()];
						while ((this.tok() == 75)) {
							this.i++;
							exprs.push(this.parseExpr());
						};
						this.step(74);
						let cases = [];
						let conds = [];
						let guards = [];
						while ((this.tok() != 73)) {
							this.step(4);
							if (this.tok() == 1) {
								conds.push(/*Underscore*/[45]);
								this.i++;
							} else {
								conds.push(this.parseExpr());
							};
							if (this.tok() == 17) {
								this.i++;
								guards.push(this.parseExpr());
							} else {
								guards.push(null);
							};
							this.step(76);
							let exs = [];
							while ((this.tok() != 4 && this.tok() != 73)) {
								exs.push(this.parseExpr());
							};
							cases.push(/*Block*/[12,exs,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1173"]);
						};
						this.step(73);
						result = /*Switch*/[35,exprs,conds,guards,cases,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1177"];
					}
				} break;

				case 15: {
					{
						this.i++;
						if (this.tok() == 80) { this.step(80) };
						if (this.tok() == 23 || this.tok() == 40) {
							this.i++;
							let name_4389 = this.getgo(62);
							{
								if (this.print() == 'of' || this.print() == 'in') {
									this.i++;
									let values_4391 = this.print();
									this.i++;
									while ((this.tok() != 79 && this.tok() != 0)) {
										if (this.tok() == 107 || this.tok() == 111) { values_4391 += ' ' + this.print() + ' ' } else {
											values_4391 += this.print();
										};
										this.i++;
									};
									this.fail(('This loop should be replaced to `for (' + (name_4389) + ' in ' + (values_4391) + ')`'));
								};
							};
							let classic = true;
							if (this.tok() == 91) { this.i++ } else {
								classic = false;
							};
							let specialCase = '';
							if ((this.tok() == 63) && (this.lex.value[this.i] == '0')) { this.i++ } else {
								while ((this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77)) {
									if (this.tok() == 107 || this.tok() == 111) { specialCase += ' ' + this.print() + ' ' } else {
										specialCase += this.print();
									};
									this.i++;
								};
							};
							if (this.tok() == 82) { this.i++ } else {
								classic = false;
							};
							if ((this.tok() == 62) && (this.lex.value[this.i] == name_4389)) { this.i++ } else {
								classic = false;
							};
							let lesserOrEqual = false;
							if (this.tok() == 99) { this.i++ } else if (this.tok() == 100) {
								this.i++;
								lesserOrEqual = true;
							} else {
								classic = false;
							};
							let values_4396 = this.print();
							this.i++;
							while ((this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77)) {
								if (this.tok() == 107 || this.tok() == 111) { values_4396 += ' ' + this.print() + ' ' } else {
									values_4396 += this.print();
								};
								this.i++;
							};
							if (lesserOrEqual) { values_4396 += ' + 1' };
							if (this.tok() == 82) { this.i++ } else {
								classic = false;
							};
							if ((this.tok() == 62) && (this.lex.value[this.i] == name_4389)) {
								this.i++;
								if (this.tok() == 87) { this.i++ } else {
									classic = false;
								};
							} else if (this.tok() == 87) {
								this.i++;
								if ((this.tok() == 62) && (this.lex.value[this.i] == name_4389)) { this.i++ } else {
									classic = false;
								};
							} else {
								classic = false;
							};
							if (this.tok() == 79) {} else {
								classic = false;
							};
							if ((classic) && (specialCase == '')) { this.fail(('This loop should be replaced to `for (' + (name_4389) + ' in ' + (values_4396) + ')`')) };
							if (classic) { this.fail(('This loop should be replaced to `for (' + (name_4389) + ' in ' + (specialCase) + ' ... ' + (values_4396) + ')`')) };
							this.fail(('Hexa has only `for (' + (name_4389) + ' in values)` syntax'));
						};
						let name_4398 = this.getgo(62);
						this.step(20);
						let values_4400 = this.parseExpr();
						let range = null;
						if (this.tok() == 98) {
							this.i++;
							range = this.parseExpr();
						};
						if (this.tok() == 79) { this.step(79) };
						let expression = this.parseExpr();
						result = /*For*/[49,name_4398,values_4400,expression,range,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1346"];
					}
				} break;

				case 32: {
					{
						this.next();
						result = /*Static*/[47,this.parseExpr(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1350"];
					}
				} break;

				case 29: {
					{
						this.next();
						result = /*Private*/[48,this.parseExpr(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1353"];
					}
				} break;

				default:
				this.unexpected()
				};
			};
			if (result == null) {
				process_850.stdout.write('\n');
				this.fail('Expression is incomplete, current token is: ' + Token.stringify(this.tok()));
			};
			this.project.data.set(result, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
			if (atts_4253.length > 0) {
				this.project.mapDecorators.set(result, atts_4253);
				atts_4253 = [];
			};
			let done = this.i >= this.lex.length;
			while (((!done))) {
				this.project.data.set(result, new NodeData(this.lex.line[this.i], this.lex.column[this.i], this.lex.fileName));
				{
					const temp_4405 = (this.tok());
					switch (temp_4405) {
					case 0: {
						done = true
					} break;

					case 72: {
						{
							this.i++;
							let index = this.parseExpr();
							if (this.tok() == 75) { this.fail('Expected `]` instead of `,` comma. Hexa supports only one `[index]` value.\n' + ('Note, you are indexing this expression: `' + (Node.stringify(result)) + '[' + (Node.stringify(index)) + ']`\n') + ('To create array here, wrap it with `{` as `{[' + (Node.stringify(index)) + ', ...]}` so it doesn\'t index previous expression.')) };
							this.step(71);
							result = /*Index*/[34,result,index,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1389"];
						}
					} break;

					case 57: {
						{
							this.i++;
							{
								const temp_4408 = (this.tok());
								switch (temp_4408) {
								case 61: {
									result = /*Is*/[43,result,this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1394"]
								} break;

								default:
								this.fail('Cannot parse type `' + Token.stringify(this.tok()) + '`')
								};
							};
						}
					} break;

					case 58: {
						{
							this.i++;
							let kind_4410 = this.tok();
							if (this.tok() == 89) { this.i++ } else if (this.tok() == 81) { this.i++ } else {
								kind_4410 = 123;
							};
							result = /*As*/[44,result,kind_4410,this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1408"];
						}
					} break;

					case 80: {
						{
							let args_4412 = [];
							let argNames_4414 = [];
							this.i++;
							if (this.tok() != 79) { while (true) {
								{
									const temp_4416 = (this.tok());
									switch (temp_4416) {
									case 79: {
										this.fail('Unexpected `)`, remove trailing `,` comma')
									} break;

									case 61: {
										{
											argNames_4414.push(null);
											args_4412.push(this.parseExpr());
											if (this.tok() == 76) {
												this.step(76);
												this.parseType();
											};
										}
									} break;

									default:
									{
										if ((this.tok() == 62) && (this.lex.token[this.i + 1] == 76)) {
											argNames_4414.push(this.getgo(62));
											this.step(76);
										} else {
											argNames_4414.push(null);
										};
										args_4412.push(this.parseExpr());
									}
									};
								};
								if (this.tok() == 75) { this.i++ } else {
									break;
								};
							} };
							this.step(79);
							result = /*Call*/[13,result,args_4412,argNames_4414,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1441"];
						}
					} break;

					case 90: {
						{
							this.next();
							result = /*Arrow*/[23,this.parseExpr(),[result],null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1445"];
						}
					} break;

					case 87: {
						{
							{
								const temp_4418 = (result);
								switch (temp_4418&&temp_4418[0]) {
								case 20: {
									return result
								} break;
								};
							};
							this.i++;
							result = /*Unop*/[20,87,true,result,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1452"];
						}
					} break;

					case 86: {
						{
							{
								const temp_4420 = (result);
								switch (temp_4420&&temp_4420[0]) {
								case 20: {
									return result
								} break;
								};
							};
							this.i++;
							result = /*Unop*/[20,86,true,result,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1459"];
						}
					} break;

					case 77: {
						{
							this.i++;
							{
								const temp_4422 = (this.tok());
								switch (temp_4422) {
								case 61: {
									result = /*DotUpper*/[30,result,this.getgo(61),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1466"]
								} break;

								default:
								result = /*Dot*/[29,result,this.getgo(62),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1468"]
								};
							};
						}
					} break;

					case 81: {
						{
							this.i++;
							if (this.tok() == 77) {
								let name_4424 = this.getgo(62);
								result = /*Dot*/[29,result,name_4424,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1481"];
							} else if (this.tok() == 81) {
								this.i++;
								result = /*Elvis*/[50,result,this.parseExpr(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1485"];
							} else {
								let eif_4426 = this.parseExpr();
								this.step(76);
								let eelse_4428 = this.parseExpr();
								result = /*If*/[14,[result],eif_4426,eelse_4428,true,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1491"];
							};
						}
					} break;

					case 113: {
						{
							this.i++;
							result = this.parseExpr();
						}
					} break;

					default:
					{
						const t_4430 = this.tok();
						if (Parser.isBinop(t_4430) && this.offset(1) == 91) {
							let op_4432 = this.tok();
							this.i++;
							this.i++;
							let b = this.parseExpr();
							result = /*AssignOp*/[11,result,op_4432,b,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1505"];
						} else if (Parser.isBinop(t_4430)) {
							this.i++;
							let b_4435 = this.parseExpr();
							let a = result;
							{
								const temp_4438 = (b_4435);
								switch (temp_4438&&temp_4438[0]) {
								case 10: {
									const aa_4440 = temp_4438[1];
									const op_4442 = temp_4438[2];
									const bb_4444 = temp_4438[3];
									{
										let tp = Parser.precedence(t_4430);
										let tLeft = tp > 99;
										tp = tp % 100;
										let bp = Parser.precedence(op_4442);
										let bLeft = bp > 99;
										bp = bp % 100;
										if (bp >= tp) { result = /*Binop*/[10,/*Binop*/[10,result,t_4430,aa_4440,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1524"],op_4442,bb_4444,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1524"] } else {
											result = /*Binop*/[10,result,t_4430,b_4435,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1526"];
										};
									}
								} break;

								case 14: {
									const econd_4450 = temp_4438[1];
									const eif_4452 = temp_4438[2];
									const eelse_4454 = temp_4438[3];
									const ternary = temp_4438[4];
									if (ternary == true && t_4430 != 91) { result = /*If*/[14,[/*Binop*/[10,result,t_4430,econd_4450[0],"F:/hexa-dev/hexa/source/compiler/parser.hexa:1531"]],eif_4452,eelse_4454,true,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1531"] } else {
										result = /*Binop*/[10,result,t_4430,b_4435,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1533"];
									}
								} break;

								default:
								result = /*Binop*/[10,result,t_4430,b_4435,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1535"]
								};
							};
						} else {
							done = true;
						};
					}
					};
				};
			};
			if (result == null) {
				process_850.stdout.write('\n');
				this.fail('Expression postfix is incomplete');
			};
			if (atts_4253.length > 0) {
				this.project.mapDecorators.set(result, atts_4253);
				atts_4253 = [];
			};
			this.project.data.set(result, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
			return result;
		};
		parseVar(external) {
			let const_4458 = this.tok() == 23;
			this.i++;
			let vars_4460 = [];
			if (this.tok() == 83) {
				this.i++;
				const name_4462 = /*?*/(this.tok() == 62)? (this.print()) : 'name';
				const prefix = /*?*/(const_4458)? ('let') : 'var';
				this.fail(('Hexa doesn\'t support PHP-style variables, replace it to `' + (prefix) + ' ' + (name_4462) + '`'));
			};
			const parseSingleVar = () => {
				let varname = this.getgo(62);
				if (varname.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
				let type_4467 = null;
				if (this.tok() == 76) {
					this.i++;
					type_4467 = this.parseType();
				};
				let expr_4469 = null;
				if (this.tok() == 91) {
					this.i++;
					expr_4469 = this.parseExpr();
				};
				return /*Var*/[24,varname,type_4467,expr_4469,const_4458,(() => {
					const result_4471 = external;
					if (result_4471 != null) { return result_4471 };
					return false;
				})(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1580"];
			};
			const parseSingleBinding = () => {
				let path_4474 = [];
				while ((this.tok() == 62 && this.offset(1) == 77)) {
					path_4474.push(this.getgo(62));
					this.i++;
				};
				path_4474.push(this.getgo(61));
				this.step(77);
				path_4474.push(this.getgo(61));
				if (this.tok() == 80 && this.offset(1) == 79) { this.fail('Don\'t use empty parenthesis for `let ' + path_4474.join('.') + '()` bindings') };
				let bind = [];
				if (this.tok() == 80) {
					do {{
						this.i++;
						if (this.tok() == 1) {
							this.i++;
							bind.push(null);
						} else {
							bind.push(/*Var*/[24,this.getgo(62),null,null,const_4458,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1606"]);
						};
					}} while ((this.tok() == 75));
					this.step(79);
				};
				this.step(91);
				let expr_4477 = this.parseExpr();
				return /*EnumExtract*/[40,path_4474,bind,expr_4477,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1615"];
			};
			while (true) {
				if (this.tok() == 61 || (this.tok() == 62 && this.offset(1) == 77)) { vars_4460.push(parseSingleBinding()) } else {
					vars_4460.push(parseSingleVar());
				};
				if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else {
					break;
				};
			};
			return vars_4460;
			let const_4479 = this.tok() == 23;
			this.i++;
			let vars_4481 = [];
			{
				const temp_4483 = (this.tok());
				switch (temp_4483) {
				case 62: {
					while (true) {
						let varname_4485 = this.getgo(62);
						if (varname_4485.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
						let type_4487 = null;
						if (this.tok() == 76) {
							this.i++;
							type_4487 = this.parseType();
						};
						let expr_4489 = null;
						if (this.tok() == 91) {
							this.i++;
							expr_4489 = this.parseExpr();
						};
						vars_4481.push(/*Var*/[24,varname_4485,type_4487,expr_4489,const_4479,external,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1653"]);
						if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else {
							break;
						};
					}
				} break;

				case 61: {
					{
						let left = /*Ident*/[1,this.getgo(61),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1668"];
						let res_4492 = left;
						while ((this.tok() == 77)) {
							res_4492 = /*Dot*/[29,res_4492,this.getgo(61),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1672"];
						};
						{
							const temp_4494 = (this.tok());
							switch (temp_4494) {
							case 80: {
								{
									let args_4496 = [];
									while ((this.tok() != 79)) {
										args_4496.push(this.getgo(62));
									};
									this.step(91);
									let varname_4498 = this.getgo(62);
								}
							} break;

							case 91: {
								{
								}
							} break;

							default:
							this.fail('Wrong syntax')
							};
						};
					}
				} break;

				default:
				this.fail('Wrong syntax')
				};
			};
			return vars_4481;
		};
		parseFunction(parseBody, external_4501) {
			const parseBody_4503 = /*?*/((parseBody != null))? (parseBody) : true;
			this.i++;
			let expr_4505 = null;
			let name_4507 = null;
			let vars_4509 = [];
			let types_4511 = [];
			let values_4513 = [];
			let pos_4515 = [];
			{
				const temp_4517 = (this.tok());
				switch (temp_4517) {
				case 62: {
					name_4507 = this.getgo(62)
				} break;

				case 61: {
					this.fail(('Function names can\'t start with uppercase `' + (this.print()) + '` -> `' + (this.print().toLowerCase()) + '`'))
				} break;

				default:
				{
				}
				};
			};
			this.step(80);
			{
				if (this.tok() != 79) { while (true) {
					let expr_4519 = null;
					let t_4521 = null;
					if (this.tok() == 98) { this.i++ };
					pos_4515.push({line:this.lex.line[this.i], column:this.lex.column[this.i]});
					let name_4523 = this.getgo(62);
					if (this.tok() == 76) {
						this.i++;
						t_4521 = this.parseType();
					};
					if (this.tok() == 91) {
						this.i++;
						expr_4519 = this.parseExpr();
					};
					vars_4509.push(name_4523);
					types_4511.push(t_4521);
					values_4513.push(expr_4519);
					if (this.tok() == 75) { this.i++ } else {
						break;
					};
				} };
				this.step(79);
			};
			let rettype = null;
			if (this.tok() == 76) {
				this.i++;
				rettype = this.parseType();
			};
			if (parseBody_4503) {
				const temp_4526 = (this.tok());
				switch (temp_4526) {
				case 25: {
					if (this.lex.token[this.i + 1] == 80) {} else {
						expr_4505 = this.parseExpr();
					}
				} break;

				case 73: {
					{
					}
				} break;

				case 32: {
					{
					}
				} break;

				case 29: {
					{
					}
				} break;

				case 16: case 21: {
					{
					}
				} break;

				case 40: {
					{
					}
				} break;

				case 23: {
					{
					}
				} break;

				case 70: {
					{
						let tmp_4528 = this.i;
						while ((this.tok() == 70)) {
							this.parseAttribute();
						};
						if (this.tok() != 73 && this.tok() != 32 && this.tok() != 29 && this.tok() != 16 && this.tok() != 21) {
							this.i = tmp_4528;
							expr_4505 = this.parseExpr();
						} else {
							this.i = tmp_4528;
						};
					}
				} break;

				default:
				expr_4505 = this.parseExpr()
				};
			};
			let v_4530 = [];
			{
				let i_4532 = 0;
				let it_4534 = 0;
				let at_4536 = vars_4509.length;
				while (it_4534 < at_4536) {
					i_4532 = it_4534;
					it_4534++;
					{
						const n_4538 = /*Var*/[24,vars_4509[i_4532],types_4511[i_4532],values_4513[i_4532],true,false,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1779"];
						this.project.data.set(n_4538, new NodeData(pos_4515[i_4532].line, pos_4515[i_4532].column, this.lex.fileName));
						v_4530.push(n_4538);
					};
				};
			};
			{
				const temp_4540 = (expr_4505);
				switch (temp_4540&&temp_4540[0]) {
				case null: case undefined: {
					{
					}
				} break;

				case 12: {
					{
					}
				} break;

				default:
				{
					const named = (() => {
						const result_4543 = name_4507;
						if (result_4543 != null) { return result_4543 };
						return 'fun';
					})();
					this.i--;
					this.fail(('Function `' + (named) + '` should have a `{ block }` as a body'));
				}
				};
			};
			return /*Function*/[22,name_4507,expr_4505,v_4530,rettype,external_4501,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1792"];
		};
		parseClass(external_4545) {
			const _classExternal = this.classExternal;
			this.classExternal = external_4545;
			let isInterface = /*?*/(this.tok() == 22)? (1) : 0;
			this.i++;
			let t_4549 = this.parseType();
			let ext = /*?*/(this.tok() == 12)? ((() => {
				this.i++;
				return this.parseType();
			})()) : (null);
			let impl = [];
			while ((this.tok() == 18)) {
				this.i++;
				impl.push(this.parseType());
			};
			this.step(74);
			let fields_4553 = this.parseFields();
			this.step(73);
			let me_4555 = /*Class*/[26,t_4549,ext,impl,fields_4553,(() => {
				const result_4557 = external_4545;
				if (result_4557 != null) { return result_4557 };
				return false;
			})(),isInterface,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1817"];
			this.classExternal = _classExternal;
			return me_4555;
		};
		hasInterpolation(str_4559) {
			let chars = str_4559.split('');
			let i_4562 = 0;
			while ((i_4562 < chars.length)) {
				if (chars[i_4562] == '\\') { if (i_4562 + 1 < chars.length) { if (chars[i_4562 + 1] == '\\') { i_4562++ } else if (chars[i_4562 + 1] == '(') { return true } } };
				i_4562++;
			};
			return false;
		};
		parseInterpolations(str_4564) {
			const interpolate = (s) => {
				let out = ['"'];
				if (s.length < 2) { return s };
				let i_4569 = 0;
				const s_4571 = s.split('"').join('\\"');
				const pushInterpolator = () => {
					i_4569++;
					i_4569++;
					const pushParen = () => {
						i_4569++;
						while ((i_4569 < s_4571.length)) {
							out.push(s_4571.charAt(i_4569));
							if (s_4571.charAt(i_4569) == '(') {
								pushParen();
								continue;
							};
							if (s_4571.charAt(i_4569) == ')') {
								i_4569++;
								return;
							};
							i_4569++;
						};
						throw 'String interpolation error: unclosed inner parenthesis';
					};
					while ((i_4569 < s_4571.length)) {
						out.push(s_4571.charAt(i_4569));
						if (s_4571.charAt(i_4569) == '(') {
							pushParen();
							continue;
						};
						if (s_4571.charAt(i_4569) == ')') {
							i_4569++;
							return;
						};
						i_4569++;
					};
					throw 'String interpolation error: unclosed parenthesis';
				};
				let result_4575 = ['"'];
				while ((i_4569 < s_4571.length)) {
					if (s_4571.charAt(i_4569) == '\\' && s_4571.charAt(i_4569 + 1) == '(') {
						result_4575.push('" + ');
						out.push('" + (');
						let ii = i_4569 + 1;
						pushInterpolator();
						result_4575.push(s_4571.substring(ii, i_4569 + 1));
						result_4575.push(' + "');
						out.push(' + "');
					} else {
						out.push(s_4571.charAt(i_4569));
						result_4575.push(s_4571.charAt(i_4569));
						i_4569++;
					};
				};
				result_4575.push('"');
				out.push('"');
				return out.join('');
			};
			let resStr = interpolate(str_4564);
			let tokens = Lexer.tokenize(Buffer.from(resStr), this.lex.fileName);
			try {
				let parsed_4582 = Parser.toNode(Parser.parseNodes(tokens, this.project));
				{
					const temp_4584 = (parsed_4582);
					switch (temp_4584&&temp_4584[0]) {
					case 12: {
						throw 'Parse interpolation error: got a block'
					} break;

					default:
					return parsed_4582
					};
				};
			} catch (temp_4580) {
				if (true) {
				const e = temp_4580
				{
					this.fail('Parse interpolation error: ' + e);
				} } else

				throw temp_4580;
			};
		};
		parseAttribute() {
			this.i++;
			let name_4586 = this.getgo(62);
			let values_4588 = [];
			if (this.tok() == 80) {
				this.i++;
				if (this.tok() != 79) { while (true) {
					values_4588.push(this.parseExpr());
					if (this.tok() == 75) { this.i++ } else {
						break;
					};
				} };
				this.step(79);
			};
			return new Attribute(name_4586, values_4588);
		};
		parseType() {
			let path_4590 = [];
			while ((this.tok() == 62 && this.offset(1) == 77)) {
				path_4590.push(this.getgo(62));
				this.i++;
			};
			let result_4592 = null;
			{
				const temp_4594 = (this.tok());
				switch (temp_4594) {
				case 61: {
					{
						let name_4596 = this.getgo(61);
						if (path_4590.length != 0) { name_4596 = path_4590.join('.') + '.' + name_4596 };
						while ((this.tok() == 77)) {
							this.i++;
							this.getgo(61);
						};
						let sresult = /*?*/(this.tok() == 99)? ((() => {
							this.i++;
							this.parametricTypeNesting++;
							let params = [this.parseType()];
							while ((this.tok() == 75)) {
								this.i++;
								params.push(this.parseType());
							};
							if (this.parametricTypeNestingToken == 0) { this.parametricTypeNestingToken = this.tok() };
							{
								const temp_4600 = (this.parametricTypeNestingToken);
								switch (temp_4600) {
								case 96: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 0;
										this.i++;
									}
								} break;

								case 106: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 96;
									}
								} break;

								case 108: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 108;
									}
								} break;

								default:
								this.unexpected()
								};
							};
							if (this.parametricTypeNesting < 0) { this.fail('parametricTypeNesting < 0') };
							return /*ParametricType*/[2,name_4596,params,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1981"];
						})()) : /*Type*/[1,name_4596,"F:/hexa-dev/hexa/source/compiler/parser.hexa:1982"];
						if (this.tok() == 90) {
							this.i++;
							sresult = /*Function*/[3,[sresult],this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:1989"];
						};
						result_4592 = sresult;
					}
				} break;

				case 72: {
					{
						if (path_4590.length != 0) { this.fail('Token.BkOpen') };
						this.i++;
						let res_4602 = null;
						{
							const temp_4604 = (this.tok());
							switch (temp_4604) {
							case 71: {
								{
									this.i++;
									res_4602 = /*ParametricType*/[2,'Array',[/*Object*/[5,[],[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2002"]],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2002"];
								}
							} break;

							case 76: {
								{
									this.i++;
									if (this.tok() == 71) {
										this.i++;
										res_4602 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2007"], /*Object*/[5,[],[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2007"]],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2007"];
									} else {
										res_4602 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2010"], this.parseType()],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2010"];
									};
								}
							} break;

							default:
							{
								let key = this.parseType();
								let innerRes = /*?*/(this.tok() == 76)? ((() => {
									this.i++;
									return /*ParametricType*/[2,'Map',[key, this.parseType()],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2016"];
								})()) : /*ParametricType*/[2,'Array',[key],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2017"];
								this.step(71);
								if (this.tok() == 90) {
									this.i++;
									innerRes = /*Function*/[3,[res_4602],this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:2023"];
								};
								res_4602 = innerRes;
							}
							};
						};
						result_4592 = res_4602;
					}
				} break;

				case 74: {
					{
						if (path_4590.length != 0) { this.fail('Token.BrOpen') };
						this.i++;
						let sresult_4608 = /*?*/(this.tok() == 73)? (/*Object*/[5,[],[],"F:/hexa-dev/hexa/source/compiler/parser.hexa:2033"]) : (() => {
							let names_4610 = [];
							let types_4612 = [];
							while ((this.tok() != 73)) {
								names_4610.push(this.getgo(62));
								if (this.tok() == 76) {
									this.i++;
									types_4612.push(this.parseType());
								};
								if (this.tok() == 75) { this.i++ };
							};
							return /*Object*/[5,names_4610,types_4612,"F:/hexa-dev/hexa/source/compiler/parser.hexa:2048"];
						})();
						this.step(73);
						if (this.tok() == 90) {
							this.i++;
							sresult_4608 = /*Function*/[3,[sresult_4608],this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:2053"];
						};
						result_4592 = sresult_4608;
					}
				} break;

				case 80: {
					{
						if (path_4590.length != 0) { this.fail('Token.POpen') };
						this.i++;
						let args_4614 = [];
						while ((this.tok() != 79)) {
							if (this.tok() == 62) {
								this.step(62);
								this.step(76);
							};
							args_4614.push(this.parseType());
							if (this.tok() == 75) { this.i++ };
						};
						this.step(79);
						this.step(90);
						result_4592 = /*Function*/[3,args_4614,this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:2080"];
					}
				} break;

				case 62: {
					{
						let res_4616 = null;
						{
							const temp_4618 = (this.offset(1));
							switch (temp_4618) {
							case 76: {
								{
									let argName = this.getgo(this.tok());
									this.step(76);
									let argType = this.parseType();
									res_4616 = /*FunctionArg*/[4,argName,argType,null,"F:/hexa-dev/hexa/source/compiler/parser.hexa:2091"];
								}
							} break;

							default:
							this.fail(('Type name `' + (this.print()) + '` can not start with lowercase'))
							};
						};
						result_4592 = res_4616;
					}
				} break;

				default:
				this.fail('Expected type, parsed `' + Token.stringify(this.tok()) + '`')
				};
			};
			if (this.tok() == 81) { result_4592 = /*Optional*/[0,result_4592,"F:/hexa-dev/hexa/source/compiler/parser.hexa:2108"] };
			while ((this.tok() == 81)) {
				this.i++;
			};
			if (this.tok() == 90) {
				this.i++;
				result_4592 = /*Function*/[3,[result_4592],this.parseType(),"F:/hexa-dev/hexa/source/compiler/parser.hexa:2115"];
			};
			return result_4592;
		};
	}
	Parser.toNode = (nodes) => {
			if (nodes.length == 0) { return null };
			if (nodes.length > 1) { return /*Block*/[12,nodes,"F:/hexa-dev/hexa/source/compiler/parser.hexa:25"] };
			return nodes[0];
		};
	Parser.parseNodes = (lexe, project, lint = false) => {
			const parser = new Parser(lexe, project, lint);
			if (parser.hints.length > 0) { throw new CompilerErrors(parser.hints) };
			return parser.nodes;
		};
	Parser.precedence = (op_4622) => {
			const left_4624 = 100;
			const right = 0;
			{
				const temp_4627 = (op_4622);
				switch (temp_4627) {
				case 101: {
					return 100
				} break;

				case 102: {
					return 101
				} break;

				case 94: {
					return 101
				} break;

				case 110: {
					return 101
				} break;

				case 111: {
					return 102
				} break;

				case 107: {
					return 102
				} break;

				case 105: {
					return 103
				} break;

				case 106: {
					return 103
				} break;

				case 108: {
					return 103
				} break;

				case 104: {
					return 104
				} break;

				case 112: {
					return 104
				} break;

				case 109: {
					return 104
				} break;

				case 95: {
					return 105
				} break;

				case 103: {
					return 105
				} break;

				case 96: {
					return 105
				} break;

				case 99: {
					return 105
				} break;

				case 97: {
					return 105
				} break;

				case 100: {
					return 105
				} break;

				case 92: {
					return 107
				} break;

				case 93: {
					return 108
				} break;

				case 91: {
					return 10
				} break;

				default:
				this.fail('No precedence for ' + Token.stringify(op_4622))
				};
			};
		};
	Parser.isBinop = (t_4629) => {
			const temp_4631 = (t_4629);
			switch (temp_4631) {
			case 111: {
				return true
			} break;

			case 102: {
				return true
			} break;

			case 94: {
				return true
			} break;

			case 110: {
				return true
			} break;

			case 107: {
				return true
			} break;

			case 91: {
				return true
			} break;

			case 95: {
				return true
			} break;

			case 103: {
				return true
			} break;

			case 96: {
				return true
			} break;

			case 97: {
				return true
			} break;

			case 99: {
				return true
			} break;

			case 100: {
				return true
			} break;

			case 112: {
				return true
			} break;

			case 104: {
				return true
			} break;

			case 109: {
				return true
			} break;

			case 92: {
				return true
			} break;

			case 93: {
				return true
			} break;

			case 105: {
				return true
			} break;

			case 106: {
				return true
			} break;

			case 108: {
				return true
			} break;

			case 101: {
				return true
			} break;

			default:
			return false
			};
		};
	var TestParser = class {
	}
	TestParser.passed = 0
	TestParser.overall = 0
	TestParser.test = () => {
			console.log('TestParser begin');
			TestParser.shouldAllEqual(new Map([['', '<!--null-->'], ['  ', '<!--null-->'], ['	', '<!--null-->'], ['   	', '<!--null-->'], ['\n', '<!--null-->'], ['\n\n', '<!--null-->'], ['\r\r\n\r\n\r\t', '<!--null-->'], ['{}', 'Block([])'], ['{{}}', 'Block([Block([])])'], ['{ 0 0 0 }', 'Block([Int(0),Int(0),Int(0)])'], ['0', 'Int(0)'], [' 0 ', 'Int(0)'], ['123', 'Int(123)'], ['12', 'Int(12)'], ['0x1', 'Int(1)'], ['0x0', 'Int(0)'], ['0xF', 'Int(15)'], ['0xFA', 'Int(250)'], ['0xFABCDEF', 'Int(262917615)'], ['0.0', 'Float(0)'], ['0.123', 'Float(0.123)'], ['\'s\'', 'String(s)'], ['\"s\"', 'String(s)']]));
			TestParser.shouldAllEqual(new Map([['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'Block([\n					Int(1),\n					Int(2),\n					Int(3),\n					Binop(\n					Call(Ident(trace),[String(Hello!),String(World!)]),\n					+,\n					Binop(Binop(Int(5),*,Int(6)),/,Int(3)))])'], ['enum Test { Demo } hello World', 'Block([Enum(Type(Test),[NodeTypeValue(Type(Demo))]),\n					Ident(hello),\n					NodeTypeValue(Type(World))])']]));
			TestParser.shouldAllEqual(new Map([['5 * 6 / 3', 'Binop(Binop(Int(5),*,Int(6)),/,Int(3))'], ['5 * 6 / 2 * 3', '\n				Binop(\n					Binop(\n						Int(5),\n						*,\n						Binop(Int(6),/,Int(2))\n					),\n					*,\n					Int(3)\n				)']]));
			TestParser.shouldAllEqual(new Map([['i ++ ++ i', 'Block([Unop(++,true,Ident(i)),Unop(++,false,Ident(i))])'], ['a + b', 'Binop(Ident(a),+,Ident(b))'], ['a += b', 'AssignOp(Ident(a),+,Ident(b))']]));
			TestParser.shouldAllEqual(new Map([['"\\\\(v)"', 'String(\\\\(v))']]));
			TestParser.shouldAllEqualWithoutTrim([]);
			TestParser.shouldAllEqual(new Map([['import "test"', 'Import([],test)'], ['import xxx in "test"', 'Import([Lower(xxx)],test)'], ['import xxx as yyy in "test"', 'Import([Lower(xxx){as}Lower(yyy)],test)'], ['import XXX as YYY in "test"', 'Import([Upper(XXX){as}Upper(YYY)],test)'], ['import * as mmm in "test"', 'Import([*{as}Lower(mmm)],test)'], ['import XXX, YYY as ZZZ, www in "test"', 'Import([Upper(XXX),Upper(YYY){as}Upper(ZZZ),Lower(www)],test)']]));
			TestParser.shouldAllError(['import', 'import hehe', 'import _ as B in "test"', 'import * in "test"', 'import * as B in "test"']);
			TestParser.shouldAllEqual(new Map([['var a = new Array<A>()', 'Var(a,null,New([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)'], ['a = Array<A>.staticField()', 'Binop(Ident(a),=,Call(Dot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))'], ['a = EnumTest.EnumField', 'Binop(Ident(a),=,DotUpper(NodeTypeValue(Type(EnumTest)),EnumField))'], ['a = EnumTest.EnumField(arg)', 'Binop(Ident(a),=,Call(DotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[Ident(arg)]))'], ['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'Binop(Ident(a),=,Call(DotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:Ident(argValue),Ident(arg2),arg3:Ident(arg3)]))'], ['a = EnumTest<A,B>.EnumField', 'Binop(Ident(a),=,DotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))'], ['var a = b as B, c = d as! B, e = f as? B', 'Vars([Var(a,null,As(Ident(b),<!--default-->,Type(B)),false,false),Var(c,null,As(Ident(d),!,Type(B)),false,false),Var(e,null,As(Ident(f),?,Type(B)),false,false)])'], ['var a = b is B, c = d is B, e = f is B', 'Vars([Var(a,null,As(Ident(b),Type(B)),false,false),Var(c,null,As(Ident(d),Type(B)),false,false),Var(e,null,As(Ident(f),Type(B)),false,false)])']]));
			TestParser.shouldAllEqual(new Map([['var x:[Array<T>]', 'Var(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:[Map<K,V> : Array<T>]', 'Var(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:{}, y:[], z:[:], w:()=>{}', 'Vars([Var(x,Object([],[]),null,false,false),Var(y,ParametricType(Array,[Object([],[])]),null,false,false),Var(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),Var(w,Function([],Object([],[])),null,false,false)])'], ['let x:()=>()=>()=>()=>Void', 'Var(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)']]));
			TestParser.shouldAllEqual(new Map([['enum A {}', 'Enum(Type(A),[])'], ['enum A { A B C }', 'Enum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])'], ['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'Enum(Type(A),[\n					Call(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),\n					NodeTypeValue(Type(B)),\n					Call(NodeTypeValue(Type(C)),[v:Map([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])\n					])'], ['enum A { E(v: T<T>?) }', 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])'], ['enum A { E(v: T<T?>) }', 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])'], ['enum A { E(v: T?) }', 'Enum(Type(A),[Call(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])']]));
			TestParser.shouldAllEqual(new Map([['new A(a: 1, b: 2)', 'New([],Type(A),[Int(1),Int(2)],[],[],[a,b])'], ['class A {} var a = new A { } ()', 'Block([Class(Type(A),null,[],[],false),Var(a,null,New([],Type(A),[],[],[],[]),false,false)])'], ['class A { var field: String } var a = new A { field: "Value" } ()', 'Block([Class(Type(A),null,[],[Var(field,Type(String),null,false,false)],false),Var(a,null,New([],Type(A),[],[field],[String(Value)],[]),false,false)])'], ['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'Block([Class(Type(A),null,[],[Var(field,Type(String),null,false,false),Var(otherfield,Type(Int),null,false,false)],false),Var(a,null,New([],Type(A),[],[field,otherfield],[String(Value),Int(25)],[]),false,false)])']]));
			TestParser.shouldAllError(['class A { new(a b) {} }', 'class A { new(a, b,) {} }', 'class A { new(,) {} }', 'fun f(a b c) {}', 'fun f(a b) {}', 'fun f(a, b,) {}', 'fun f(a,) {}', 'fun f(,) {}']);
			TestParser.shouldAllError(['class A { var i: Int { set (value) {} } }', 'class A { var i: Int { get {} set () {} } }', 'class A { var i: Int { get {} set {} } }', 'class A { let i: Int { get {} set (value) {} } }', 'class A { let i: Int { get {} set (value, val) {} } }', 'class A { var i: Int { get {} set (Value) {} } }', 'class A { var i: Int { get (value) {} set (value) {} } }', 'class A { var i: Int {} }']);
			TestParser.shouldAllError(['if(,) {}', 'if(a,) {}', 'switch (,) {}', 'switch (a,) {}', '@att(,) x', '@att(a,) x', '@att(a,b,) x', '@att(a b,) x', '@att(a b) x', 'new T(,)', 'new T(a b,)', 'new T(a,b,)', 'new T(a b)', 'call(1 2)', 'call(1 2,)', 'call(1,2,)', 'call(1,)', 'call(a:1,)', 'call(1:1,)', 'call(a:,)', 'call(a:)', 'call(,)', '[1 2]', '[,]', '[1,]', '[1,2,]', '[1:1 2:2]', '[1:1,2:2,]', '{a:1 b:2}', '{,}', '{a:1,}', '{a:1,b:2,}']);
			TestParser.shouldAllError(['=', '= 1']);
			TestParser.shouldAllEqual(new Map([['if (this) { this }', 'If([This],Block([This]),<!--null-->)'], ['if (this, this) { this } else { break }', 'If([This,This],Block([This]),Block([Break]))'], ['if (this, let a = this) { this } else { break }', 'If([This,Var(a,null,This,true,false)],Block([This]),Block([Break]))'], ['if (let a = this, let b = this, this) { this }', 'If([Var(a,null,This,true,false),Var(b,null,This,true,false),This],Block([This]),<!--null-->)']]));
			TestParser.shouldAllEqual(new Map([['declare var a: T', 'Var(a,Type(T),null,false,true)'], ['declare let a: T', 'Var(a,Type(T),null,true,true)'], ['declare fun name()', 'Function(name,null,[],null,true)'], ['declare fun name() hi()', 'Block([Function(name,null,[],null,true),Call(Ident(hi),[])])'], ['declare fun name() {}', 'Block([Function(name,null,[],null,true),Block([])])'], ['declare class A {}', 'Class(Type(A),null,[],[],true)'], ['declare A = B', 'TypeAlias(Type(A),Type(B))']]));
			TestParser.shouldAllError(['declare var a, b, c', 'declare anything']);
			TestParser.shouldAllEqual(new Map([['push([:])', 'Call(Ident(push),[Map([],[])])'], ['push([])', 'Call(Ident(push),[Array([])])'], ['[].length', 'Dot(Array([]),length)'], ['[:].length', 'Dot(Map([],[]),length)'], ['[[:]]', 'Array([Map([],[])])']]));
			console.log(('TestParser done ' + (Math.round((TestParser.passed / TestParser.overall) * 100)) + '% (' + (TestParser.passed) + '/' + (TestParser.overall) + ')'));
		};
	TestParser.shouldEqual = (input, test) => {
			const test_4650 = TestParser.deepTrim(test);
			TestParser.shouldEqualWithoutTrim(input, test_4650);
		};
	TestParser.shouldEqualWithoutTrim = (input_4652, test_4654) => {
			TestParser.overall++;
			let lexe = Lexer.tokenize(Buffer.from(input_4652), 'TEST');
			try {
				let parsed = Parser.toNode(Parser.parseNodes(lexe, new Project()));
				let res = TestParser.stringify(parsed);
				if (test_4654 != res) { throw ('TestParser test fail: `' + (input_4652) + '`\n!==: `' + (test_4654) + '`\nGot: `' + (res) + '`\nParsed: `' + (parsed) + '`') };
			} catch (temp) {
				if (true) {
				const e = temp
				{
					console.log(e.toString());
					throw ('TestParser test fail: `' + (input_4652) + '` failed to parse');
				} } else

				throw temp;
			};
			TestParser.passed++;
		};
	TestParser.shouldAllEqual = (map) => { for (const input of $toIterator(map.keys())) {
			let test_4661 = map.get(input);
			TestParser.shouldEqual(input, test_4661);
		} };
	TestParser.shouldAllEqualWithoutTrim = (map_4663) => { for (const input of $toIterator(map_4663.keys())) {
			let test_4665 = map_4663.get(input);
			TestParser.shouldEqualWithoutTrim(input, test_4665);
		} };
	TestParser.shouldError = (input_4667) => {
			TestParser.overall++;
			try {
				let lexe_4671 = Lexer.tokenize(Buffer.from(input_4667), 'TEST');
				let parser = Parser.toNode(Parser.parseNodes(lexe_4671, new Project()));
			} catch (temp_4669) {
				if (true) {
				const e = temp_4669
				{
					TestParser.passed++;
					return;
				} } else

				throw temp_4669;
			};
			throw ('TestParser test fail: `' + (input_4667) + '` did not throw exception.');
		};
	TestParser.shouldAllError = (input_4674) => { for (const str of $toIterator(input_4674)) {
			TestParser.shouldError(str);
		} };
	TestParser.deepTrim = (s) => { return s.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('') };
	TestParser.stringifyArray = (nodes) => { return (() => {
			const result = [];
			const value = nodes;
			for (const node of $toIterator(value)) result.push(TestParser.stringify(node));
			return result;
		})().join(',') };
	TestParser.stringify = (node) => {
			const temp_4681 = (node);
			switch (temp_4681&&temp_4681[0]) {
			case null: case undefined: {
				return '<!--null-->'
			} break;

			case 0: {
				const s_4683 = temp_4681[1];
				return ('String(' + (s_4683) + ')')
			} break;

			case 1: {
				const s_4685 = temp_4681[1];
				return ('Ident(' + (s_4685) + ')')
			} break;

			case 2: {
				const b = temp_4681[1];
				return ('Bool(' + (b) + ')')
			} break;

			case 3: {
				return 'This'
			} break;

			case 4: {
				return 'Super'
			} break;

			case 5: {
				const s_4688 = temp_4681[1];
				return ('Int(' + (s_4688) + ')')
			} break;

			case 7: {
				const s_4690 = temp_4681[1];
				return ('Float(' + (s_4690) + ')')
			} break;

			case 8: {
				return 'Null'
			} break;

			case 18: {
				return 'Break'
			} break;

			case 19: {
				return 'Continue'
			} break;

			case 43: {
				const expr = temp_4681[1];
				const type = temp_4681[2];
				return 'As(' + TestParser.stringify(expr) + ',' + TestParser.stringifyType(type) + ')'
			} break;

			case 44: {
				const expr_4694 = temp_4681[1];
				const kind = temp_4681[2];
				const type_4697 = temp_4681[3];
				return 'As(' + TestParser.stringify(expr_4694) + ',' + Token.stringify(kind) + ',' + TestParser.stringifyType(type_4697) + ')'
			} break;

			case 10: {
				const a = temp_4681[1];
				const op = temp_4681[2];
				const b_4701 = temp_4681[3];
				return 'Binop(' + TestParser.stringify(a) + ',' + Token.stringify(op) + ',' + TestParser.stringify(b_4701) + ')'
			} break;

			case 11: {
				const a_4703 = temp_4681[1];
				const op_4705 = temp_4681[2];
				const b_4707 = temp_4681[3];
				return 'AssignOp(' + TestParser.stringify(a_4703) + ',' + Token.stringify(op_4705) + ',' + TestParser.stringify(b_4707) + ')'
			} break;

			case 12: {
				const els = temp_4681[1];
				return 'Block(' + TestParser.stringifyNodeArray(els) + ')'
			} break;

			case 24: {
				const name = temp_4681[1];
				const t = temp_4681[2];
				const expr_4712 = temp_4681[3];
				const const_4714 = temp_4681[4];
				const external = temp_4681[5];
				return ('Var(' + (name) + ',') + (/*?*/((t != null))? (TestParser.stringifyType(t)) : 'null') + ',' + (/*?*/((expr_4712 != null))? (TestParser.stringify(expr_4712)) : 'null') + (',' + (const_4714) + ',' + (external) + ')')
			} break;

			case 25: {
				const vars = temp_4681[1];
				return 'Vars(' + TestParser.stringifyNodeArray(vars) + ')'
			} break;

			case 22: {
				const name_4718 = temp_4681[1];
				const expr_4720 = temp_4681[2];
				const vars_4722 = temp_4681[3];
				const rettype = temp_4681[4];
				const external_4725 = temp_4681[5];
				return ('Function(' + (name_4718) + ',') + (/*?*/(expr_4720 == null)? ('null') : TestParser.stringify(expr_4720)) + ',' + TestParser.stringifyNodeArray(vars_4722) + ',' + (/*?*/((rettype != null))? (TestParser.stringifyType(rettype)) : 'null') + (',' + (external_4725) + ')')
			} break;

			case 23: {
				const expr_4727 = temp_4681[1];
				const vars_4729 = temp_4681[2];
				const rettype_4731 = temp_4681[3];
				return 'Arrow(' + (/*?*/(expr_4727 == null)? ('null') : TestParser.stringify(expr_4727)) + ',' + TestParser.stringifyNodeArray(vars_4729) + ',' + (/*?*/((rettype_4731 != null))? (TestParser.stringifyType(rettype_4731)) : 'null') + ')'
			} break;

			case 13: {
				const e = temp_4681[1];
				const el = temp_4681[2];
				const argNames = temp_4681[3];
				{
					let res_4736 = 'Call(' + TestParser.stringify(e) + ',[';
					{
						let i = 0;
						let it = 0;
						let at = el.length;
						while (it < at) {
							i = it;
							it++;
							{
								res_4736 += /*?*/((argNames[i] == null))? ('') : argNames[i] + ':';
								res_4736 += TestParser.stringify(el[i]) + (/*?*/((i != el.length - 1))? (',') : '');
							};
						};
					};
					return res_4736 + '])';
				}
			} break;

			case 15: {
				const e_4741 = temp_4681[1];
				return 'Parenthesis(' + TestParser.stringify(e_4741) + ')'
			} break;

			case 16: {
				const e_4743 = temp_4681[1];
				return 'Return(' + TestParser.stringify(e_4743) + ')'
			} break;

			case 17: {
				const e_4745 = temp_4681[1];
				return 'Throw(' + TestParser.stringify(e_4745) + ')'
			} break;

			case 39: {
				const t_4747 = temp_4681[1];
				const els_4749 = temp_4681[2];
				return 'Enum(' + TestParser.stringifyType(t_4747) + ',' + TestParser.stringifyNodeArray(els_4749) + ')'
			} break;

			case 36: {
				const path_4751 = temp_4681[1];
				const els_4753 = temp_4681[2];
				return 'Module(' + path_4751 + ',' + TestParser.stringifyNodeArray(els_4753) + ')'
			} break;

			case 37: {
				const els_4755 = temp_4681[1];
				const path_4757 = temp_4681[2];
				{
					const stringifyImportNode = (node_4760) => {
						const temp_4762 = (node_4760);
						switch (temp_4762&&temp_4762[0]) {
						case 0: {
							const name_4764 = temp_4762[1];
							return ('Lower(' + (name_4764) + ')')
						} break;

						case 1: {
							const name_4766 = temp_4762[1];
							return ('Upper(' + (name_4766) + ')')
						} break;

						case 2: {
							return '*'
						} break;

						case 3: {
							const left = temp_4762[1];
							const right = temp_4762[2];
							return stringifyImportNode(left) + '{as}' + stringifyImportNode(right)
						} break;
						};
					};
					return 'Import([' + (() => {
						const result_4770 = [];
						const value_4772 = els_4755;
						for (const p of $toIterator(value_4772)) result_4770.push(stringifyImportNode(p));
						return result_4770;
					})().join(',') + '],' + path_4757 + ')';
				}
			} break;

			case 33: {
				const k = temp_4681[1];
				const v = temp_4681[2];
				return 'Map([' + (() => {
					const result_4776 = [];
					const value_4778 = k;
					for (const p of $toIterator(value_4778)) result_4776.push(TestParser.stringify(p));
					return result_4776;
				})().join(',') + '],[' + (() => {
					const result_4780 = [];
					const value_4782 = v;
					for (const p of $toIterator(value_4782)) result_4780.push(TestParser.stringify(p));
					return result_4780;
				})().join(',') + '])'
			} break;

			case 26: {
				const type_4784 = temp_4681[1];
				const extend = temp_4681[2];
				const implement = temp_4681[3];
				const fields = temp_4681[4];
				const external_4789 = temp_4681[5];
				{
					let res_4791 = 'Class(' + TestParser.stringifyType(type_4784) + ',';
					res_4791 += /*?*/((extend != null))? (TestParser.stringifyType(extend)) : 'null,';
					res_4791 += TestParser.stringifyNodeTypeArray(implement) + ',';
					res_4791 += TestParser.stringifyNodeArray(fields) + ',';
					res_4791 += external_4789 + ')';
					return res_4791;
				}
			} break;

			case 31: {
				const path_4793 = temp_4681[1];
				const t_4795 = temp_4681[2];
				const args = temp_4681[3];
				const names = temp_4681[4];
				const values = temp_4681[5];
				const argNames_4800 = temp_4681[6];
				return 'New([' + path_4793.join('.') + '],' + TestParser.stringifyType(t_4795) + ',' + TestParser.stringifyNodeArray(args) + ',[' + names.join(',') + '],' + TestParser.stringifyNodeArray(values) + ',[' + argNames_4800.join(',') + '])'
			} break;

			case 51: {
				const type_4802 = temp_4681[1];
				return 'NodeTypeValue(' + TestParser.stringifyType(type_4802) + ')'
			} break;

			case 9: {
				const alias = temp_4681[1];
				const value_4805 = temp_4681[2];
				return 'TypeAlias(' + TestParser.stringifyType(alias) + ',' + TestParser.stringifyType(value_4805) + ')'
			} break;

			case 29: {
				const l = temp_4681[1];
				const r = temp_4681[2];
				return 'Dot(' + TestParser.stringify(l) + ',' + r + ')'
			} break;

			case 30: {
				const l_4809 = temp_4681[1];
				const r_4811 = temp_4681[2];
				return 'DotUpper(' + TestParser.stringify(l_4809) + ',' + r_4811 + ')'
			} break;

			case 48: {
				const expr_4813 = temp_4681[1];
				return 'Private(' + TestParser.stringify(expr_4813) + ')'
			} break;

			case 14: {
				const econd = temp_4681[1];
				const eif = temp_4681[2];
				const eelse = temp_4681[3];
				return 'If(' + TestParser.stringifyNodeArray(econd) + ',' + TestParser.stringify(eif) + ',' + TestParser.stringify(eelse) + ')'
			} break;

			case 32: {
				const el_4818 = temp_4681[1];
				return 'Array(' + TestParser.stringifyNodeArray(el_4818) + ')'
			} break;

			case 20: {
				const op_4820 = temp_4681[1];
				const postfix = temp_4681[2];
				const e_4823 = temp_4681[3];
				return 'Unop(' + Token.stringify(op_4820) + ',' + postfix + ',' + TestParser.stringify(e_4823) + ')'
			} break;

			default:
			throw '<!--' + node + '-->'
			};
		};
	TestParser.stringifyNodeArray = (arr) => { return '[' + (() => {
			const result_4826 = [];
			const value_4828 = arr;
			for (const e of $toIterator(value_4828)) result_4826.push(TestParser.stringify(e));
			return result_4826;
		})().join(',') + ']' };
	TestParser.stringifyNodeTypeArray = (arr_4830) => { return '[' + (() => {
			const result_4832 = [];
			const value_4834 = arr_4830;
			for (const e of $toIterator(value_4834)) result_4832.push(TestParser.stringifyType(e));
			return result_4832;
		})().join(',') + ']' };
	TestParser.stringifyType = (node_4836) => {
			const temp_4838 = (node_4836);
			switch (temp_4838&&temp_4838[0]) {
			case 1: {
				const s_4840 = temp_4838[1];
				return ('Type(' + (s_4840) + ')')
			} break;

			case 2: {
				const name_4842 = temp_4838[1];
				const params = temp_4838[2];
				return ('ParametricType(' + (name_4842) + ',[') + (() => {
					const result_4845 = [];
					const value_4847 = params;
					for (const p of $toIterator(value_4847)) result_4845.push(TestParser.stringifyType(p));
					return result_4845;
				})().join(',') + '])'
			} break;

			case 3: {
				const args_4849 = temp_4838[1];
				const rettype_4851 = temp_4838[2];
				return 'Function([' + (() => {
					const result_4853 = [];
					const value_4855 = args_4849;
					for (const e of $toIterator(value_4855)) result_4853.push(TestParser.stringifyType(e));
					return result_4853;
				})().join(',') + '],' + TestParser.stringifyType(rettype_4851) + ')'
			} break;

			case 5: {
				const names_4857 = temp_4838[1];
				const types = temp_4838[2];
				return 'Object([' + names_4857.join(',') + '],[' + (() => {
					const result_4860 = [];
					const value_4862 = types;
					for (const e of $toIterator(value_4862)) result_4860.push(TestParser.stringifyType(e));
					return result_4860;
				})().join(',') + '])'
			} break;

			case 0: {
				const type_4864 = temp_4838[1];
				return 'Optional(' + TestParser.stringifyType(type_4864) + ')'
			} break;

			default:
			throw '<!--' + node_4836 + '-->'
			};
		};
	var GenJs = class {
		constructor() {
			this.extension = '.js'
			this.nativeEnums = false
			this.toIterator = false
			this.tabs = '\t\t'
			this.globalAccessor = ''
			this.reserved = ['with', 'const', 'instanceof', 'typeof', 'delete', 'undefined', 'package_TODO', 'async', 'await', 'arguments']
			this.bi = 0
		{
		} };
		perform(normalizer) {
			this.project = normalizer;
			return this.stringify();
		};
		stringify() {
			const out = ['// Generated by Hexa https://hexalang.github.io\nprintf=console.log\n'];
			if (this.project.package.addLicenseNoticeToOutput) {
				out.push(('// ' + (this.project.package.name) + '\n'));
				out.push(('// LICENSE ' + (this.project.package.license) + '\n'));
			} else {
				out.push('// The generated code is subject to the original license\n');
			};
			out.push('\nprintInt=(v)=>console.log(v,v,v)\n');
			out.push(';(function() {\n\t"use strict"\n\tconst $global = typeof(window) === "undefined"? global : window');
			out.push('\n\tif (typeof($global.require) === "undefined") { $global.require = function () {} };');
			const constantsIndex = out.length;
			const constants = [];
			out.push('');
			for (const e of $toIterator(this.project.enumsSimple)) {
				if (e.staticVars.length + e.staticMethods.length == 0) { continue };
				out.push('\n\tvar ' + e.name + ' = {');
				for (const v of $toIterator(e.staticMethods)) {
					const temp = (v);
					switch (temp&&temp[0]) {
					case 5: {
						const name = temp[1];
						const expr = temp[2];
						const args = temp[3];
						const defaults = temp[4];
						{
							out.push('\n\t\t' + name + ': ');
							out.push(this.printFunctionArguments(args, defaults) + ' => { ' + this.printStatement(expr) + ' }');
							out.push(',');
						}
					} break;
					};
				};
				out.push('\n\t}');
				for (const v of $toIterator(e.staticVars)) {
					const temp_4930 = (v);
					switch (temp_4930&&temp_4930[0]) {
					case 3: {
						const name_4932 = temp_4930[1];
						const expr_4934 = temp_4930[2];
						{
							out.push('\n\t' + e.name + '.' + name_4932);
							if (expr_4934 != null) { out.push(' = ' + this.printExpression(expr_4934)) };
						}
					} break;

					case 4: {
						const name_4936 = temp_4930[1];
						const expr_4938 = temp_4930[2];
						{
							out.push('\n\t' + e.name + '.' + name_4936);
							out.push(' = ' + this.printExpression(expr_4938));
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				if ((e.staticMethods.length == 0) && (e.names.length == 0)) { out.push('\n\tvar ' + e.name + ' = {}') } else {
					out.push('\n\tvar ' + e.name + ' = {');
					for (const v of $toIterator(e.staticMethods)) {
						const temp_4940 = (v);
						switch (temp_4940&&temp_4940[0]) {
						case 5: {
							const name_4942 = temp_4940[1];
							const expr_4944 = temp_4940[2];
							const args_4946 = temp_4940[3];
							const defaults_4948 = temp_4940[4];
							{
								out.push('\n\t\t' + name_4942 + ': ');
								out.push(this.printFunctionArguments(args_4946, defaults_4948) + ' => { ' + this.printStatement(expr_4944) + ' }');
								out.push(',');
							}
						} break;
						};
					};
					let i = 0;
					for (const name of $toIterator(e.names)) {
						if (e.constructors[i] != null) {
							out.push('\n\t\t' + name + ': ');
							out.push('(' + e.constructors[i].join(',') + ')=>[');
							out.push('' + i + ',' + e.constructors[i].join(','));
							out.push('],');
						};
						i++;
					};
					out.push('\n\t}');
				};
				let i_4951 = 0;
				for (const name of $toIterator(e.names)) {
					if (e.constructors[i_4951] != null) {} else {
						out.push('\n\tObject.defineProperty(' + e.name + ', "' + name + '", { get: function() { return [' + i_4951 + '] }})');
					};
					i_4951++;
				};
				for (const v of $toIterator(e.staticVars)) {
					const temp_4953 = (v);
					switch (temp_4953&&temp_4953[0]) {
					case 3: {
						const name_4955 = temp_4953[1];
						const expr_4957 = temp_4953[2];
						{
							out.push('\n\t' + e.name + '.' + name_4955);
							if (expr_4957 != null) { out.push(' = ' + this.printExpression(expr_4957)) };
						}
					} break;

					case 4: {
						const name_4959 = temp_4953[1];
						const expr_4961 = temp_4953[2];
						{
							out.push('\n\t' + e.name + '.' + name_4959);
							out.push(' = ' + this.printExpression(expr_4961));
						}
					} break;
					};
				};
			};
			for (const i of $toIterator(this.project.interfaces)) {
				throw i;
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.useless) { continue };
				if (c.external) {
					if (c.jsRequire != null) {
						constants.push('\n\t' + 'const ' + c.name + ' = require("' + c.jsRequire + '")');
						continue;
					};
					{
						let step = 0;
						const jsNative = c.jsNative;
						let temp_4965 = null;
						if (step == 0 && jsNative != null) {
							temp_4965 = jsNative != c.name;
							step = 1;
						};
						if (step == 1 && temp_4965 != false) { step = 2 };
						if (step == 2) { out.push('\n\t' + 'var ' + c.name + ' = $global.' + jsNative) };
					};
					continue;
				};
				out.push('\n\t' + 'var ' + c.name + ' = class');
				{
					let step_4967 = 0;
					const extend = c.extend;
					if (step_4967 == 0 && extend != null) { step_4967 = 1 };
					if (step_4967 == 1) { out.push(' extends ' + extend) };
				};
				out.push(' {');
				for (const v of $toIterator(c.methods)) {
					const temp_4970 = (v);
					switch (temp_4970&&temp_4970[0]) {
					case 5: {
						const name_4972 = temp_4970[1];
						const expr_4974 = temp_4970[2];
						const args_4976 = temp_4970[3];
						{
							if (name_4972 == null || name_4972 == 'new') { out.push('\n\t\tconstructor') } else {
								out.push('\n\t\t' + name_4972);
							};
							out.push('(' + args_4976.join(', ') + ') ');
							if ((name_4972 == null || name_4972 == 'new') && (c.vars.length > 0)) {
								out.push('{ ');
								for (const v of $toIterator(c.vars)) {
									const temp_4978 = (v);
									switch (temp_4978&&temp_4978[0]) {
									case 3: {
										const name_4980 = temp_4978[1];
										const expr_4982 = temp_4978[2];
										if (expr_4982 != null) { out.push('\n\t\t\tthis.' + name_4980 + ' = ' + this.printExpression(expr_4982) + '') }
									} break;

									case 4: {
										const name_4984 = temp_4978[1];
										const expr_4986 = temp_4978[2];
										if (expr_4986 != null) { out.push('\n\t\t\tthis.' + name_4984 + ' = ' + this.printExpression(expr_4986) + '') }
									} break;
									};
								};
								out.push('\n\t\t');
								out.push(this.printStatement(expr_4974) + ' };');
							} else {
								out.push(this.printBlock(expr_4974) + ';');
							};
						}
					} break;
					};
				};
				for (const name of $toIterator(c.property)) {
					out.push('\n\t\tget ' + name + ('() { return this.get_' + (name) + '(); };'));
					out.push('\n\t\tset ' + name + ('(value) { return this.set_' + (name) + '(value); };'));
				};
				out.push('\n\t}');
				for (const v of $toIterator(c.staticVars)) {
					const temp_4988 = (v);
					switch (temp_4988&&temp_4988[0]) {
					case 3: {
						const name_4990 = temp_4988[1];
						const expr_4992 = temp_4988[2];
						{
							out.push('\n\t' + c.name + '.' + name_4990);
							if (expr_4992 != null) { out.push(' = ' + this.printExpression(expr_4992)) };
						}
					} break;

					case 4: {
						const name_4994 = temp_4988[1];
						const expr_4996 = temp_4988[2];
						{
							out.push('\n\t' + c.name + '.' + name_4994);
							out.push(' = ' + this.printExpression(expr_4996));
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticMethods)) {
					const temp_4998 = (v);
					switch (temp_4998&&temp_4998[0]) {
					case 5: {
						const name_5000 = temp_4998[1];
						const expr_5002 = temp_4998[2];
						const args_5004 = temp_4998[3];
						const defaults_5006 = temp_4998[4];
						{
							out.push('\n\t' + c.name + '.' + name_5000 + ' = ');
							out.push(this.printFunctionArguments(args_5004, defaults_5006) + ' => ' + this.printBlock(expr_5002) + ';');
						}
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalFuncs)) {
				const temp_5008 = (g);
				switch (temp_5008&&temp_5008[0]) {
				case 5: {
					const name_5010 = temp_5008[1];
					const expr_5012 = temp_5008[2];
					const args_5014 = temp_5008[3];
					const defaults_5016 = temp_5008[4];
					{
						out.push('\n\tfunction ' + name_5010);
						out.push(this.printFunctionArguments(args_5014, defaults_5016) + ' ' + this.printBlock(expr_5012) + ';');
					}
				} break;
				};
			};
			for (const g of $toIterator(this.project.globalVars)) {
				const temp_5018 = (g);
				switch (temp_5018&&temp_5018[0]) {
				case 3: {
					const name_5020 = temp_5018[1];
					const expr_5022 = temp_5018[2];
					{
						out.push('\n\tvar ' + name_5020);
						if (expr_5022 != null) { out.push(' = ' + this.printExpression(expr_5022)) } else {
							out.push(' = null');
						};
					}
				} break;

				case 4: {
					const name_5024 = temp_5018[1];
					const expr_5026 = temp_5018[2];
					out.push('\n\tvar ' + name_5024 + ' = ' + this.printExpression(expr_5026))
				} break;
				};
			};
			for (const init of $toIterator(this.project.init)) {
				out.push('\n\t{\n\t\t');
				out.push(this.printStatement(init));
				out.push('\n\t}');
			};
			if (this.toIterator) { constants.unshift('\n\tfunction $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };') };
			out[constantsIndex] = constants.join('');
			out.push('\n})();\n');
			return out.join('');
		};
		pushTab() { this.tabs += '\t' };
		popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
		printBlock(s) {
			const temp_5029 = (s);
			switch (temp_5029&&temp_5029[0]) {
			case 1: {
				const el = temp_5029[1];
				{
					if (el.length == 1) {
						const temp_5032 = (el[0]);
						switch (temp_5032&&temp_5032[0]) {
						case 1: {
							return this.printStatement(el[0])
						} break;
						};
					};
					if (el.length == 1) { return '{ ' + this.printStatement(el[0]) + ' }' };
					if (el.length == 0) { return '{}' };
					return this.printStatement(s);
				}
			} break;

			default:
			return '{ ' + this.printStatement(s) + ' }'
			};
		};
		printStatement(s_5034) {
			{
				const temp_5036 = (s_5034);
				switch (temp_5036&&temp_5036[0]) {
				case 0: {
					const els = temp_5036[1];
					{
						let r = '';
						for (const s of $toIterator(els)) {
							if (s != null) { r += '\n' + this.tabs + this.printStatement(s) + ';' };
						};
						return r;
					}
				} break;

				case 18: {
					return 'break'
				} break;

				case 17: {
					return 'continue'
				} break;

				case 1: {
					const el_5040 = temp_5036[1];
					{
						if (el_5040.length == 1) {
							const temp_5042 = (el_5040[0]);
							switch (temp_5042&&temp_5042[0]) {
							case 1: {
								return this.printStatement(el_5040[0])
							} break;
							};
						};
						this.pushTab();
						let r_5044 = '{';
						for (const e of $toIterator(el_5040)) {
							const temp_5046 = (e);
							switch (temp_5046&&temp_5046[0]) {
							case null: case undefined: {
								{
								}
							} break;

							case 0: {
								const els_5048 = temp_5046[1];
								for (const s of $toIterator(els_5048)) {
									if (s != null) { r_5044 += '\n' + this.tabs + this.printStatement(s) + ';' };
								}
							} break;

							default:
							r_5044 += '\n' + this.tabs + this.printStatement(e) + ';'
							};
						};
						this.popTab();
						return r_5044 + '\n' + this.tabs + '}';
					}
				} break;

				case 4: {
					const name_5050 = temp_5036[1];
					const expr_5052 = temp_5036[2];
					return 'const ' + name_5050 + (/*?*/(expr_5052 == null)? (' = null') : ' = ' + this.printExpression(expr_5052))
				} break;

				case 3: {
					const name_5054 = temp_5036[1];
					const expr_5056 = temp_5036[2];
					return 'let ' + name_5054 + (/*?*/(expr_5056 == null)? ('') : ' = ' + this.printExpression(expr_5056))
				} break;

				case 5: {
					const name_5058 = temp_5036[1];
					const expr_5060 = temp_5036[2];
					const args_5062 = temp_5036[3];
					const defaults_5064 = temp_5036[4];
					return 'const ' + name_5058 + ' = ' + this.printFunctionArguments(args_5062, defaults_5064) + ' => ' + this.printBlock(expr_5060)
				} break;

				case 6: {
					const e = temp_5036[1];
					{
						if (e == null) { return 'return' };
						return 'return ' + this.printExpression(e);
					}
				} break;

				case 7: {
					const econd = temp_5036[1];
					const eif = temp_5036[2];
					const eelse = temp_5036[3];
					{
						let r_5070 = 'if (' + this.printExpression(econd) + ') ' + this.printBlock(eif);
						if (eelse != null) { r_5070 += ' else ' + this.printStatement(eelse) };
						return r_5070;
					}
				} break;

				case 2: {
					const e_5072 = temp_5036[1];
					const args_5074 = temp_5036[2];
					return this.printExpression(e_5072) + this.printCallArguments(args_5074)
				} break;

				case 19: {
					const args_5076 = temp_5036[1];
					return 'super' + this.printCallArguments(args_5076)
				} break;

				case 8: {
					const expr_5078 = temp_5036[1];
					const t = temp_5036[2];
					const v = temp_5036[3];
					const catches = temp_5036[4];
					const temp_5083 = temp_5036[5];
					{
						let r_5085 = 'try ';
						r_5085 += this.printBlock(expr_5078);
						r_5085 += (' catch (' + (temp_5083) + ') {\n') + this.tabs + '\t';
						this.pushTab();
						{
							let i_5087 = 0;
							let it = 0;
							let at = catches.length;
							while (it < at) {
								i_5087 = it;
								it++;
								{
									let typeof_5091 = 'T';
									{
										const temp_5093 = (t[i_5087]);
										switch (temp_5093&&temp_5093[0]) {
										case 4: {
											const type = temp_5093[1];
											typeof_5091 = type.name
										} break;

										default:
										throw '' + t[i_5087]
										};
									};
									{
										const temp_5096 = (typeof_5091);
										switch (temp_5096) {
										case 'Any': {
											r_5085 += 'if (true) { '
										} break;

										case 'String': {
											r_5085 += ('if (typeof(' + (temp_5083) + ') == \"string\") { ')
										} break;

										case 'Int': {
											r_5085 += ('if (typeof(' + (temp_5083) + ') == \"number\") { ')
										} break;

										case 'Float': {
											r_5085 += ('if (typeof(' + (temp_5083) + ') == \"number\") { ')
										} break;

										case 'Bool': {
											r_5085 += ('if (typeof(' + (temp_5083) + ') == \"boolean\") { ')
										} break;

										default:
										r_5085 += ('if (' + (temp_5083) + ' instanceof ' + (typeof_5091) + ') { ')
										};
									};
									r_5085 += '\n' + this.tabs;
									r_5085 += ('const ' + (v[i_5087]) + ' = ' + (temp_5083) + '');
									r_5085 += '\n' + this.tabs;
									r_5085 += this.printStatement(catches[i_5087]);
									r_5085 += ' }';
									r_5085 += ' else';
									r_5085 += '\n' + this.tabs;
								};
							};
						};
						r_5085 += '\n' + this.tabs + ('throw ' + (temp_5083) + ';');
						this.popTab();
						return r_5085 + '\n' + this.tabs + '}';
					}
				} break;

				case 10: {
					const a = temp_5036[1];
					const v_5099 = temp_5036[2];
					return this.printExpression(a) + ' = ' + this.printExpression(v_5099)
				} break;

				case 9: {
					const e_5101 = temp_5036[1];
					return 'throw ' + this.printExpression(e_5101)
				} break;

				case 12: {
					const name_5103 = temp_5036[1];
					const over = temp_5036[2];
					const by = temp_5036[3];
					{
						this.toIterator = true;
						return 'for (const ' + name_5103 + ' of $toIterator(' + this.printExpression(over) + ')) ' + this.printStatement(by);
					}
				} break;

				case 14: {
					const e_5107 = temp_5036[1];
					return this.printExpression(e_5107) + '++'
				} break;

				case 15: {
					const e_5109 = temp_5036[1];
					return this.printExpression(e_5109) + '--'
				} break;

				case 13: {
					const econd_5111 = temp_5036[1];
					const e_5113 = temp_5036[2];
					const pre = temp_5036[3];
					{
						if (pre) { return 'while (' + this.printExpression(econd_5111) + ') ' + this.printStatement(e_5113) };
						return 'do {' + this.printStatement(e_5113) + '} while (' + this.printExpression(econd_5111) + ')';
					}
				} break;

				case 11: {
					const a_5116 = temp_5036[1];
					const op = temp_5036[2];
					const value = temp_5036[3];
					return this.printExpression(a_5116) + ' ' + Token.stringify(op) + '= ' + this.printExpression(value)
				} break;

				case 16: {
					const expr_5120 = temp_5036[1];
					const cases = temp_5036[2];
					const statements = temp_5036[3];
					const guards = temp_5036[4];
					const binds = temp_5036[5];
					{
						let r_5126 = 'switch (' + this.printExpression(expr_5120) + ') {';
						{
							let i_5128 = 0;
							let it_5130 = 0;
							let at_5132 = cases.length;
							while (it_5130 < at_5132) {
								i_5128 = it_5130;
								it_5130++;
								{
									if (cases[i_5128].length > 0) {
										r_5126 += '\n' + this.tabs;
										for (const cc of $toIterator(cases[i_5128])) {
											const temp_5134 = (cc);
											switch (temp_5134&&temp_5134[0]) {
											case 9: {
												r_5126 += 'case null: case undefined: '
											} break;

											default:
											r_5126 += 'case ' + this.printExpression(cc) + ': '
											};
										};
										this.pushTab();
										r_5126 += '{\n' + this.tabs;
										{
											let step_5136 = 0;
											const binders = binds[i_5128];
											if (step_5136 == 0 && binders != null) { step_5136 = 1 };
											if (step_5136 == 1) { for (const bind of $toIterator(binders)) {
												r_5126 += this.printStatement(bind) + ';\n' + this.tabs;
											} };
										};
										{
											let step_5139 = 0;
											const guard = guards[i_5128];
											if (step_5139 == 0 && guard != null) { step_5139 = 1 };
											if (step_5139 == 1) {
												this.pushTab();
												r_5126 += 'if (' + this.printExpression(guard) + ') {\n' + this.tabs;
											};
										};
										r_5126 += this.printStatement(statements[i_5128]);
										this.popTab();
										{
											let step_5142 = 0;
											const guard_5144 = guards[i_5128];
											if (step_5142 == 0 && guard_5144 != null) { step_5142 = 1 };
											if (step_5142 == 1) {
												this.popTab();
												r_5126 += '\n\t' + this.tabs + 'break; } }\n' + this.tabs;
											} else {
												r_5126 += '\n' + this.tabs + '} break;\n' + this.tabs;
											};
										};
									};
								};
							};
						};
						{
							let i_5146 = 0;
							let it_5148 = 0;
							let at_5150 = cases.length;
							while (it_5148 < at_5150) {
								i_5146 = it_5148;
								it_5148++;
								{
									if (cases[i_5146].length == 0) {
										r_5126 += '\n' + this.tabs + 'default: ';
										r_5126 += '\n' + this.tabs;
										r_5126 += this.printStatement(statements[i_5146]);
										r_5126 += '\n' + this.tabs;
									};
								};
							};
						};
						return r_5126 + '}';
					}
				} break;

				case null: case undefined: {
					console.error('Got null statement kind in JavaScript generator, probably unsupported feature was used, ignoring')
				} break;

				default:
				console.error('Unknown statement kind:', ((() => {
					const result = s_5034;
					if (result != null) { return result };
					return [];
				})())[0])
				};
			};
			return '{/* undefined */}';
		};
		printCallArguments(args_5153) { return '(' + (() => {
			const result_5155 = [];
			const value_5157 = args_5153;
			for (const a of $toIterator(value_5157)) result_5155.push(this.printExpression(a));
			return result_5155;
		})().join(', ') + ')' };
		printFunctionArguments(args_5159, defaults_5161) { return '(' + (() => {
			const result_5163 = [];
			const value_5165 = args_5159.length;
			for (const a of $toIterator(value_5165)) result_5163.push(args_5159[a] + (/*?*/((defaults_5161 != null && defaults_5161[a] != null))? (' = ' + this.printExpression(defaults_5161[a])) : ''));
			return result_5163;
		})().join(', ') + ')' };
		printExpression(e_5167) {
			{
				const temp_5169 = (e_5167);
				switch (temp_5169&&temp_5169[0]) {
				case 9: {
					return 'null'
				} break;

				case 10: {
					return 'this'
				} break;

				case 6: {
					const name_5171 = temp_5169[1];
					return name_5171
				} break;

				case 1: {
					const v_5173 = temp_5169[1];
					return '' + v_5173
				} break;

				case 2: {
					const v_5175 = temp_5169[1];
					const meta = temp_5169[2];
					const type_5178 = temp_5169[3];
					return '' + v_5175 + 'n'
				} break;

				case 3: {
					const v_5180 = temp_5169[1];
					return '' + v_5180
				} break;

				case 0: {
					const s_5182 = temp_5169[1];
					{
						const s_5184 = s_5182.split('');
						const charsOut = [];
						while ((s_5184.length > 0)) {
							const temp_5187 = (s_5184[0]);
							switch (temp_5187) {
							case '\'': {
								{
									charsOut.push('\\');
									charsOut.push('\'');
									s_5184.shift();
								}
							} break;

							case '\n': {
								{
									charsOut.push('\\n');
									s_5184.shift();
								}
							} break;

							case '\r': {
								{
									charsOut.push('\\r');
									s_5184.shift();
								}
							} break;

							case '\\': {
								{
									s_5184.shift();
									if (s_5184[0] == '\'') {
										charsOut.push('\\\'');
										s_5184.shift();
									} else if (s_5184[0] == '"') {
										charsOut.push('\\"');
										s_5184.shift();
									} else if (s_5184[0] == '\\') {
										charsOut.push('\\\\');
										s_5184.shift();
									} else {
										charsOut.push('\\');
									};
								}
							} break;

							default:
							{
								charsOut.push(s_5184[0]);
								s_5184.shift();
							}
							};
						};
						return '\'' + charsOut.join('') + '\'';
					}
				} break;

				case 4: {
					return 'true'
				} break;

				case 5: {
					return 'false'
				} break;

				case 11: {
					const expr_5189 = temp_5169[1];
					const name_5191 = temp_5169[2];
					{
						{
							const temp_5193 = (expr_5189);
							switch (temp_5193&&temp_5193[0]) {
							case 1: {
								return '(' + this.printExpression(expr_5189) + ').' + name_5191
							} break;

							case 3: {
								return '(' + this.printExpression(expr_5189) + ').' + name_5191
							} break;
							};
						};
						return this.printExpression(expr_5189) + '.' + name_5191;
					}
				} break;

				case 14: {
					const e_5195 = temp_5169[1];
					const args_5197 = temp_5169[2];
					return this.printExpression(e_5195) + this.printCallArguments(args_5197)
				} break;

				case 17: {
					const name_5199 = temp_5169[1];
					const expr_5201 = temp_5169[2];
					const args_5203 = temp_5169[3];
					const defaults_5205 = temp_5169[4];
					{
						if (name_5199 == null) { return this.printFunctionArguments(args_5203, defaults_5205) + ' => ' + this.printBlock(expr_5201) };
						return '((() => { const ' + name_5199 + ' = ' + this.printFunctionArguments(args_5203, defaults_5205) + ' => ' + this.printBlock(expr_5201) + '; return ' + name_5199 + ' })())';
					}
				} break;

				case 18: {
					const expr_5207 = temp_5169[1];
					const args_5209 = temp_5169[2];
					const defaults_5211 = temp_5169[3];
					return this.printFunctionArguments(args_5209, defaults_5211) + ' => (' + this.printExpression(expr_5207) + ')'
				} break;

				case 15: {
					const e_5213 = temp_5169[1];
					const args_5215 = temp_5169[2];
					return 'new ' + this.printExpression(e_5213) + this.printCallArguments(args_5215)
				} break;

				case 21: {
					const el_5217 = temp_5169[1];
					return '[' + (() => {
						const result_5219 = [];
						const value_5221 = el_5217;
						for (const a of $toIterator(value_5221)) result_5219.push(this.printExpression(a));
						return result_5219;
					})().join(', ') + ']'
				} break;

				case 23: {
					const op_5223 = temp_5169[1];
					const postfix = temp_5169[2];
					const e_5226 = temp_5169[3];
					{
						if (postfix) { return '(' + this.printExpression(e_5226) + Token.stringify(op_5223) + ')' };
						return '(' + Token.stringify(op_5223) + this.printExpression(e_5226) + ')';
					}
				} break;

				case 24: {
					const nullable = temp_5169[1];
					const othewise = temp_5169[2];
					return '((' + this.printExpression(nullable) + ') || (' + this.printExpression(othewise) + '))'
				} break;

				case 19: {
					const e_5230 = temp_5169[1];
					return '(' + this.printExpression(e_5230) + ')'
				} break;

				case 16: {
					const a_5232 = temp_5169[1];
					const op_5234 = temp_5169[2];
					const b = temp_5169[3];
					{
						const bn = (this.bi++);
						return '' + this.printExpression(a_5232) + ' ' + Token.stringify(op_5234) + ' ' + this.printExpression(b) + '';
						return '(' + this.printExpression(a_5232) + ' ' + Token.stringify(op_5234) + ' ' + this.printExpression(b) + ')';
						return ('/*bi' + (bn) + '(*/') + this.printExpression(a_5232) + ' ' + Token.stringify(op_5234) + ' ' + this.printExpression(b) + ('/*)bi' + (bn) + '*/');
					}
				} break;

				case 26: {
					const expr_5238 = temp_5169[1];
					const index = temp_5169[2];
					return this.printExpression(expr_5238) + '[' + this.printExpression(index) + ']'
				} break;

				case 25: {
					const econd_5241 = temp_5169[1];
					const eif_5243 = temp_5169[2];
					const eelse_5245 = temp_5169[3];
					{
						let r_5247 = '';
						try {
							r_5247 += '/*?*/(' + this.printExpression(econd_5241) + ')?';
							r_5247 += ' (' + this.printExpression(eif_5243) + ')';
							r_5247 += ' : ' + this.printExpression(eelse_5245);
							return r_5247;
						} catch (temp_5249) {
							if (true) {
							const error = temp_5249
							{
								console.log('If =>', e_5167, error);
								return r_5247 + '<!-- If => error -->';
							} } else

							throw temp_5249;
						};
					}
				} break;

				case 31: {
					const expr_5251 = temp_5169[1];
					{
						const e_5253 = this.printExpression(expr_5251);
						return e_5253 + '&&' + e_5253 + '[0]';
					}
				} break;

				case 20: {
					const names = temp_5169[1];
					const el_5256 = temp_5169[2];
					return '{' + (() => {
						const result_5258 = [];
						const value_5260 = el_5256.length;
						for (const i of $toIterator(value_5260)) result_5258.push(((names[i]) + ':' + this.printExpression(el_5256[i])));
						return result_5258;
					})().join(', ') + '}'
				} break;

				case 22: {
					const keys = temp_5169[1];
					const values = temp_5169[2];
					{
						if (keys.length == 0) { return 'new Map()' };
						return 'new Map([' + (() => {
							const result_5264 = [];
							const value_5266 = keys.length;
							for (const i of $toIterator(value_5266)) result_5264.push('[' + this.printExpression(keys[i]) + ', ' + this.printExpression(values[i]) + ']');
							return result_5264;
						})().join(', ') + '])';
					}
				} break;

				case 29: {
					const a_5268 = temp_5169[1];
					const op_5270 = temp_5169[2];
					const value_5272 = temp_5169[3];
					return this.printExpression(a_5268) + ' ' + Token.stringify(op_5270) + '= ' + this.printExpression(value_5272)
				} break;

				case 30: {
					const kind = temp_5169[1];
					const args_5275 = temp_5169[2];
					const s_5277 = temp_5169[3];
					{
						const temp_5279 = (kind);
						switch (temp_5279) {
						case 0: {
							return '((' + this.printExpression(args_5275[0]) + ') ' + s_5277 + ' (' + this.printExpression(args_5275[1]) + '))'
						} break;

						case 1: {
							return s_5277 + this.printCallArguments(args_5275)
						} break;

						case 2: {
							return '(' + s_5277 + '(' + this.printExpression(args_5275[0]) + '))'
						} break;

						case 3: {
							return '((' + this.printExpression(args_5275[1]) + ')' + s_5277 + ')'
						} break;
						};
					}
				} break;

				case 27: {
					const e_5281 = temp_5169[1];
					const t_5283 = temp_5169[2];
					return '(' + this.printExpression(e_5281) + ')'
				} break;

				case 28: {
					const e_5285 = temp_5169[1];
					const t_5287 = temp_5169[2];
					return '((' + this.printExpression(e_5285) + ') instanceof ' + Type.stringify(t_5287) + ')'
				} break;

				case 32: {
					const type_5289 = temp_5169[1];
					const tagName = temp_5169[2];
					const tag = temp_5169[3];
					const args_5293 = temp_5169[4];
					{
						if (args_5293.length == 0) { return ('/*' + (tagName) + '*/[') + this.printExpression(tag) + ']' };
						return (('/*' + (tagName) + '*/[') + this.printExpression(tag) + ',' + (() => {
							const result_5295 = [];
							const value_5297 = args_5293;
							for (const a of $toIterator(value_5297)) result_5295.push(this.printExpression(a));
							return result_5295;
						})().join(',') + ',"' + this.project.expressionPosition.get(e_5167).fileName.split('\\').join('/') + ':' + this.project.expressionPosition.get(e_5167).line + '"]');
						return (('/*' + (tagName) + '*/[') + this.printExpression(tag) + ',' + (() => {
							const result_5299 = [];
							const value_5301 = args_5293;
							for (const a of $toIterator(value_5301)) result_5299.push(this.printExpression(a));
							return result_5299;
						})().join(',') + ']');
					}
				} break;

				case 33: {
					const expr_5303 = temp_5169[1];
					const index_5305 = temp_5169[2];
					return this.printExpression(expr_5303) + '[' + (1 + index_5305) + ']'
				} break;

				case null: case undefined: {
					console.error('Got null expression kind in JavaScript generator, probably unsupported feature was used, ignoring')
				} break;

				default:
				console.error('Unknown expression kind:', ((() => {
					const result_5307 = e_5167;
					if (result_5307 != null) { return result_5307 };
					return [];
				})())[0], e_5167)
				};
			};
			return '{/* undefined */}';
		};
	}
	GenJs.spawn = () => { return new GenJs() };
	var GenCxx = class {
		constructor() {
			this.globalAccessor = ''
			this.declarationsOfFunctions = []
			this.declarationsOfOpaqueTypes = []
			this.declarationsOfFullTypes = []
			this.declarationsOfStringsMap = new Map()
			this.declarationsOfStrings = []
			this.forwardFunctions = []
			this.typedefFunctions = []
			this.globalFunctions = []
			this.types = []
			this.tabs = ''
			this.reserved = []
			this.currentReturnType = null
			this.metaBlock = []
			this.tempId = 0
			this.last = ''
			this.thisArgument = null
			this.customThis = null
		{
		} };
		perform(normalizer) {
			this.project = normalizer;
			return this.stringify();
		};
		stringify() {
			const header = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io')];
			if (this.project.package.addLicenseNoticeToOutput) {
				header.push(('// ' + (this.project.package.name) + ''));
				header.push(('// LICENSE ' + (this.project.package.license) + ''));
			} else {
				header.push('// The generated code is subject to the original license');
			};
			header.push(Fs.readFileSync(__dirname + '/library/cxx/hexa.cpp').toString('utf8').split('\r\n').join('\n'));
			const out = [];
			const forward = [];
			this.registerString('false');
			this.declarationsOfStringsMap.set('false', 0);
			this.registerString('true');
			this.declarationsOfStringsMap.set('true', 1);
			this.registerString('null');
			this.declarationsOfStringsMap.set('null', 2);
			this.registerString('');
			this.declarationsOfStringsMap.set('', 3);
			this.registerString('[object Object]');
			this.declarationsOfStringsMap.set('[object Object]', 4);
			for (const e of $toIterator(this.project.enumsSimple)) {
				forward.push('struct ' + e.name + '_;');
				if (e.staticVars.length + e.staticMethods.length == 0) { continue };
				this.types.push('struct ' + e.name + '_ {');
				for (const v of $toIterator(e.staticVars)) {
					const temp = (v);
					switch (temp&&temp[0]) {
					case 3: {
						const name = temp[1];
						const expr = temp[2];
						const type = temp[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type)) + ' ') + name + '_;');
							out.push(('' + (this.stringifyType(type)) + ' ') + e.name + '_::' + name + '_;\n');
						}
					} break;

					case 4: {
						const name_5318 = temp[1];
						const expr_5320 = temp[2];
						const type_5322 = temp[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type_5322)) + ' ') + name_5318 + '_;');
							out.push(('' + (this.stringifyType(type_5322)) + ' ') + e.name + '_::' + name_5318 + '_;\n');
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_5324 = (v);
					switch (temp_5324&&temp_5324[0]) {
					case 5: {
						const name_5326 = temp_5324[1];
						const expr_5328 = temp_5324[2];
						const args = temp_5324[3];
						const defaults = temp_5324[4];
						const funcType = temp_5324[5];
						{
							this.types.push('\n\tstatic ');
							this.types.push(this.printFunctionReturnType(funcType));
							this.types.push(' ' + name_5326 + '_');
							this.types.push(this.printFunctionArguments(args, funcType, true));
							this.types.push(';');
						}
					} break;
					};
				};
				this.types.push('\n};\n');
				for (const v of $toIterator(e.staticMethods)) {
					const temp_5333 = (v);
					switch (temp_5333&&temp_5333[0]) {
					case 5: {
						const name_5335 = temp_5333[1];
						const expr_5337 = temp_5333[2];
						const args_5339 = temp_5333[3];
						const defaults_5341 = temp_5333[4];
						const funcType_5343 = temp_5333[5];
						{
							out.push(this.printFunctionReturnType(funcType_5343));
							out.push(' ' + e.name + '_::' + name_5335 + '_');
							out.push(this.printFunctionArguments(args_5339, funcType_5343));
							const _currentReturnType = this.currentReturnType;
							this.currentReturnType = this.getFunctionReturnType(funcType_5343);
							out.push(' ' + this.printBlock(expr_5337) + ';\n');
							this.currentReturnType = _currentReturnType;
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				forward.push('struct ' + e.name + '_;');
				this.types.push('struct ' + e.name + '_ : Any_ {');
				let maxFieldsCount = 0;
				let i = 0;
				for (const name of $toIterator(e.names)) {
					if (e.constructors[i] != null) {
						const args_5348 = (() => {
							const result = [];
							const value = e.constructors[i].length;
							for (const c of $toIterator(value)) result.push(this.stringifyType(e.constructorsTypes[i][c]) + ' ' + e.constructors[i][c] + '_');
							return result;
						})();
						if (e.constructors[i].length > maxFieldsCount) { maxFieldsCount = e.constructors[i].length };
						out.push(e.name + '_* ' + e.name + '_$' + name + '_(');
						out.push(args_5348.join(', '));
						out.push(') {\n');
						out.push(('\tprintf(\"' + (e.name) + '.' + (name) + '_(...)\\n\");fflush(0);\n'));
						out.push('\tvoid* buffer_ = HEXA_NEW(sizeof(' + e.name + '_));\n');
						out.push('\t' + e.name + '_* _ = new (buffer_) ' + e.name + '_();\n');
						out.push(('\t_->is_ = ' + (i) + ';\n'));
						{
							let c = 0;
							let it = 0;
							let at = e.constructors[i].length;
							while (it < at) {
								c = it;
								it++;
								{
									out.push(('\t_->enum_[' + (c) + '] = '));
									out.push(this.printToAnyConverter(e.constructors[i][c] + '_', e.constructorsTypes[i][c]));
									out.push(';\n');
								};
							};
						};
						out.push('\treturn _;\n');
						out.push('};\n');
					} else {
						out.push(e.name + '_* ' + e.name + '_$' + name + '_() {\n');
						out.push(('\tprintf(\"' + (e.name) + '.' + (name) + '_()\\n\");fflush(0);\n'));
						out.push('\tvoid* buffer_ = HEXA_NEW(sizeof(' + e.name + '_));\n');
						out.push('\t' + e.name + '_* _ = new (buffer_) ' + e.name + '_();\n');
						out.push(('\t_->is_ = ' + (i) + ';\n'));
						out.push('\treturn _;\n');
						out.push('};\n');
					};
					i++;
				};
				if (maxFieldsCount > 0) { this.types.push(('\n\tAny_* enum_[' + (maxFieldsCount) + '] = {nullptr};')) };
				this.types.push('\n\tuint16_t is_;');
				for (const v of $toIterator(e.staticVars)) {
					const temp_5355 = (v);
					switch (temp_5355&&temp_5355[0]) {
					case 3: {
						const name_5357 = temp_5355[1];
						const expr_5359 = temp_5355[2];
						const type_5361 = temp_5355[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type_5361)) + ' ') + name_5357 + '_;');
							out.push(('' + (this.stringifyType(type_5361)) + ' ') + e.name + '_::' + name_5357 + '_;\n');
						}
					} break;

					case 4: {
						const name_5363 = temp_5355[1];
						const expr_5365 = temp_5355[2];
						const type_5367 = temp_5355[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type_5367)) + ' ') + name_5363 + '_;');
							out.push(('' + (this.stringifyType(type_5367)) + ' ') + e.name + '_::' + name_5363 + '_;\n');
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_5369 = (v);
					switch (temp_5369&&temp_5369[0]) {
					case 5: {
						const name_5371 = temp_5369[1];
						const expr_5373 = temp_5369[2];
						const args_5375 = temp_5369[3];
						const defaults_5377 = temp_5369[4];
						const funcType_5379 = temp_5369[5];
						{
							this.types.push('\n\tstatic ');
							this.types.push(this.printFunctionReturnType(funcType_5379));
							this.types.push(' ' + name_5371 + '_');
							this.types.push(this.printFunctionArguments(args_5375, funcType_5379, true));
							this.types.push(';');
							out.push(this.printFunctionReturnType(funcType_5379));
							out.push(' ' + e.name + '_::' + name_5371 + '_');
							out.push(this.printFunctionArguments(args_5375, funcType_5379));
							const _currentReturnType_5381 = this.currentReturnType;
							this.currentReturnType = this.getFunctionReturnType(funcType_5379);
							out.push(' ' + this.printBlock(expr_5373) + ';\n');
							this.currentReturnType = _currentReturnType_5381;
						}
					} break;
					};
				};
				this.types.push('\n};\n');
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.external) {
					if (c.jsRequire != null) { forward.push(c.jsRequire) };
					{
						let step = 0;
						const jsNative = c.jsNative;
						let temp_5385 = null;
						if (step == 0 && jsNative != null) {
							temp_5385 = jsNative != c.name;
							step = 1;
						};
						if (step == 1 && temp_5385 != false) { step = 2 };
						if (step == 2) { forward.push('#define ' + c.name + ' ' + jsNative) };
					};
					continue;
				};
				if (c.name == 'Any') { continue };
				if (c.name == 'Bool') { continue };
				forward.push('struct ' + c.name + '_;');
				this.types.push('struct ' + c.name + '_ : Any_ {');
				for (const v of $toIterator(c.vars)) {
					const temp_5387 = (v);
					switch (temp_5387&&temp_5387[0]) {
					case 3: {
						const name_5389 = temp_5387[1];
						const expr_5391 = temp_5387[2];
						const type_5393 = temp_5387[3];
						this.types.push(('\n\t' + (this.stringifyType(type_5393)) + ' ') + name_5389 + '_;')
					} break;

					case 4: {
						const name_5395 = temp_5387[1];
						const expr_5397 = temp_5387[2];
						const type_5399 = temp_5387[3];
						this.types.push(('\n\t' + (this.stringifyType(type_5399)) + ' ') + name_5395 + '_;')
					} break;
					};
				};
				for (const v of $toIterator(c.methods)) {
					const temp_5401 = (v);
					switch (temp_5401&&temp_5401[0]) {
					case 5: {
						const name_5403 = temp_5401[1];
						const expr_5405 = temp_5401[2];
						const args_5407 = temp_5401[3];
						const defaults_5409 = temp_5401[4];
						const funcType_5411 = temp_5401[5];
						if (name_5403 == null || name_5403 == 'new') {
							this.types.push('\n\t' + c.name + '_() {};');
							this.types.push('\n\tvoid this_');
							this.types.push(this.printFunctionArguments(args_5407, funcType_5411, true));
							this.types.push(';');
							this.types.push('\n\tstatic ' + c.name + '_* new_');
							this.types.push(this.printFunctionArguments(args_5407, funcType_5411));
							this.types.push(';');
							out.push('void ' + c.name + '_::this_');
							this.thisArgument = null;
							out.push(this.printFunctionArguments(args_5407, funcType_5411));
							this.thisArgument = null;
							out.push(' {\n');
							this.customThis = 'this';
							for (const v of $toIterator(c.vars)) {
								const temp_5413 = (v);
								switch (temp_5413&&temp_5413[0]) {
								case 3: {
									const name_5415 = temp_5413[1];
									const expr_5417 = temp_5413[2];
									const type_5419 = temp_5413[3];
									if (expr_5417 != null) { out.push('\tthis->' + name_5415 + '_ = ' + this.printExpression(expr_5417) + ';\n') }
								} break;

								case 4: {
									const name_5421 = temp_5413[1];
									const expr_5423 = temp_5413[2];
									const type_5425 = temp_5413[3];
									out.push('\tthis->' + name_5421 + '_ = ' + this.printExpression(expr_5423) + ';\n')
								} break;
								};
							};
							this.pushTab();
							out.push('\t' + this.printBlock(expr_5405) + ';\n');
							this.popTab();
							this.customThis = null;
							out.push('};\n');
							out.push('' + c.name + '_* ' + c.name + '_::new_');
							out.push(this.printFunctionArguments(args_5407, funcType_5411));
							out.push(' {\n');
							out.push(('\tprintf(\"' + (c.name) + '.new_()\\n\");fflush(0);\n'));
							out.push('\tvoid* buffer_ = (' + c.name + '_*)(HEXA_NEW(sizeof(' + c.name + '_)));\n');
							out.push('\t' + c.name + '_* _ = new (buffer_) ' + c.name + '_();\n');
							out.push('\t_->this_(');
							const arg = (() => {
								const result_5428 = [];
								const value_5430 = args_5407;
								for (const a of $toIterator(value_5430)) result_5428.push(a + '_');
								return result_5428;
							})();
							out.push(arg.join(', '));
							out.push(');\n');
							out.push('\treturn _;\n');
							out.push('};\n');
						} else {
							this.types.push('\n\tvirtual ');
							this.types.push(this.printFunctionReturnType(funcType_5411));
							this.types.push(' ' + name_5403 + '_');
							this.types.push(this.printFunctionArguments(args_5407, funcType_5411));
							this.types.push(';');
							this.thisArgument = null;
							out.push(this.printFunctionReturnType(funcType_5411));
							out.push(' ' + c.name + '_::' + name_5403 + '_');
							out.push(this.printFunctionArguments(args_5407, funcType_5411));
							const _currentReturnType_5432 = this.currentReturnType;
							this.currentReturnType = this.getFunctionReturnType(funcType_5411);
							this.customThis = 'this';
							this.thisArgument = null;
							out.push(' ' + this.printBlock(expr_5405) + ';\n');
							this.customThis = null;
							this.currentReturnType = _currentReturnType_5432;
							if (false) {
								out.push(this.printFunctionReturnType(funcType_5411));
								out.push(' ' + c.name + '_::' + name_5403 + '_');
								out.push(this.printFunctionArguments(args_5407, funcType_5411));
								const _currentReturnType_5434 = this.currentReturnType;
								this.currentReturnType = this.getFunctionReturnType(funcType_5411);
								const arg_5436 = (() => {
									const result_5438 = [];
									const value_5440 = args_5407;
									for (const a of $toIterator(value_5440)) result_5438.push(a + '_');
									return result_5438;
								})();
								arg_5436.unshift('this');
								out.push(' { return this->' + name_5403 + '_(' + arg_5436.join(', ') + '); };\n');
							};
							this.currentReturnType = _currentReturnType_5432;
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticVars)) {
					const temp_5442 = (v);
					switch (temp_5442&&temp_5442[0]) {
					case 3: {
						const name_5444 = temp_5442[1];
						const expr_5446 = temp_5442[2];
						const type_5448 = temp_5442[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type_5448)) + ' ') + name_5444 + '_;');
							out.push(('' + (this.stringifyType(type_5448)) + ' ') + c.name + '_::' + name_5444 + '_;\n');
						}
					} break;

					case 4: {
						const name_5450 = temp_5442[1];
						const expr_5452 = temp_5442[2];
						const type_5454 = temp_5442[3];
						{
							this.types.push(('\n\tstatic ' + (this.stringifyType(type_5454)) + ' ') + name_5450 + '_;');
							out.push(('' + (this.stringifyType(type_5454)) + ' ') + c.name + '_::' + name_5450 + '_;\n');
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticMethods)) {
					const temp_5456 = (v);
					switch (temp_5456&&temp_5456[0]) {
					case 5: {
						const name_5458 = temp_5456[1];
						const expr_5460 = temp_5456[2];
						const args_5462 = temp_5456[3];
						const defaults_5464 = temp_5456[4];
						const funcType_5466 = temp_5456[5];
						{
							this.types.push('\n\tstatic ');
							this.types.push(this.printFunctionReturnType(funcType_5466));
							this.types.push(' ' + name_5458 + '_');
							this.types.push(this.printFunctionArguments(args_5462, funcType_5466));
							this.types.push(';');
						}
					} break;
					};
				};
				this.types.push('\n};\n');
				for (const v of $toIterator(c.staticMethods)) {
					const temp_5468 = (v);
					switch (temp_5468&&temp_5468[0]) {
					case 5: {
						const name_5470 = temp_5468[1];
						const expr_5472 = temp_5468[2];
						const args_5474 = temp_5468[3];
						const defaults_5476 = temp_5468[4];
						const funcType_5478 = temp_5468[5];
						{
							out.push(this.printFunctionReturnType(funcType_5478));
							out.push(' ' + c.name + '_::' + name_5470 + '_');
							out.push(this.printFunctionArguments(args_5474, funcType_5478));
							const _currentReturnType_5480 = this.currentReturnType;
							this.currentReturnType = this.getFunctionReturnType(funcType_5478);
							out.push(' ' + this.printBlock(expr_5472) + ';\n');
							this.currentReturnType = _currentReturnType_5480;
						}
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalFuncs)) {
				const temp_5482 = (g);
				switch (temp_5482&&temp_5482[0]) {
				case 5: {
					const name_5484 = temp_5482[1];
					const expr_5486 = temp_5482[2];
					const args_5488 = temp_5482[3];
					const defaults_5490 = temp_5482[4];
					const funcType_5492 = temp_5482[5];
					{
						this.types.push(this.printFunctionReturnType(funcType_5492));
						this.types.push(' ' + name_5484 + '_');
						this.types.push(this.printFunctionArguments(args_5488, funcType_5492));
						this.types.push(';\n');
						out.push(this.printFunctionReturnType(funcType_5492));
						out.push(' ' + name_5484 + '_');
						out.push(this.printFunctionArguments(args_5488, funcType_5492));
						const _currentReturnType_5494 = this.currentReturnType;
						this.currentReturnType = this.getFunctionReturnType(funcType_5492);
						out.push(' ' + this.printBlock(expr_5486) + ';\n');
						this.currentReturnType = _currentReturnType_5494;
					}
				} break;
				};
			};
			out.push('int HEXA_MAIN(int argc, char **argv) {\n');
			out.push('\tprintf("Starting...\\n");fflush(0);\n');
			out.push('\t%%%HEXA_STRINGS@@@\n');
			this.pushTab();
			for (const e of $toIterator(this.project.enumsSimple)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_5496 = (v);
					switch (temp_5496&&temp_5496[0]) {
					case 3: {
						const name_5498 = temp_5496[1];
						const expr_5500 = temp_5496[2];
						const type_5502 = temp_5496[3];
						if (expr_5500 != null) { out.push('\t' + e.name + '_::' + name_5498 + '_ = ' + this.printExpression(expr_5500) + ';\n') }
					} break;

					case 4: {
						const name_5504 = temp_5496[1];
						const expr_5506 = temp_5496[2];
						const type_5508 = temp_5496[3];
						if (expr_5506 != null) { out.push('\t' + e.name + '_::' + name_5504 + '_ = ' + this.printExpression(expr_5506) + ';\n') }
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_5510 = (v);
					switch (temp_5510&&temp_5510[0]) {
					case 3: {
						const name_5512 = temp_5510[1];
						const expr_5514 = temp_5510[2];
						const type_5516 = temp_5510[3];
						if (expr_5514 != null) { out.push('\t' + e.name + '_::' + name_5512 + '_ = ' + this.printExpression(expr_5514) + ';\n') }
					} break;

					case 4: {
						const name_5518 = temp_5510[1];
						const expr_5520 = temp_5510[2];
						const type_5522 = temp_5510[3];
						if (expr_5520 != null) { out.push('\t' + e.name + '_::' + name_5518 + '_ = ' + this.printExpression(expr_5520) + ';\n') }
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.classes)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_5524 = (v);
					switch (temp_5524&&temp_5524[0]) {
					case 3: {
						const name_5526 = temp_5524[1];
						const expr_5528 = temp_5524[2];
						const type_5530 = temp_5524[3];
						if (expr_5528 != null) { out.push('\t' + e.name + '_::' + name_5526 + '_ = ' + this.printExpression(expr_5528) + ';\n') }
					} break;

					case 4: {
						const name_5532 = temp_5524[1];
						const expr_5534 = temp_5524[2];
						const type_5536 = temp_5524[3];
						if (expr_5534 != null) { out.push('\t' + e.name + '_::' + name_5532 + '_ = ' + this.printExpression(expr_5534) + ';\n') }
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalVars)) {
				const temp_5538 = (g);
				switch (temp_5538&&temp_5538[0]) {
				case 3: {
					const name_5540 = temp_5538[1];
					const expr_5542 = temp_5538[2];
					const type_5544 = temp_5538[3];
					{
						this.types.push(this.stringifyType(type_5544));
						this.types.push(' ' + name_5540 + '_;\n');
						if (expr_5542 != null) { out.push('\t' + name_5540 + '_ = ' + this.printExpression(expr_5542) + ';\n') };
					}
				} break;

				case 4: {
					const name_5546 = temp_5538[1];
					const expr_5548 = temp_5538[2];
					const type_5550 = temp_5538[3];
					{
						this.types.push(this.stringifyType(type_5550));
						this.types.push(' ' + name_5546 + '_;\n');
						if (expr_5548 != null) { out.push('\t' + name_5546 + '_ = ' + this.printExpression(expr_5548) + ';\n') };
					}
				} break;
				};
			};
			if (this.project.init.length > 1) { throw 'project.init.length > 1' };
			const init = this.printStatement(this.project.init[0]);
			const strings = ['Strings_ = (String_**)HEXA_NEW(HEXA_STRINGS * sizeof(String_*));\n'];
			{
				let id = 0;
				let it_5555 = 0;
				let at_5557 = this.declarationsOfStrings.length;
				while (it_5555 < at_5557) {
					id = it_5555;
					it_5555++;
					{
						strings.push(('\tStrings_[' + (id) + '] = String_::fromUTF16z_(L\"' + (this.declarationsOfStrings[id]) + '\");\n'));
					};
				};
			};
			strings.push('\tprintf("Strings loaded...\\n");fflush(0);\n');
			out.push('\t');
			out.push(init);
			this.popTab();
			out.push('\tprintf("Exiting...\\n");fflush(0);\n');
			out.push('\treturn 0;\n}\n');
			forward.push(('#define HEXA_STRINGS ' + (this.declarationsOfStrings.length) + ''));
			return (header.join('\n') + '\n// Forward\n' + forward.join('\n') + '\n// Typedef functions\n' + this.typedefFunctions.join('') + '\n// Forward functions\n' + this.forwardFunctions.join('') + '\n\n// Strings\n' + '\n// Types\n' + this.types.join('') + '\n// Global functions\n' + this.globalFunctions.join('') + '\n// Statements\n' + out.join('').split('%%%HEXA_STRINGS@@@').join(strings.join(''))).split('\n').join('\r\n');
			let out_5559 = '';
			for (const e of $toIterator(this.project.enumsSimple)) {
				this.declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name);
				for (const v of $toIterator(e.staticVars)) {
					const temp_5561 = (v);
					switch (temp_5561&&temp_5561[0]) {
					case 3: {
						const name_5563 = temp_5561[1];
						const expr_5565 = temp_5561[2];
						const type_5567 = temp_5561[3];
						{
							out_5559 += '\n' + this.stringifyType(type_5567) + ' _x' + e.name + '_' + name_5563;
							if (expr_5565 != null) { out_5559 += ' = ' + this.printExpression(expr_5565) + ';' };
						}
					} break;

					case 4: {
						const name_5569 = temp_5561[1];
						const expr_5571 = temp_5561[2];
						const type_5573 = temp_5561[3];
						{
							out_5559 += '\n' + this.stringifyType(type_5573) + ' _x' + e.name + '_' + name_5569;
							out_5559 += ' = ' + this.printExpression(expr_5571) + ';';
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_5575 = (v);
					switch (temp_5575&&temp_5575[0]) {};
				};
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.external) {
					if (c.jsRequire != null) {
						out_5559 += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/';
						continue;
					};
					header.push('typedef ' + ((() => {
						const result_5577 = c.jsNative;
						if (result_5577 != null) { return result_5577 };
						return c.name;
					})()) + ' _x' + c.name + ';');
					continue;
				};
				const renamed = '_x' + c.name;
				const t = ['struct ', renamed, ' {'];
				this.declarationsOfOpaqueTypes.push(('typedef struct ' + (renamed) + '* ' + (renamed) + ''));
				t.push('\n _xclass _xclass;');
				for (const v of $toIterator(c.vars)) {
					const temp_5581 = (v);
					switch (temp_5581&&temp_5581[0]) {
					case 3: {
						const name_5583 = temp_5581[1];
						const expr_5585 = temp_5581[2];
						const type_5587 = temp_5581[3];
						t.push('\n ' + this.stringifyType(type_5587) + ' _x' + name_5583 + ';')
					} break;

					case 4: {
						const name_5589 = temp_5581[1];
						const expr_5591 = temp_5581[2];
						const type_5593 = temp_5581[3];
						t.push('\n ' + this.stringifyType(type_5593) + ' _x' + name_5589 + ';')
					} break;
					};
				};
				for (const v of $toIterator(c.methods)) {
					const temp_5595 = (v);
					switch (temp_5595&&temp_5595[0]) {
					case 5: {
						const name_5597 = temp_5595[1];
						const expr_5599 = temp_5595[2];
						const args_5601 = temp_5595[3];
						const defaults_5603 = temp_5595[4];
						{
							const types = null;
							const returns = null;
							let declaration = this.printType(null) + ' ';
							const constructor = (name_5597 == null || name_5597 == 'new');
							if (constructor) { declaration = renamed + ' ' };
							declaration += renamed + '_' + name_5597;
							if (constructor) { if (args_5601.length > 0) { declaration += '(void* _x' + args_5601.join(', void* _x') + ')' } else {
								declaration += '()';
							} } else {
								if (args_5601.length > 0) { declaration += ('(' + (renamed) + ' _xthis, void* _x') + args_5601.join(', void* _x') + ')' } else {
									declaration += ('(' + (renamed) + ' _xthis)');
								};
							};
							this.declarationsOfFunctions.push(declaration);
							out_5559 += '\n' + declaration;
							out_5559 += ' { ';
							if (constructor) {
								out_5559 += ('\n ' + (renamed) + ' _xthis = (' + (renamed) + ')HEXA_NEW(sizeof(' + (renamed) + '));');
								for (const v of $toIterator(c.vars)) {
									const temp_5609 = (v);
									switch (temp_5609&&temp_5609[0]) {
									case 3: {
										const name_5611 = temp_5609[1];
										const expr_5613 = temp_5609[2];
										const type_5615 = temp_5609[3];
										if (expr_5613 != null) { out_5559 += '\n _xthis->_x' + name_5611 + ' = ' + this.printExpression(expr_5613) + ';' }
									} break;

									case 4: {
										const name_5617 = temp_5609[1];
										const expr_5619 = temp_5609[2];
										const type_5621 = temp_5609[3];
										out_5559 += '\n _xthis->_x' + name_5617 + ' = ' + this.printExpression(expr_5619) + ';'
									} break;
									};
								};
								out_5559 += '\n ';
								out_5559 += this.printStatement(expr_5599) + '\n return _xthis;\n};';
							} else {
								out_5559 += this.printStatement(expr_5599) + '\n};';
							};
						}
					} break;
					};
				};
				t.push('\n}');
				this.declarationsOfFullTypes.push(t.join(''));
				for (const v of $toIterator(c.staticVars)) {
					const temp_5623 = (v);
					switch (temp_5623&&temp_5623[0]) {
					case 3: {
						const name_5625 = temp_5623[1];
						const expr_5627 = temp_5623[2];
						const type_5629 = temp_5623[3];
						{
							out_5559 += '\n ' + this.stringifyType(type_5629) + ' ' + renamed + '_' + name_5625;
							out_5559 += ';';
						}
					} break;
					};
				};
			};
		};
		pushTab() { this.tabs += '\t' };
		popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
		printBlock(s) {
			const temp_5632 = (s);
			switch (temp_5632&&temp_5632[0]) {
			case 1: {
				const el = temp_5632[1];
				{
					return this.printStatement(s);
					if (el.length == 1) {
						const temp_5635 = (el[0]);
						switch (temp_5635&&temp_5635[0]) {
						case 1: {
							return this.printBlock(el[0])
						} break;

						default:
						return '{ ' + this.printStatement(el[0]) + '; }'
						};
					};
					if (el.length == 0) { return '{}' };
					return this.printStatement(s);
				}
			} break;

			default:
			return this.printStatement(/*Block*/[1,[s],"F:/hexa-dev/hexa/source/targets/genCxx.hexa:792"])
			};
		};
		printPosition(data) {
			{
				let step_5638 = 0;
				const data_5640 = data;
				if (step_5638 == 0 && data_5640 != null) { step_5638 = 1 };
				if (step_5638 == 1) { return '#line ' + data_5640.line + ' "' + data_5640.fileName.split('\\').join('/') + '"' };
			};
			return '...';
		};
		printStatement(s_5642) {
			this.last = (() => {
				const result_5644 = s_5642;
				if (result_5644 != null) { return result_5644 };
				return this.last;
			})();
			{
				const temp_5646 = (s_5642);
				switch (temp_5646&&temp_5646[0]) {
				case 0: {
					const els = temp_5646[1];
					{
						let r = '';
						for (const s of $toIterator(els)) {
							if (s != null) { r += '\n' + this.tabs + this.printStatement(s) + ';' };
						};
						return r;
					}
				} break;

				case 18: {
					return 'break'
				} break;

				case 17: {
					return 'continue'
				} break;

				case 1: {
					const el_5650 = temp_5646[1];
					{
						if (el_5650.length == 0) { return '{}' };
						this.pushTab();
						const printMetaBlock = (e) => {
							const meta = this.metaBlock;
							this.metaBlock = [];
							let ss = this.printStatement(e);
							let r_5656 = [];
							for (const line of $toIterator(this.metaBlock)) {
								r_5656.push(line);
							};
							r_5656.push(ss);
							this.metaBlock = meta;
							return r_5656.join(';\n' + this.tabs);
						};
						let r_5658 = '{';
						for (const e of $toIterator(el_5650)) {
							const temp_5660 = (e);
							switch (temp_5660&&temp_5660[0]) {
							case null: case undefined: {
								{
								}
							} break;

							case 0: {
								const els_5662 = temp_5660[1];
								for (const s of $toIterator(els_5662)) {
									if (s != null) { r_5658 += '\n' + this.tabs + printMetaBlock(s) + ';' };
								}
							} break;

							default:
							r_5658 += '\n' + this.tabs + printMetaBlock(e) + ';'
							};
						};
						this.popTab();
						return r_5658 + '\n' + this.tabs + '}';
					}
				} break;

				case 4: {
					const name_5664 = temp_5646[1];
					const expr_5666 = temp_5646[2];
					const type_5668 = temp_5646[3];
					return this.stringifyType(type_5668) + ' ' + name_5664 + '_' + (/*?*/(expr_5666 == null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_5666), this.getType(expr_5666), type_5668))
				} break;

				case 3: {
					const name_5670 = temp_5646[1];
					const expr_5672 = temp_5646[2];
					const type_5674 = temp_5646[3];
					return this.stringifyType(type_5674) + ' ' + name_5670 + '_' + (/*?*/(expr_5672 == null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_5672), this.getType(expr_5672), type_5674))
				} break;

				case 5: {
					const name_5676 = temp_5646[1];
					const expr_5678 = temp_5646[2];
					const args_5680 = temp_5646[3];
					const defaults_5682 = temp_5646[4];
					const funcType_5684 = temp_5646[5];
					{
						const _currentReturnType_5686 = this.currentReturnType;
						this.currentReturnType = this.getFunctionReturnType(funcType_5684);
						if (false) {
							const temp_5688 = (this.tempId++);
							const rt = this.printFunctionReturnType(funcType_5684);
							this.forwardFunctions.push(rt);
							this.forwardFunctions.push((' _$' + (temp_5688) + ''));
							this.forwardFunctions.push(this.printFunctionArguments(args_5680, funcType_5684, false));
							this.forwardFunctions.push(';\n');
							const tab = this.tabs;
							this.tabs = '';
							this.globalFunctions.push(rt);
							this.globalFunctions.push((' _$' + (temp_5688) + ''));
							this.globalFunctions.push(this.printFunctionArguments(args_5680, funcType_5684, true));
							this.globalFunctions.push(' ');
							this.globalFunctions.push(this.printBlock(expr_5678));
							this.globalFunctions.push('\n');
							this.tabs = tab;
							this.currentReturnType = _currentReturnType_5686;
							return this.stringifyType(funcType_5684) + (' ' + (name_5676) + '_ = _$' + (temp_5688) + '');
						};
						const result_5692 = ('const auto ' + (name_5676) + '_ = [&]') + this.printFunctionArguments(args_5680, funcType_5684, true) + '->' + this.printFunctionReturnType(funcType_5684) + ' ' + this.printBlock(expr_5678);
						this.currentReturnType = _currentReturnType_5686;
						const position = '' + this.printPosition(this.project.statementPosition.get(s_5642)) + '\n' + this.tabs;
						return position + result_5692;
					}
				} break;

				case 6: {
					const e_5695 = temp_5646[1];
					{
						if (e_5695 == null) { return 'return' };
						return 'return ' + this.printTypeConverter(this.printExpression(e_5695), this.getType(e_5695), this.currentReturnType);
					}
				} break;

				case 7: {
					const econd = temp_5646[1];
					const eif = temp_5646[2];
					const eelse = temp_5646[3];
					{
						let r_5700 = 'if (' + this.printExpression(econd) + ') ' + this.printBlock(eif);
						if (eelse != null) { r_5700 += ' else ' + this.printStatement(eelse) };
						return r_5700;
					}
				} break;

				case 2: {
					const e_5702 = temp_5646[1];
					const args_5704 = temp_5646[2];
					const expects = temp_5646[3];
					const kind = temp_5646[4];
					{
						if (args_5704.length == 0) { return this.printExpression(e_5702) + '()' };
						const arguments_5708 = [];
						{
							let i_5710 = 0;
							let it_5712 = 0;
							let at_5714 = args_5704.length;
							while (it_5712 < at_5714) {
								i_5710 = it_5712;
								it_5712++;
								{
									const temp_5716 = (this.tempId++);
									if (this.isPrimitive(args_5704[i_5710])) { arguments_5708.push(this.printTypeConverter(this.printExpression(args_5704[i_5710]), this.getType(args_5704[i_5710]), expects[i_5710])) } else {
										this.metaBlock.push(this.stringifyType((() => {
											const result_5718 = expects[i_5710];
											if (result_5718 != null) { return result_5718 };
											return this.getType(args_5704[i_5710]);
										})()) + (' _$' + (temp_5716) + ' = ') + this.printTypeConverter(this.printExpression(args_5704[i_5710]), this.getType(args_5704[i_5710]), (() => {
											const result_5720 = expects[i_5710];
											if (result_5720 != null) { return result_5720 };
											return this.getType(args_5704[i_5710]);
										})()));
										arguments_5708.push(('_$' + (temp_5716) + ''));
									};
								};
							};
						};
						return this.printExpression(e_5702) + '(' + arguments_5708.join(', ') + ')';
						const result_5722 = '{\n' + this.tabs + this.printExpression(e_5702) + '(' + arguments_5708.join(', ') + ');\n';
						return result_5722 + this.tabs + '}';
						{
							const temp_5724 = (kind);
							switch (temp_5724) {
							case 12: {
								{
									const temp_5726 = (e_5702);
									switch (temp_5726&&temp_5726[0]) {
									case 11: {
										const expr_5728 = temp_5726[1];
										const name_5730 = temp_5726[2];
										const result_5732 = temp_5726[3];
										{
											const temp_5734 = (this.tempId++);
											this.metaBlock.push(this.stringifyType(this.getType(expr_5728)) + (' _$' + (temp_5734) + ' = ') + this.printExpression(expr_5728));
											return ('_$' + (temp_5734) + '->') + name_5730 + '_' + this.printCallArguments(args_5704, expects);
										}
									} break;
									};
								}
							} break;
							};
						};
						return this.printExpression(e_5702) + this.printCallArguments(args_5704, expects);
					}
				} break;

				case 8: {
					const expr_5736 = temp_5646[1];
					const t_5738 = temp_5646[2];
					const v = temp_5646[3];
					const catches = temp_5646[4];
					{
						const label = (this.tempId++);
						this.pushTab();
						let r_5743 = '_try {\n' + this.tabs;
						r_5743 += 'Any_* $try = (Any_*)0;\n' + this.tabs;
						r_5743 += this.printStatement(expr_5736);
						this.popTab();
						r_5743 += '\n' + this.tabs + ('$catch' + (label) + ': ; } _catch(') + this.printType(t_5738[0]) + ' _x' + v[0] + ') {\n' + this.tabs + ' ';
						this.pushTab();
						r_5743 += this.printStatement(catches[0]);
						this.popTab();
						return r_5743 + ';\n' + this.tabs + '}';
					}
				} break;

				case 10: {
					const a = temp_5646[1];
					const v_5746 = temp_5646[2];
					{
						{
							const temp_5748 = (a);
							switch (temp_5748&&temp_5748[0]) {
							case 11: {
								const expr_5750 = temp_5748[1];
								const name_5752 = temp_5748[2];
								{
									{
										const temp_5754 = (expr_5750);
										switch (temp_5754&&temp_5754[0]) {
										case 6: {
											const id_5756 = temp_5754[1];
											if (id_5756.charAt(0) == id_5756.charAt(0).toUpperCase()) { return id_5756 + '_::' + name_5752 + '_ = ' + this.printExpression(v_5746) }
										} break;
										};
									};
									const type_5758 = this.getType(expr_5750);
									if ((type_5758 == this.project.typer.typeAny) || (type_5758 == null)) { return this.printExpression(expr_5750) + '->var_(String_fromUTF8z("' + name_5752 + '"), ' + this.printToAnyConverter(this.printExpression(v_5746), this.getType(v_5746)) + ')' };
								}
							} break;
							};
						};
						return this.printExpression(a) + ' = ' + this.printExpression(v_5746);
					}
				} break;

				case 9: {
					const e_5760 = temp_5646[1];
					return '_throw(' + this.printExpression(e_5760) + ')'
				} break;

				case 12: {
					const name_5762 = temp_5646[1];
					const over = temp_5646[2];
					const by = temp_5646[3];
					return 'for (Any_* ' + name_5762 + '_; ' + this.printExpression(over) + ';) ' + this.printStatement(by)
				} break;

				case 14: {
					const e_5766 = temp_5646[1];
					return this.printExpression(e_5766) + '++'
				} break;

				case 15: {
					const e_5768 = temp_5646[1];
					return this.printExpression(e_5768) + '--'
				} break;

				case 13: {
					const econd_5770 = temp_5646[1];
					const e_5772 = temp_5646[2];
					const pre = temp_5646[3];
					{
						if (pre) { return 'while (' + this.printExpression(econd_5770) + ') ' + this.printStatement(e_5772) };
						return 'do {' + this.printStatement(e_5772) + '} while (' + this.printExpression(econd_5770) + ')';
					}
				} break;

				case 11: {
					const a_5775 = temp_5646[1];
					const op = temp_5646[2];
					const value_5778 = temp_5646[3];
					return this.printExpression(a_5775) + ' ' + Token.stringify(op) + '= ' + this.printExpression(value_5778)
				} break;

				case 16: {
					const expr_5780 = temp_5646[1];
					const cases = temp_5646[2];
					const statements = temp_5646[3];
					{
						let r_5784 = '{ auto switch_ = ' + this.printExpression(expr_5780) + ';';
						let else_ = false;
						{
							let i_5787 = 0;
							let it_5789 = 0;
							let at_5791 = cases.length;
							while (it_5789 < at_5791) {
								i_5787 = it_5789;
								it_5789++;
								{
									if (cases[i_5787].length > 1) {
										if (else_) { r_5784 += ' else' };
										r_5784 += '\n' + this.tabs + 'if ((';
										const conds = [];
										for (const cc of $toIterator(cases[i_5787])) {
											const temp_5794 = (cc);
											switch (temp_5794&&temp_5794[0]) {
											case 9: {
												conds.push('switch_ == -1')
											} break;

											default:
											conds.push('switch_ == ' + this.printExpression(cc))
											};
										};
										r_5784 += conds.join(') || (') + ')) ';
										this.pushTab();
										r_5784 += this.printBlock(statements[i_5787]);
										this.popTab();
										else_ = true;
									} else {
										let step_5796 = 0;
										const cc = cases[i_5787][0];
										if (step_5796 == 0 && cc != null) { step_5796 = 1 };
										if (step_5796 == 1) {
											if (else_) { r_5784 += ' else' };
											r_5784 += '\n' + this.tabs + 'if (';
											{
												const temp_5799 = (cc);
												switch (temp_5799&&temp_5799[0]) {
												case 9: {
													r_5784 += 'switch_ == -1) '
												} break;

												default:
												r_5784 += 'switch_ == ' + this.printExpression(cc) + ') '
												};
											};
											this.pushTab();
											r_5784 += this.printBlock(statements[i_5787]);
											this.popTab();
											else_ = true;
										};
									};
								};
							};
						};
						{
							let i_5801 = 0;
							let it_5803 = 0;
							let at_5805 = cases.length;
							while (it_5803 < at_5805) {
								i_5801 = it_5803;
								it_5803++;
								{
									if (cases[i_5801].length == 0) {
										if (else_) { r_5784 += ' else' };
										r_5784 += '\n' + this.tabs;
										r_5784 += this.printBlock(statements[i_5801]);
									};
								};
							};
						};
						r_5784 += ';\n' + this.tabs;
						return r_5784 + '}';
						let r_5807 = 'switch (' + this.printExpression(expr_5780) + ') {';
						{
							let i_5809 = 0;
							let it_5811 = 0;
							let at_5813 = cases.length;
							while (it_5811 < at_5813) {
								i_5809 = it_5811;
								it_5811++;
								{
									if (cases[i_5809].length > 0) {
										r_5807 += '\n' + this.tabs;
										for (const cc of $toIterator(cases[i_5809])) {
											r_5807 += 'case ' + this.printExpression(cc) + ': ';
										};
										this.pushTab();
										r_5807 += this.printBlock(statements[i_5809]);
										this.popTab();
										r_5807 += ' break;';
									};
								};
							};
						};
						{
							let i_5815 = 0;
							let it_5817 = 0;
							let at_5819 = cases.length;
							while (it_5817 < at_5819) {
								i_5815 = it_5817;
								it_5817++;
								{
									if (cases[i_5815].length == 0) {
										r_5807 += '\n' + this.tabs + 'default:';
										r_5807 += '\n' + this.tabs;
										r_5807 += this.printBlock(statements[i_5815]);
									};
								};
							};
						};
						r_5807 += '\n' + this.tabs;
						return r_5807 + '}';
					}
				} break;

				default:
				{
					console.error('Unknown statement kind (GenCxx):', s_5642);
					console.trace('Here I am!');
				}
				};
			};
		};
		printCallArguments(args_5821, expects_5823) {
			{
				let step_5825 = 0;
				const exp = expects_5823;
				if (step_5825 == 0 && exp != null) { step_5825 = 1 };
				if (step_5825 == 1) { return '(' + (() => {
					const result_5828 = [];
					const value_5830 = args_5821.length;
					for (const i of $toIterator(value_5830)) result_5828.push(this.printTypeConverter(this.printExpression(args_5821[i]), this.getType(args_5821[i]), exp[i]));
					return result_5828;
				})().join(', ') + ')' };
			};
			return '(' + (() => {
				const result_5832 = [];
				const value_5834 = args_5821;
				for (const a of $toIterator(value_5834)) result_5832.push(this.printExpression(a));
				return result_5832;
			})().join(', ') + ')';
		};
		getFunctionReturnType(funcType_5836) {
			const temp_5838 = (funcType_5836);
			switch (temp_5838&&temp_5838[0]) {
			case 10: {
				const args_5840 = temp_5838[1];
				const returns_5842 = temp_5838[2];
				return returns_5842
			} break;

			default:
			return null
			};
		};
		printFunctionReturnType(funcType_5844) {
			const temp_5846 = (funcType_5844);
			switch (temp_5846&&temp_5846[0]) {
			case 10: {
				const args_5848 = temp_5846[1];
				const returns_5850 = temp_5846[2];
				return this.stringifyType(returns_5850)
			} break;

			default:
			return 'void'
			};
		};
		printToAnyConverter(string, type_5853) {
			if (type_5853 == this.project.typer.typeAny) { return string };
			if (type_5853 == this.project.typer.typeBool) { return 'Any_fromBool(' + string + ')' };
			if (type_5853 == this.project.typer.typeInt) { return 'Any_fromInt(' + string + ')' };
			return string;
		};
		printValueToNullableConverter(string_5855, fromValue, to) { return '%printValueToNullableConverter%' };
		printNullableToValueConverter(string_5859, fromValue_5861, to_5863) { return '%printNullableToValueConverter%' };
		printTypeConverter(string_5865, fromValue_5867, to_5869) {
			if (fromValue_5867 == to_5869) { return string_5865 };
			if ((fromValue_5867 == this.project.typer.typeBool) && (to_5869 == this.project.typer.typeAny)) { return 'Any_fromBool(' + string_5865 + ')' };
			if ((fromValue_5867 == this.project.typer.typeAny) && (to_5869 == this.project.typer.typeBool)) { return '(' + string_5865 + ')->_toBool()' };
			if ((fromValue_5867 == this.project.typer.typeAny) && (to_5869 == this.project.typer.typeInt)) { return '(' + string_5865 + ')->_toInt()' };
			if ((fromValue_5867 == this.project.typer.typeAny) && (to_5869 == this.project.typer.typeFloat)) { return '(' + string_5865 + ')->_toFloat()' };
			if ((fromValue_5867 == this.project.typer.typeInt) && (to_5869 == this.project.typer.typeString)) { return 'String_::fromInt32_(' + string_5865 + ')' };
			if (fromValue_5867 == this.project.typer.typeString) {
				const temp_5871 = (to_5869);
				switch (temp_5871&&temp_5871[0]) {
				case 4: {
					const type_5873 = temp_5871[1];
					if (type_5873.name == 'ConstCharPointer') { return '(' + string_5865 + ')->bytes_' }
				} break;
				};
			};
			if ((fromValue_5867 == this.project.typer.typeBool) && (to_5869 == this.project.typer.typeString)) { return 'Strings_[' + string_5865 + ']' };
			if (to_5869 == this.project.typer.typeString) {
				const temp_5875 = (fromValue_5867);
				switch (temp_5875&&temp_5875[0]) {
				case 1: {
					return '(String_*)(' + string_5865 + ')'
				} break;

				default:
				return '(' + string_5865 + ')->toString_()'
				};
			};
			if (to_5869 == this.project.typer.typeAny) { return this.printToAnyConverter(string_5865, fromValue_5867) };
			if (fromValue_5867 != to_5869) {
				const temp_5877 = (to_5869);
				switch (temp_5877&&temp_5877[0]) {
				case 2: {
					const toNull = temp_5877[1];
					{
						const temp_5880 = (fromValue_5867);
						switch (temp_5880&&temp_5880[0]) {
						case 2: {
							const fromNull = temp_5880[1];
							{
								if (toNull == fromNull) { return string_5865 };
								return '(/*A? = B?*/' + this.stringifyType(to_5869) + ')(' + string_5865 + ')';
							}
						} break;

						default:
						{
							if (toNull == fromValue_5867) {
								if (toNull == this.project.typer.typeInt) { return '((Null$Int32){(' + string_5865 + '), 1})' };
								return '%T? = T%';
							};
							{
								const temp_5883 = (fromValue_5867);
								switch (temp_5883&&temp_5883[0]) {
								case 1: {
									const value_5885 = temp_5883[1];
									if (value_5885.value == null) {
										if (toNull == this.project.typer.typeInt) { return '((Null$Int32){0, 0})' };
										if (toNull == null) { return string_5865 };
										return '%T? = null%';
									}
								} break;
								};
							};
							return '(/*A? = B*/' + this.stringifyType(to_5869) + ')(' + string_5865 + ')';
						}
						};
					}
				} break;

				default:
				{
					const temp_5887 = (fromValue_5867);
					switch (temp_5887&&temp_5887[0]) {
					case 2: {
						const fromNull_5889 = temp_5887[1];
						{
							if (to_5869 == fromNull_5889) {
								if (fromNull_5889 == this.project.typer.typeInt) { return string_5865 + '.value_' };
								return string_5865 + '/*yyz*/';
								return '%T = T?%';
							};
							return '(/*A = B?*/' + this.stringifyType(to_5869) + ')(' + string_5865 + ')';
						}
					} break;

					default:
					{
						if (to_5869 == fromValue_5867) { return string_5865 };
						{
							const temp_5891 = (fromValue_5867);
							switch (temp_5891&&temp_5891[0]) {
							case 1: {
								const value_5893 = temp_5891[1];
								if (value_5893.value == null) {
									if (to_5869 == this.project.typer.typeInt) { return '(int32_t)0/*xxc*/' };
									if (to_5869 == null) { return string_5865 };
									return '(/*T = null*/' + this.stringifyType(to_5869) + ')(' + string_5865 + ')';
									return '%T = null%';
								}
							} break;
							};
						};
						const tot = JSON.stringify('' + to_5869);
						if (to_5869 == null) { return string_5865 };
						return '(/*A = B*/' + ('/*' + (tot) + '*/') + this.stringifyType(to_5869) + ')(' + string_5865 + ')';
					}
					};
				}
				};
			};
			return string_5865;
		};
		printFunctionArguments(args_5896, funcType_5898, defaults_5900) {
			if ((args_5896.length == 0) && (this.thisArgument != null)) { return '(' + this.thisArgument + ')' };
			if (args_5896.length == 0) { return '()' };
			{
				const temp_5902 = (funcType_5898);
				switch (temp_5902&&temp_5902[0]) {
				case 10: {
					const types_5904 = temp_5902[1];
					{
						const results = [];
						{
							let step_5907 = 0;
							const thisArgument = this.thisArgument;
							if (step_5907 == 0 && thisArgument != null) { step_5907 = 1 };
							if (step_5907 == 1) { results.push(thisArgument) };
						};
						{
							let a_5910 = 0;
							let it_5912 = 0;
							let at_5914 = args_5896.length;
							while (it_5912 < at_5914) {
								a_5910 = it_5912;
								it_5912++;
								{
									let result_5916 = this.stringifyType(types_5904[a_5910]) + ' ' + args_5896[a_5910] + '_';
									if (defaults_5900) {
										const temp_5918 = (types_5904[a_5910]);
										switch (temp_5918&&temp_5918[0]) {
										case 2: {
											result_5916 += ' = ((Any_ *)0)'
										} break;

										case 1: {
											result_5916 += ' = ((Any_ *)0)'
										} break;
										};
									};
									results.push(result_5916);
								};
							};
						};
						return '(' + results.join(', ') + ')';
						return '(' + (() => {
							const result_5920 = [];
							const value_5922 = args_5896.length;
							for (const a of $toIterator(value_5922)) result_5920.push((() => {
								let result_5924 = this.stringifyType(types_5904[a]) + ' ' + args_5896[a] + '_';
								if (defaults_5900) {
									const temp_5926 = (types_5904[a]);
									switch (temp_5926&&temp_5926[0]) {
									case 2: {
										result_5924 += ' = ((Any_ *)0)'
									} break;

									case 1: {
										result_5924 += ' = ((Any_ *)0)'
									} break;
									};
								};
								return result_5924;
							})());
							return result_5920;
						})().join(', ') + ')';
					}
				} break;
				};
			};
			return '(' + (() => {
				const result_5928 = [];
				const value_5930 = args_5896.length;
				for (const a of $toIterator(value_5930)) result_5928.push('Any_* ' + args_5896[a] + '_');
				return result_5928;
			})().join(', ') + ')';
		};
		stringType(t_5932, prefix) {
			if (t_5932 == null) { return 'void*' };
			{
				const temp_5935 = (t_5932);
				switch (temp_5935&&temp_5935[0]) {
				case 2: {
					const name_5937 = temp_5935[1];
					const params = temp_5935[2];
					return '_x' + name_5937
				} break;

				case 1: {
					const name_5940 = temp_5935[1];
					return '_x' + name_5940
				} break;

				case 5: {
					{
					}
				} break;

				case 0: {
					const t_5942 = temp_5935[1];
					return this.stringType(t_5942, '')
				} break;
				};
			};
			return prefix + 'void*';
		};
		printType(t_5944) {
			const type_5946 = this.stringType(t_5944, '');
			return type_5946;
		};
		stringifyType(t_5948) {
			const temp_5950 = (t_5948);
			switch (temp_5950&&temp_5950[0]) {
			case 2: {
				const t_5952 = temp_5950[1];
				{
					const name_5954 = this.stringifyType(t_5952);
					if (name_5954 == 'int32_t') { return 'Null$Int32' };
					if (name_5954 == 'double') { return 'Null$Float64' };
					return name_5954;
				}
			} break;

			case 1: {
				const handle = temp_5950[1];
				return this.stringifyType(handle.value)
			} break;

			case 4: {
				const type_5957 = temp_5950[1];
				{
					if (type_5957.name == 'Int') { return 'int32_t' };
					if (type_5957.name == 'Int32') { return 'int32_t' };
					if (type_5957.name == 'UInt64') { return 'uint64_t' };
					if (type_5957.name == 'Int64') { return 'int64_t' };
					if (type_5957.name == 'Bool') { return 'uint8_t' };
					if (type_5957.name == 'Bool32') { return 'int32_t' };
					if (type_5957.name == 'Bool8') { return 'uint8_t' };
					if (type_5957.name == 'Void') { return 'void' };
					if (type_5957.name == 'Float') { return 'double' };
					const atts = null;
					const native = Normalizer.getAtt(null, 'native');
					{
						let step_5961 = 0;
						const native_5963 = native;
						if (step_5961 == 0 && native_5963 != null) { step_5961 = 1 };
						if (step_5961 == 1) {
							const temp_5965 = (native_5963.values[0]);
							switch (temp_5965&&temp_5965[0]) {
							case 0: {
								const s_5967 = temp_5965[1];
								return s_5967
							} break;
							};
						};
					};
					return type_5957.name + '_*';
				}
			} break;

			case 3: {
				const type_5969 = temp_5950[1];
				return '/*Class*/ ' + type_5969.name + '_*'
			} break;

			case 6: {
				const type_5971 = temp_5950[1];
				{
					{
						let step_5973 = 0;
						const sub = type_5971.fieldsTypeSimple;
						if (step_5973 == 0 && sub != null) { step_5973 = 1 };
						if (step_5973 == 1) { return this.stringifyType(sub) };
					};
					return '' + type_5971.name + '_*';
				}
			} break;

			case 7: {
				const type_5976 = temp_5950[1];
				return '' + type_5976.name + '_*'
			} break;

			case 11: {
				return 'Any_*/*Struct*/'
			} break;

			case 10: {
				const args_5978 = temp_5950[1];
				const returns_5980 = temp_5950[2];
				{
					const temp_5982 = (this.tempId++);
					const returnsType = this.stringifyType(returns_5980);
					const t_5985 = t_5948;
					let typedef = 'typedef/*' + t_5985[t_5985.length - 1] + '*/ ' + returnsType + (' (*_$' + (temp_5982) + '$$)(');
					const a_5988 = [];
					for (const arg of $toIterator(args_5978)) {
						a_5988.push(this.stringifyType(arg));
					};
					typedef += '/*' + args_5978.length + ' args*/';
					typedef += a_5988.join(', ') + ');\n';
					this.typedefFunctions.push(typedef);
					this.typedefFunctions.push('typedef std::function<' + returnsType + '(' + a_5988.join(', ') + ')> _$' + temp_5982 + ';\n');
					return ('_$' + (temp_5982) + '');
				}
			} break;

			case null: case undefined: {
				return 'Any_*/*null?*/'
			} break;

			default:
			throw 'stringifyType ' + t_5948
			};
		};
		getType(e_5990) {
			{
				let step_5992 = 0;
				const type_5994 = this.project.expressionType.get(e_5990);
				if (step_5992 == 0 && type_5994 != null) { step_5992 = 1 };
				if (step_5992 == 1) { return type_5994 };
			};
			{
				const temp_5996 = (e_5990);
				switch (temp_5996&&temp_5996[0]) {
				case 1: {
					return this.project.typer.typeInt
				} break;

				case 3: {
					return this.project.typer.typeFloat
				} break;

				case 0: {
					return this.project.typer.typeString
				} break;

				case 4: {
					return this.project.typer.typeBool
				} break;

				case 5: {
					return this.project.typer.typeBool
				} break;

				case 6: {
					const type_5998 = temp_5996[2];
					return type_5998
				} break;

				case 19: {
					const expr_6000 = temp_5996[1];
					return this.getType(expr_6000)
				} break;

				case 14: {
					const type_6002 = temp_5996[3];
					return type_6002
				} break;

				case 16: {
					const type_6004 = temp_5996[4];
					return type_6004
				} break;

				case 11: {
					const type_6006 = temp_5996[3];
					return type_6006
				} break;

				case 10: {
					const type_6008 = temp_5996[1];
					return type_6008
				} break;

				case 9: {
					return /*UnknownNullable*/[1,{value:null},"F:/hexa-dev/hexa/source/targets/genCxx.hexa:1565"]
				} break;

				case 27: {
					const to_6010 = temp_5996[2];
					return to_6010
				} break;

				case 18: {
					const funcType_6012 = temp_5996[6];
					return funcType_6012
				} break;

				case 17: {
					const funcType_6014 = temp_5996[5];
					return funcType_6014
				} break;

				case 21: {
					const type_6016 = temp_5996[2];
					return type_6016
				} break;

				case 15: {
					const type_6018 = temp_5996[3];
					return type_6018
				} break;

				default:
				return this.project.typer.typeAny
				};
			};
		};
		isPrimitive(e_6020) {
			const temp_6022 = (e_6020);
			switch (temp_6022&&temp_6022[0]) {
			case 1: {
				return true
			} break;

			case 3: {
				return true
			} break;

			case 0: {
				return true
			} break;

			case 4: {
				return true
			} break;

			case 5: {
				return true
			} break;

			case 6: {
				const type_6024 = temp_6022[2];
				return true
			} break;

			case 10: {
				const type_6026 = temp_6022[1];
				return true
			} break;

			case 9: {
				return true
			} break;

			default:
			return false
			};
		};
		isNonReferencePrimitive(e_6028) {
			const temp_6030 = (e_6028);
			switch (temp_6030&&temp_6030[0]) {
			case 1: {
				return true
			} break;

			case 3: {
				return true
			} break;

			case 4: {
				return true
			} break;

			case 5: {
				return true
			} break;

			default:
			return false
			};
		};
		registerString(string_6032) {
			this.declarationsOfStrings.push(string_6032);
			return this.declarationsOfStrings.length - 1;
		};
		printExpression(e_6034) {
			const temp_6036 = (e_6034);
			switch (temp_6036&&temp_6036[0]) {
			case 10: {
				return (() => {
					const result_6038 = this.customThis;
					if (result_6038 != null) { return result_6038 };
					return 'this';
				})()
			} break;

			case 6: {
				const name_6040 = temp_6036[1];
				{
					if (this.project.native.get(e_6034) == true) { return name_6040 };
					return '' + name_6040 + '_';
				}
			} break;

			case 9: {
				{
					return this.printTypeConverter('nullptr', this.project.typer.typeAny, this.getType(e_6034));
					return 'nullptr';
					return '((Any_ *)0)';
				}
			} break;

			case 1: {
				const v_6042 = temp_6036[1];
				{
					if (this.getType(e_6034) != this.project.typer.typeInt) { return this.printTypeConverter('(int32_t)' + v_6042, this.project.typer.typeInt, this.getType(e_6034)) };
					return '(int32_t)' + v_6042;
				}
			} break;

			case 3: {
				const v_6044 = temp_6036[1];
				return '(double)' + v_6044
			} break;

			case 0: {
				const string_6046 = temp_6036[1];
				{
					{
						let step_6048 = 0;
						const id_6050 = this.declarationsOfStringsMap.get(string_6046);
						if (step_6048 == 0 && id_6050 != null) { step_6048 = 1 };
						if (step_6048 == 1) { return ('Strings_[' + (id_6050) + ']') + '/*has:' + string_6046.split('*').join('#') + '*/' };
					};
					const s_6052 = string_6046.split('');
					const charsOut = [];
					while ((s_6052.length > 0)) {
						const temp_6055 = (s_6052[0]);
						switch (temp_6055) {
						case '\'': {
							{
								charsOut.push('\\\'');
								s_6052.shift();
							}
						} break;

						case '"': {
							{
								charsOut.push('\\"');
								s_6052.shift();
							}
						} break;

						case '\n': {
							{
								charsOut.push('\\n');
								s_6052.shift();
							}
						} break;

						case '\r': {
							{
								charsOut.push('\\r');
								s_6052.shift();
							}
						} break;

						case '\\': {
							{
								s_6052.shift();
								if (s_6052[0] == '\'') {
									charsOut.push('\\\'');
									s_6052.shift();
								} else if (s_6052[0] == '"') {
									charsOut.push('\\"');
									s_6052.shift();
								} else if (s_6052[0] == '\\') {
									charsOut.push('\\\\');
									s_6052.shift();
								} else {
									charsOut.push('\\');
								};
							}
						} break;

						default:
						{
							charsOut.push(s_6052[0]);
							s_6052.shift();
						}
						};
					};
					const id_6057 = this.registerString(charsOut.join(''));
					this.declarationsOfStringsMap.set(string_6046, id_6057);
					return ('Strings_[' + (id_6057) + ']') + '/*new:' + string_6046.split('*').join('#') + '*/';
				}
			} break;

			case 4: {
				{
					if (this.getType(e_6034) != this.project.typer.typeBool) { return this.printTypeConverter('(uint8_t)1', this.project.typer.typeBool, this.getType(e_6034)) };
					return '(uint8_t)1';
				}
			} break;

			case 5: {
				{
					if (this.getType(e_6034) != this.project.typer.typeBool) { return this.printTypeConverter('(uint8_t)0', this.project.typer.typeBool, this.getType(e_6034)) };
					return '(uint8_t)0';
				}
			} break;

			case 11: {
				const expr_6059 = temp_6036[1];
				const name_6061 = temp_6036[2];
				{
					const temp_6063 = (expr_6059);
					switch (temp_6063&&temp_6063[0]) {
					case 10: {
						return ((() => {
							const result_6065 = this.customThis;
							if (result_6065 != null) { return result_6065 };
							return 'this';
						})()) + '->' + name_6061 + '_'
					} break;

					case 6: {
						const id_6067 = temp_6063[1];
						{
							if (id_6067.charAt(0) == id_6067.charAt(0).toUpperCase()) { return id_6067 + '_::' + name_6061 + '_' };
							const type_6069 = this.getType(expr_6059);
							if ((type_6069 == this.project.typer.typeAny) || (type_6069 == null)) { return this.printExpression(expr_6059) + '->let_(String_fromUTF8z("' + name_6061 + '"))' };
							return this.printExpression(expr_6059) + '->' + name_6061 + '_';
						}
					} break;

					default:
					return this.printExpression(expr_6059) + '->' + name_6061 + '_'
					};
				}
			} break;

			case 14: {
				const e_6071 = temp_6036[1];
				const args_6073 = temp_6036[2];
				const type_6075 = temp_6036[3];
				const kind_6077 = temp_6036[4];
				{
					const arguments_6079 = [];
					{
						let i_6081 = 0;
						let it_6083 = 0;
						let at_6085 = args_6073.length;
						while (it_6083 < at_6085) {
							i_6081 = it_6083;
							it_6083++;
							{
								const temp_6087 = (this.tempId++);
								const expects_6089 = this.getType(args_6073[i_6081]);
								if (this.isPrimitive(args_6073[i_6081])) { arguments_6079.push(this.printTypeConverter(this.printExpression(args_6073[i_6081]), this.getType(args_6073[i_6081]), expects_6089)) } else {
									this.metaBlock.push(this.stringifyType((() => {
										const result_6091 = expects_6089;
										if (result_6091 != null) { return result_6091 };
										return this.getType(args_6073[i_6081]);
									})()) + (' _$' + (temp_6087) + ' = ') + this.printTypeConverter(this.printExpression(args_6073[i_6081]), this.getType(args_6073[i_6081]), (() => {
										const result_6093 = expects_6089;
										if (result_6093 != null) { return result_6093 };
										return this.getType(args_6073[i_6081]);
									})()));
									arguments_6079.push(('_$' + (temp_6087) + ''));
								};
							};
						};
					};
					{
						const temp_6095 = (kind_6077);
						switch (temp_6095) {
						case 10: {
							{
								return this.printExpression(e_6071) + '(' + arguments_6079.join(', ') + ')';
								return this.printExpression(e_6071) + '/*static*/' + this.printCallArguments(args_6073);
							}
						} break;

						case 12: {
							{
								return this.printExpression(e_6071) + '(' + arguments_6079.join(', ') + ')';
								return this.printExpression(e_6071) + this.printCallArguments(args_6073);
								{
									const temp_6097 = (e_6071);
									switch (temp_6097&&temp_6097[0]) {
									case 11: {
										const expr_6099 = temp_6097[1];
										const name_6101 = temp_6097[2];
										const result_6103 = temp_6097[3];
										{
											const temp_6105 = (this.tempId++);
											const temp1 = (this.tempId++);
											const mb = this.metaBlock;
											this.metaBlock = [];
											const meta_6109 = this.stringifyType(this.getType(expr_6099)) + (' _$' + (temp_6105) + ' = ') + this.printExpression(expr_6099);
											const result_6111 = ('_$' + (temp_6105) + '->') + name_6101 + '_' + this.printCallArguments(args_6073);
											for (const b of $toIterator(this.metaBlock)) {
												mb.push(b);
											};
											mb.push(meta_6109);
											this.metaBlock = mb;
											return result_6111;
										}
									} break;
									};
								};
							}
						} break;
						};
					};
					return this.printExpression(e_6071) + this.printCallArguments(args_6073);
				}
			} break;

			case 17: {
				const name_6113 = temp_6036[1];
				const expr_6115 = temp_6036[2];
				const args_6117 = temp_6036[3];
				const defaults_6119 = temp_6036[4];
				const funcType_6121 = temp_6036[5];
				{
					const _currentReturnType_6123 = this.currentReturnType;
					this.currentReturnType = this.getFunctionReturnType(funcType_6121);
					const result_6125 = '[&]' + this.printFunctionArguments(args_6117, funcType_6121, true) + '->' + this.printFunctionReturnType(funcType_6121) + ' ' + this.printBlock(expr_6115);
					this.currentReturnType = _currentReturnType_6123;
					return result_6125;
				}
			} break;

			case 18: {
				const expr_6127 = temp_6036[1];
				const args_6129 = temp_6036[2];
				const defaults_6131 = temp_6036[3];
				const types_6133 = temp_6036[4];
				const returns_6135 = temp_6036[5];
				const funcType_6137 = temp_6036[6];
				{
					const _currentReturnType_6139 = this.currentReturnType;
					this.currentReturnType = this.getFunctionReturnType(funcType_6137);
					const result_6141 = '[&]' + this.printFunctionArguments(args_6129, funcType_6137, true) + '-> ' + this.printFunctionReturnType(funcType_6137) + ' ' + '{ return ' + this.printExpression(expr_6127) + '; }';
					this.currentReturnType = _currentReturnType_6139;
					return result_6141;
					const _currentReturnType_6143 = this.currentReturnType;
					this.currentReturnType = returns_6135;
					const result_6145 = '[&](' + (() => {
						const result_6147 = [];
						const value_6149 = args_6129.length;
						for (const i of $toIterator(value_6149)) result_6147.push(this.stringType(types_6133[i]) + ' ' + args_6129[i] + '_');
						return result_6147;
					})().join(', ') + ')-> ' + this.stringifyType(this.currentReturnType) + ' ' + '{ return ' + this.printExpression(expr_6127) + '; }';
					this.currentReturnType = _currentReturnType_6143;
					return result_6145 + JSON.stringify(funcType_6137);
				}
			} break;

			case 15: {
				const e_6151 = temp_6036[1];
				const args_6153 = temp_6036[2];
				return '/*' + e_6151 + '*/' + '' + this.printExpression(e_6151) + '::new_' + this.printCallArguments(args_6153)
			} break;

			case 21: {
				const el_6155 = temp_6036[1];
				{
					if (el_6155.length == 0) { return 'Array_::new_(0)' };
					return 'Array_from(' + (() => {
						const result_6157 = [];
						const value_6159 = el_6155;
						for (const a of $toIterator(value_6159)) result_6157.push(this.printExpression(a));
						return result_6157;
					})().join(', ') + ')';
				}
			} break;

			case 23: {
				const op_6161 = temp_6036[1];
				const postfix = temp_6036[2];
				const e_6164 = temp_6036[3];
				{
					if (postfix) { return this.printExpression(e_6164) + Token.stringify(op_6161) };
					return Token.stringify(op_6161) + this.printExpression(e_6164);
				}
			} break;

			case 24: {
				const nullable = temp_6036[1];
				const othewise = temp_6036[2];
				return '((' + this.printExpression(nullable) + ')||(' + this.printExpression(othewise) + '))'
			} break;

			case 19: {
				const e_6168 = temp_6036[1];
				return '(' + this.printExpression(e_6168) + ')'
			} break;

			case 16: {
				const a_6170 = temp_6036[1];
				const op_6172 = temp_6036[2];
				const b = temp_6036[3];
				{
					if (op_6172 == 111) {
						if (this.getType(a_6170) == this.project.typer.typeString) { return '(' + this.printExpression(a_6170) + ')->concat_(' + this.printTypeConverter(this.printExpression(b), this.getType(b), this.project.typer.typeString) + ')' };
						if (this.getType(b) == this.project.typer.typeString) { return 'String_opAdd(' + this.printTypeConverter(this.printExpression(a_6170), this.getType(a_6170), this.project.typer.typeString) + ', ' + this.printExpression(b) + ')' };
					};
					const ops = /*?*/(op_6172 == 110)? ('/') : Token.stringify(op_6172);
					return this.printExpression(a_6170) + ' ' + ops + ' ' + this.printExpression(b);
				}
			} break;

			case 26: {
				const expr_6176 = temp_6036[1];
				const index = temp_6036[2];
				{
					{
						const temp_6179 = (this.getType(expr_6176));
						switch (temp_6179&&temp_6179[0]) {
						case 4: {
							const type_6181 = temp_6179[1];
							const generic = temp_6179[2];
							if (type_6181.name != 'Array') { return this.printExpression(expr_6176) + '[' + this.printTypeConverter(this.printExpression(index), this.getType(index), this.project.typer.typeInt) + ']' }
						} break;
						};
					};
					return this.printExpression(expr_6176) + '->get_(' + this.printTypeConverter(this.printExpression(index), this.getType(index), this.project.typer.typeInt) + ')';
				}
			} break;

			case 25: {
				const econd_6184 = temp_6036[1];
				const eif_6186 = temp_6036[2];
				const eelse_6188 = temp_6036[3];
				{
					let r_6190 = '';
					try {
						r_6190 += '(' + this.printExpression(econd_6184) + ')?';
						r_6190 += '(' + this.printExpression(eif_6186) + ')';
						r_6190 += ':' + this.printExpression(eelse_6188);
						return r_6190;
					} catch (temp_6192) {
						if (true) {
						const error = temp_6192
						{
							console.log('If =>', e_6034, error);
							return r_6190 + '<!-- If => error -->';
						} } else

						throw temp_6192;
					};
				}
			} break;

			case 31: {
				const expr_6194 = temp_6036[1];
				{
					const e_6196 = this.printExpression(expr_6194);
					return '(' + e_6196 + ' == ((Any_ *)0)? -1 : ' + e_6196 + '->is_)';
				}
			} break;

			case 20: {
				const names = temp_6036[1];
				const el_6199 = temp_6036[2];
				return 'Object_from(' + (() => {
					const result_6201 = [];
					const value_6203 = el_6199.length;
					for (const i of $toIterator(value_6203)) result_6201.push(((names[i]) + ', ' + this.printExpression(el_6199[i])));
					return result_6201;
				})().join(', ') + ')'
			} break;

			case 22: {
				const keys = temp_6036[1];
				const values = temp_6036[2];
				{
					if (keys.length == 0) { return 'Map_::new_()' };
					return 'Map_from(' + (() => {
						const result_6207 = [];
						const value_6209 = keys.length;
						for (const i of $toIterator(value_6209)) result_6207.push('' + this.printExpression(keys[i]) + ', ' + this.printExpression(values[i]) + '');
						return result_6207;
					})().join(', ') + ')';
				}
			} break;

			case 29: {
				const a_6211 = temp_6036[1];
				const op_6213 = temp_6036[2];
				const value_6215 = temp_6036[3];
				return this.printExpression(a_6211) + ' ' + Token.stringify(op_6213) + '= ' + this.printExpression(value_6215)
			} break;

			case 30: {
				const kind_6217 = temp_6036[1];
				const args_6219 = temp_6036[2];
				const s_6221 = temp_6036[3];
				{
					const temp_6223 = (kind_6217);
					switch (temp_6223) {
					case 0: {
						return '((' + this.printExpression(args_6219[0]) + ')' + s_6221 + '(' + this.printExpression(args_6219[1]) + '))'
					} break;

					case 1: {
						return s_6221 + this.printCallArguments(args_6219)
					} break;

					case 2: {
						return '(' + s_6221 + '(' + this.printExpression(args_6219[0]) + '))'
					} break;

					case 3: {
						return '((' + this.printExpression(args_6219[1]) + ')' + s_6221 + ')'
					} break;
					};
				}
			} break;

			case 27: {
				const e_6225 = temp_6036[1];
				const to_6227 = temp_6036[2];
				{
					return this.printTypeConverter(this.printExpression(e_6225), this.getType(e_6225), to_6227);
					return 'reinterpret_cast<' + this.stringifyType(to_6227) + '>(' + this.printExpression(e_6225) + '))';
				}
			} break;

			case 32: {
				const typeName = temp_6036[1];
				const tagName = temp_6036[2];
				const tag = temp_6036[3];
				const args_6232 = temp_6036[4];
				return '' + typeName + '_$' + tagName + '_(' + (() => {
					const result_6234 = [];
					const value_6236 = args_6232;
					for (const a of $toIterator(value_6236)) result_6234.push(this.printExpression(a));
					return result_6234;
				})().join(', ') + ')'
			} break;

			case 33: {
				const expr_6238 = temp_6036[1];
				const index_6240 = temp_6036[2];
				return this.printExpression(expr_6238) + '->enum_[' + index_6240 + ']'
			} break;

			default:
			{
				console.error('Unknown expression kind:', e_6034);
				return '<!-- ' + ((() => {
					const result_6242 = e_6034;
					if (result_6242 != null) { return result_6242 };
					return [];
				})())[0] + ' -->';
			}
			};
		};
	}
	GenCxx.spawn = () => { return new GenCxx() };
	var NiceProject = class {
		constructor() {
			this.interfaces = []
			this.classes = []
			this.enumsSimple = []
			this.enumsComplex = []
			this.globalVars = []
			this.globalFuncs = []
			this.init = []
			this.expressionType = new Map()
			this.expressionPosition = new Map()
			this.statementPosition = new Map()
			this.native = new Map()
		{
		} };
	}
	var NiceClass = class {
		constructor() {
			this.staticMethods = []
			this.staticVars = []
			this.methods = []
			this.vars = []
			this.renames = []
			this.property = []
			this.jsRequire = null
			this.jsNative = null
		{
		} };
	}
	var NiceSimpleEnum = class {
		constructor() {
			this.staticMethods = []
			this.staticVars = []
		{
		} };
	}
	var NiceComplexEnum = class {
		constructor() {
			this.staticMethods = []
			this.staticVars = []
		{
		} };
	}
	var Attribute = class {
		constructor(name, values) {
		{
			this.name = name;
			this.values = values;
		} };
	}
	var Module = class {
		constructor() {
			this.file = '.hexa'
			this.path = 'module'
			this.nodes = []
			this.exported = new Map()
			this.imported = new Map()
		{
		} };
	}
	var Project = class {
		constructor() {
			this.mapDecorators = new Map()
			this.mapNames = new Map()
			this.data = new Map()
			this.hints = []
			this.defines = {}
			this.name = 'Hexa Project'
			this.roots = []
			this.globals = new Map()
			this.moduleName = []
			this.moduleInfo = []
		{
		} };
	}
	var NodeData = class {
		constructor(atLine, atColumn, atFile) {
		{
			this.line = atLine;
			this.column = atColumn;
			this.fileName = atFile;
		} };
	}
	var DataHelper = class {
	}
	DataHelper.varName = (v_6936) => {
			const temp_6938 = (v_6936);
			switch (temp_6938&&temp_6938[0]) {
			case 24: {
				const name_6940 = temp_6938[1];
				return name_6940
			} break;

			default:
			throw ('varName got not a Var, but `' + (v_6936) + '`')
			};
		};
	DataHelper.nameOf = (v_6942) => {
			const temp_6944 = (v_6942);
			switch (temp_6944&&temp_6944[0]) {
			case 48: {
				const node_6946 = temp_6944[1];
				return DataHelper.nameOf(node_6946)
			} break;

			case 27: {
				const node_6948 = temp_6944[1];
				return DataHelper.nameOf(node_6948)
			} break;

			case 24: {
				const name_6950 = temp_6944[1];
				return name_6950
			} break;

			case 39: {
				const t_6952 = temp_6944[1];
				{
					{
						const temp_6954 = (t_6952);
						switch (temp_6954&&temp_6954[0]) {
						case 1: {
							const name_6956 = temp_6954[1];
							return name_6956
						} break;

						case 2: {
							const name_6958 = temp_6954[1];
							return name_6958
						} break;
						};
					};
					throw 'unreachable';
				}
			} break;

			case 22: {
				const name_6960 = temp_6944[1];
				return name_6960
			} break;

			case 26: {
				const t_6962 = temp_6944[1];
				{
					{
						const temp_6964 = (t_6962);
						switch (temp_6964&&temp_6964[0]) {
						case 1: {
							const name_6966 = temp_6964[1];
							return name_6966
						} break;

						case 2: {
							const name_6968 = temp_6964[1];
							return name_6968
						} break;
						};
					};
					throw 'unreachable';
				}
			} break;

			case 9: {
				const t_6970 = temp_6944[1];
				{
					const temp_6972 = (t_6970);
					switch (temp_6972&&temp_6972[0]) {
					case 1: {
						const name_6974 = temp_6972[1];
						return name_6974
					} break;

					case 2: {
						const name_6976 = temp_6972[1];
						return name_6976
					} break;
					};
				}
			} break;

			case 47: {
				const field_6978 = temp_6944[1];
				return DataHelper.nameOf(field_6978)
			} break;

			default:
			throw ('nameOf expected named node, but got `' + (v_6942) + '`')
			};
		};
	DataHelper.asStringAttValue = (a_6980, index_6982) => {
			const temp_6984 = (a_6980.values[index_6982]);
			switch (temp_6984&&temp_6984[0]) {
			case null: case undefined: {
				throw 'Got null, not a string'
			} break;

			case 0: {
				const s_6986 = temp_6984[1];
				return s_6986
			} break;

			default:
			throw ('Got `' + (a_6980.values[index_6982]) + '`, not a string')
			};
		};
	DataHelper.getLastOfBlock = (block) => {
			const temp_6989 = (block);
			switch (temp_6989&&temp_6989[0]) {
			case null: case undefined: {
				throw 'Got null, not a block'
			} break;

			case 12: {
				const el_6991 = temp_6989[1];
				return el_6991[el_6991.length - 1]
			} break;

			default:
			throw ('Got `' + (block) + '`, not a block')
			};
		};
	DataHelper.isVoidValue = (block_6993) => {
			{
				const temp_6995 = (block_6993);
				switch (temp_6995&&temp_6995[0]) {
				case null: case undefined: {
					return true
				} break;

				case 16: {
					return true
				} break;

				case 18: {
					return true
				} break;

				case 19: {
					return true
				} break;

				case 24: {
					return true
				} break;

				case 14: {
					const eelse_6997 = temp_6995[3];
					if (eelse_6997 == null) { return true }
				} break;

				case 39: {
					return true
				} break;

				case 26: {
					return true
				} break;

				case 35: {
					return true
				} break;

				case 12: {
					const el_6999 = temp_6995[1];
					{
						if (el_6999.length == 0) { return true };
						return DataHelper.isVoidValue(el_6999[el_6999.length - 1]);
					}
				} break;

				default:
				return false
				};
			};
			return false;
		};
	DataHelper.extractTypeName = (t_7001) => {
			const temp_7003 = (t_7001);
			switch (temp_7003&&temp_7003[0]) {
			case 1: {
				const name_7005 = temp_7003[1];
				return name_7005
			} break;

			case 2: {
				const name_7007 = temp_7003[1];
				return name_7007
			} break;

			case null: case undefined: {
				return null
			} break;

			default:
			throw 'Type has no name: ' + t_7001
			};
		};
	DataHelper.getAttribute = (atts, name_7010) => {
			if (atts != null && atts.length > 0) { for (const att of $toIterator(atts)) {
				if (att.name == name_7010) { return att };
			} };
			return null;
		};
	var ClassType = class {
		constructor() {
			this.owner = null
			this.fieldNames = []
			this.fieldRenames = []
			this.fieldStatic = []
			this.fieldInitialized = []
			this.protected = []
			this.immutable = []
			this.constructor = (-1)
			this.indexKeyType = null
			this.indexValueType = null
			this.fields = new Map()
			this.genericParams = []
			this.useless = true
			this.instanceCache = /*ClassInstance*/[4,this,null,"F:/hexa-dev/hexa/source/data/types.hexa:115"]
			this.genericCache = []
		{
		} };
		instantiate() { return this.instanceCache };
		instantiateGeneric(params) {
			for (const cached of $toIterator(this.genericCache)) {
				if (cached.length != (params.length + 1)) { continue };
				let found = true;
				{
					let i = 0;
					let it = 0;
					let at = cached.length - 1;
					while (it < at) {
						i = it;
						it++;
						{
							if (params[i] != cached[i + 1]) {
								found = false;
								break;
							};
						};
					};
				};
				if (found) {
					const result_7145 = cached[0];
					return result_7145;
				};
			};
			const result_7147 = /*ClassInstance*/[4,this,params,"F:/hexa-dev/hexa/source/data/types.hexa:147"];
			const cache = [result_7147];
			for (const param of $toIterator(params)) {
				cache.push(param);
			};
			this.genericCache.push(cache);
			return result_7147;
		};
	}
	var EnumType = class {
		constructor() {
			this.fieldNames = []
			this.tagBindVars = []
			this.tagBindVarsNames = []
			this.fieldStatic = []
			this.fieldEnumConstructor = []
			this.fieldType = []
			this.fieldsTypeSimple = null
		{
		} };
	}
	var CompilerError = class {
		constructor(except, details, line, column, filename) {
		{
			this.exception = except;
			this.details = /*?*/((details == null))? ('') : details;
			this.line = /*?*/((line == null))? (0) : line;
			this.column = /*?*/((column == null))? (0) : column;
			this.fileName = /*?*/((filename == null))? ('') : filename;
		} };
		toString() { return '[' + this.fileName + ':' + this.line + ':' + this.column + ']: ' + this.details };
	}
	var CompilerErrors = class {
		constructor(errors) {
		this.errors = errors };
		toString() {
			{
				let step = 0;
				const error = this.errors[0];
				let temp = null;
				if (step == 0 && error != null) {
					temp = this.errors.length == 1;
					step = 1;
				};
				if (step == 1 && temp != false) { step = 2 };
				if (step == 2) { return error.toString() };
			};
			return (() => {
				const result = [];
				const value = this.errors;
				for (const error of $toIterator(value)) result.push(error.toString());
				return result;
			})().join('\n') + '\nFound ' + this.errors.length + ' errors.';
		};
	}
	var Hint = class {
		constructor(code, details, position) {
		{
			this.code = code;
			this.details = details;
			this.at = position;
		} };
		toString() { return '[' + this.at.fileName + ':' + this.at.line + ':' + this.at.column + ']: Hint#' + this.code + ': ' + this.details };
	}
	var Main = class {
		init() {
			if (Fs.existsSync('hexa.json')) {
				const create = question('Hexa package \'hexa.json\' already exists here. Create new? (no)');
				if ((create.toLowerCase() != 'yes') && (create.toLowerCase() != 'y')) { process_850.exit(1) };
			};
			let currentDirTmp = process.cwd().split(path.sep);
			let packageFileName = currentDirTmp.splice(0, (-1)).join(path.sep) + path.sep + 'hexa.json';
			let currentDir = currentDirTmp[currentDirTmp.length - 1];
			let name = question(('Enter package name (' + (currentDir) + '): '));
			if (name == '') { name = currentDir };
			let version_7204 = question('Enter package version (1.0.0): ');
			if (version_7204 == '') { version_7204 = '1.0.0' };
			let description = question('Enter package description: ');
			let main = question('Enter main file (main.hexa): ');
			if (main == '') { main = 'main.hexa' };
			const target = {name:'default', generator:'js', output:name, options:[]};
			const generatorstr = question('Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n');
			if (generatorstr.toUpperCase() == 'C' || generatorstr == '2') { target.generator = 'native' } else if (generatorstr.toUpperCase() == 'HAXE' || generatorstr == '3') { target.generator = 'haxe' } else {
				target.output += '.js';
				const option = question('Select standard library (no library):\n1. no library\n2. nodejs\n3. browser\n');
				{
					const temp = (option);
					switch (temp) {
					case '2': {
						target.options.push('nodejs')
					} break;

					case '3': {
						target.options.push('browser')
					} break;
					};
				};
			};
			while (((!(main.endsWith('.hexa'))))) {
				process_850.stdout.write('Wrong file name. Must end with \'.hexa\'.\n');
				main = question('Enter main file (main.hexa): ');
			};
			const author = question('Enter package author name: ');
			const license = question('Enter license: ');
			const pack = {name:name, version:version_7204, description:description, author:author, license:license, targets:[target], files:[main]};
			const extras = [];
			let addGit = false;
			if (Fs.existsSync('.git')) { if ((!Fs.existsSync('.gitignore')) || (!Fs.existsSync('.gitattributes'))) { if (['y', 'yes', ''].includes(question('Create additional git files? (.gitignore, .gitattributes)').toLowerCase().trim())) {
				if ((!Fs.existsSync('.gitignore'))) { extras.push('.gitignore') };
				if ((!Fs.existsSync('.gitattributes'))) { extras.push('.gitattributes') };
				addGit = true;
			} } };
			const addMain = Fs.existsSync(main) == false;
			if (addMain) { extras.push(main) };
			const packageStr = JSON.stringify(pack, null, '\t').split('\r\n').join('\n').split('\n').join('\r\n');
			const extrasStr = /*?*/(extras.length > 0)? ('\nAnd \'' + extras.join('\', \'') + '\'') : '';
			const answ = question(('About to write to: ' + (packageFileName) + ':\n' + (packageStr) + '' + (extrasStr) + '\nIs this ok? (yes)'));
			if ((answ != '') && (answ.toLowerCase() != 'yes') && (answ.toLowerCase() != 'y')) {
				console.log('Exiting without changes');
				process_850.exit(1);
			};
			Fs.writeFileSync('hexa.json', packageStr + '\r\n');
			if ((addMain) && ((!Fs.existsSync(main)))) { Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")') };
			if ((addGit) && ((!Fs.existsSync('.gitattributes')))) { Fs.writeFileSync('.gitattributes', ['# Auto detect text files and perform LF normalization', '* text=auto', ''].join('\r\n')) };
			if ((addGit) && ((!Fs.existsSync('.gitignore')))) { Fs.writeFileSync('.gitignore', ['# Mac & Win', '*~', '._*', '*DS_Store*', '.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', 'ehthumbs.db', 'Thumbs.db', '*Thumbs.db', '__MACOSX', '', '# Custom', '*.map', target.output, 'node_modules', ''].join('\r\n')) };
			process_850.stdout.write('Hexa package initialized!');
		};
		symlink() {
			{
				const temp_7221 = ((process.platform));
				switch (temp_7221) {
				case 'linux': case 'mac??': {
					{
						Fs.renameSync('./hexa', '/usr/bin/hexa');
						console.log('Symlinked successfully!');
					}
				} break;

				case 'win32???': {
					{
					}
				} break;

				default:
				{
					console.log(('Cannot symlink on ' + (process.platform) + '. You must add hexa to your PATH manually.'));
					process_850.exit(1);
				}
				};
			};
			const x = 1;
			const y = true;
			const z = /*?*/('xy')? ('fooaa') : 'foozz';
			const z_7226 = /*?*/(true + 1)? ('fooaa') : 'foozz';
			const z_7228 = /*?*/('x' + 1 + true)? ('fooaa') : 'foozz';
			const z_7230 = /*?*/('x' + 1 + true + 7)? ('fooaa') : 'foozz';
			const z_7232 = 'x' + /*?*/('y')? ('fooaa') : 'foozz';
		};
		processFile(target_7234, project) {
			const content = Fs.readFileSync(target_7234);
			const tokens = Lexer.tokenize(content, target_7234);
			if (tokens.length > 0) { this.lines += tokens.line[tokens.length - 1] };
			const parsed = Parser.parseNodes(tokens, project);
			return parsed;
		};
		simplyCompileToJs(buffer, path_7241) {
			const project_7243 = new Project();
			const input = ({files:[]});
			const js = this.processFile(__dirname + '/library/js/js.hexa', project_7243);
			const nodejs = this.processFile(__dirname + '/library/nodejs/nodejs.hexa', project_7243);
			const tokens_7248 = Lexer.tokenize(buffer, path_7241);
			const parser = Parser.parseNodes(tokens_7248, project_7243);
			const collected = [js, nodejs, parser];
			if (parser == null) { return null };
			const files = collected;
			const typer = new Typer(project_7243);
			typer.fillFiles(files);
			const normalizer = new Normalizer(project_7243);
			const generator = new GenJs();
			normalizer.keywords = generator.reserved;
			normalizer.collected = files;
			normalizer.nativeEnums = generator.nativeEnums;
			normalizer.package = input;
			{
				let step = 0;
				const randomSeed = input.randomSeed;
				if (step == 0 && randomSeed != null) { step = 1 };
				if (step == 1) { normalizer.id = randomSeed };
			};
			{
				let step_7258 = 0;
				const globalAccessor = generator.globalAccessor;
				if (step_7258 == 0 && globalAccessor != null) { step_7258 = 1 };
				if (step_7258 == 1) { normalizer.globalAccessor = globalAccessor };
			};
			normalizer.typer = typer;
			const normal = normalizer.normalize();
			return generator.perform(normal);
		};
		repl() {
			console.log('\x1b[35m' + 'Hexa 0.0.5 on node.js ' + process_850.versions.node + '\x1b[0m');
			console.log('\x1b[33mTo print something onto screen use `console.log(value)`\x1b[0m');
			console.log('\x1b[33mTo clear REPL memory use `.clear`\x1b[0m');
			console.log('\x1b[33mTo close REPL use `.exit`\x1b[0m');
			let linesAll = [];
			let linesLatest = [];
			while (true) {
				let line = question('\x1b[32m> \x1b[0m');
				if (line == '.clear') {
					linesAll = [];
					linesLatest = [];
					continue;
				};
				if (line == '.exit') { return };
				if (line.length == 0) { continue };
				linesLatest.push(line);
				try {
					let code = '"use strict"\r\n';
					try {
						const content_7271 = linesAll.join('\n') + '\n' + linesLatest.join('\n');
						const compiled = this.simplyCompileToJs(Buffer.from(content_7271), 'REPL');
						if (compiled == null) { continue };
						{
							let step_7274 = 0;
							const compiled_7276 = compiled;
							if (step_7274 == 0 && compiled_7276 != null) { step_7274 = 1 };
							if (step_7274 == 1) { code = compiled_7276 };
						};
					} catch (temp_7268) {
						if (true) {
						const e = temp_7268
						{
							const error = '' + e;
							if (error.indexOf('<!--eof-->') == (-1)) {
								linesLatest = [];
								console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m');
							} else {
								process_850.stdout.write('\x1b[32m>\x1b[0m');
							};
							continue;
						} } else

						throw temp_7268;
					};
					for (const line of $toIterator(linesLatest)) {
						linesAll.push(line);
					};
					linesLatest = [];
					const result = eval(code);
				} catch (temp_7265) {
					if (true) {
					const e = temp_7265
					{
						console.error('Error: ' + e);
					} } else

					throw temp_7265;
				};
			};
		};
		processFiles(targets, relativePath, loaded, project_7319) {
			let res = [];
			const imports = [];
			for (const target of $toIterator(targets)) {
				if ((!Fs.existsSync(target))) {
					console.log(('No such source file on disk `' + (target) + '`'));
					continue;
				};
				try {
					const parsed_7325 = this.processFile(target, project_7319);
					res.push(parsed_7325);
					for (const e of $toIterator(parsed_7325)) {
						const temp_7327 = (e);
						switch (temp_7327&&temp_7327[0]) {
						case 37: {
							const el = temp_7327[1];
							const path_7330 = temp_7327[2];
							{
								const resolved = path.resolve(relativePath + path_7330 + '.hexa');
								console.log('processFiles! ' + resolved);
								if (loaded.get(resolved) == true) { console.log('loaded! ' + resolved) };
								if (loaded.get(resolved) != true) {
									loaded.set(resolved, true);
									imports.push(resolved);
								};
							}
						} break;
						};
					};
				} catch (temp_7323) {
					if (true) {
					const e = temp_7323
					{
						console.log('\x1b[31m' + e.toString() + '\x1b[0m');
					} } else

					throw temp_7323;
				};
			};
			if (targets.length != res.length) {
				console.log('[Stopped on errors]');
				process_850.exit(1);
			};
			if (imports.length > 0) { for (const file of $toIterator(this.processFiles(imports, relativePath, loaded, project_7319))) {
				res.unshift(file);
			} };
			return res;
		};
		incorrect(what) {
			process_850.stdout.write(('Incorrect package file! Field `' + (what) + '` does not exists\n'));
			process_850.exit(1);
		};
		readPackage(filename) {
			const pack_7335 = JSON.parse(Fs.readFileSync(path.resolve(filename)).toString('utf8').split('\r\n').join('\n'));
			return pack_7335;
		};
		loadPackage(filename_7337, target_7339, project_7341) {
			const pack_7343 = this.readPackage(filename_7337);
			{
				let step_7345 = 0;
				const name_7347 = pack_7343.name;
				if (step_7345 == 0 && name_7347 != null) { step_7345 = 1 };
				if (step_7345 == 1) { project_7341.name = name_7347 } else {
					this.incorrect('name');
				};
			};
			if (pack_7343.targets == null) { this.incorrect('targets') };
			{
				let step_7349 = 0;
				const entry = pack_7343.entry;
				if (step_7349 == 0 && entry != null) { step_7349 = 1 };
				if (step_7349 == 1) { if ((!entry.startsWith('/'))) { pack_7343.entry = '/' + entry } } else {
					this.incorrect('entry');
				};
			};
			{
				let step_7352 = 0;
				const define = pack_7343.define;
				if (step_7352 == 0 && define != null) { step_7352 = 1 };
				if (step_7352 == 1) { for (const key of $toIterator(Reflect.ownKeys(define))) {
					if ((!Reflect.has(project_7341.defines, key))) { Reflect.set(project_7341.defines, key, Reflect.get(define, key)) };
				} };
			};
			const t = (() => {
				{
					let t_7356 = 0;
					let it = 0;
					let at = pack_7343.targets.length;
					while (it < at) {
						t_7356 = it;
						it++;
						{
							if (pack_7343.targets[t_7356].name == target_7339) {
								this.targetIndex = t_7356;
								return pack_7343.targets[t_7356];
							};
						};
					};
				};
				process_850.stdout.write(('Cannot find `' + (target_7339) + '` target in package file\n'));
				process_850.exit(1);
			})();
			const generator_7360 = availableGenerators(t.generator);
			if (generator_7360 == null) {
				process_850.stdout.write(('Generator `' + (t.generator) + '` not available or not supported by this compiler version\n'));
				process_850.exit(1);
			};
			project_7341.roots.push(path.resolve(__dirname + '/library/'));
			const dir = path.dirname(filename_7337);
			{
				let step_7363 = 0;
				const roots = pack_7343.roots;
				if (step_7363 == 0 && roots != null) { step_7363 = 1 };
				if (step_7363 == 1) { for (const root of $toIterator(roots)) {
					project_7341.roots.push(path.resolve(dir + '/' + root));
				} } else {
					project_7341.roots.push(path.resolve(dir));
				};
			};
			if (pack_7343.files == null) { pack_7343.files = [] };
			pack_7343.global = (() => {
				const result_7366 = pack_7343.global;
				if (result_7366 != null) { return result_7366 };
				return [];
			})();
			{
				let i = 0;
				let it_7369 = 0;
				let at_7371 = pack_7343.global.length;
				while (it_7369 < at_7371) {
					i = it_7369;
					it_7369++;
					{
						let step_7373 = 0;
						const file_7375 = pack_7343.global[i];
						let temp_7377 = null;
						if (step_7373 == 0 && file_7375 != null) {
							temp_7377 = (!file_7375.startsWith('/'));
							step_7373 = 1;
						};
						if (step_7373 == 1 && temp_7377 != false) { step_7373 = 2 };
						if (step_7373 == 2) { pack_7343.global[i] = '/' + file_7375 };
					};
				};
			};
			if (pack_7343.noLib == true) {} else {
				const libraries = setLibrary(generator_7360, t.options, project_7341.defines);
				for (const file of $toIterator(libraries)) {
					pack_7343.global.unshift(file);
				};
			};
			if (pack_7343.addLicenseNoticeToOutput == null) { pack_7343.addLicenseNoticeToOutput = true };
			return pack_7343;
		};
		constructor() {
			this.lines = 0
			this.targetName = 'default'
			this.targetIndex = 0
		{
			const begin = Date.now();
			Lexer.init();
			const defines = {};
			while ((process_850.argv[0] == '--define')) {
				if (process_850.argv.length < 2) {
					console.log('Usage: `--define name=value`');
					process_850.exit(1);
				};
				process_850.argv.shift();
				const kv = ((() => {
					const result_7383 = process_850.argv.shift();
					if (result_7383 != null) { return result_7383 };
					return '';
				})()).split('=');
				if (kv.length < 2) {
					console.log('Usage: `--define name=value`');
					process_850.exit(1);
				};
				const k = kv[0];
				const v = JSON.parse(kv[1]);
				defines[k] = v;
			};
			const project_7387 = new Project();
			project_7387.defines = defines;
			if (process_850.argv[0] == 'syntax-linter') {
				if (process_850.argv.length < 2) { console.log('Usage: `hexa --syntax-linter file.hexa`') } else {
					const file_7389 = process_850.argv[1];
					try {
						const content_7393 = Fs.readFileSync(file_7389);
						try {
							const tokens_7397 = Lexer.tokenize(content_7393, file_7389);
							try { const parser_7401 = Parser.parseNodes(tokens_7397, project_7387, true) } catch (temp_7399) {
								if (true) {
								const e = temp_7399
								{
									console.log(('' + (e) + ''));
								} } else

								throw temp_7399;
							};
						} catch (temp_7395) {
							if (true) {
							const e = temp_7395
							{
								console.log(('' + (e) + ''));
							} } else

							throw temp_7395;
						};
					} catch (temp_7391) {
						if (true) {
						const e = temp_7391
						{
							console.log(('ERROR: Unable to open file ' + (file_7389) + ''));
						} } else

						throw temp_7391;
					};
				};
				process_850.exit(0);
			};
			const ignoreArguments = (fromIndex) => {
				if (fromIndex == process_850.argv.length) { return };
				const args = [];
				const count = process_850.argv.length - fromIndex;
				let i_7407 = 0;
				while ((i_7407 < count)) {
					args.push(process_850.argv[(i_7407++) + fromIndex]);
				};
				console.log('Argument' + (/*?*/(args.length > 1)? ('s') : '') + ' `' + args.join('`, `') + '` ignored');
			};
			if (process_850.argv[0] == null) {
				this.repl();
				process_850.exit(0);
			} else if (process_850.argv[0] == 'init') {
				this.init();
				ignoreArguments(3);
				process_850.exit(0);
			} else if (process_850.argv[0] == 'symlink') {
				this.symlink();
				process_850.exit(0);
			};
			let currentFile = path.resolve(process_850.argv[0]);
			let currentParsedFile = path.parse(currentFile);
			let input_7411 = (null);
			let packageFolder = currentParsedFile.dir;
			if (currentParsedFile.ext == '.json') {
				process.argv.shift();
				if (process.argv[0] == 'targets') {
					const pack_7414 = this.readPackage(currentFile);
					if (pack_7414.name == null) { this.incorrect('name') };
					if (pack_7414.targets == null) { this.incorrect('targets') };
					const targets_7416 = [];
					for (const target of $toIterator(pack_7414.targets)) {
						targets_7416.push(target.name);
					};
					console.log(quote(('The project `' + (pack_7414.name) + '` has following targets: ') + targets_7416.join(', ')));
					return;
				};
				if (process.argv[0] == '--target') {
					process.argv.shift();
					this.targetName = (() => {
						const result_7418 = process.argv[0];
						if (result_7418 != null) { return result_7418 };
						return 'default';
					})();
					process.argv.shift();
				};
				input_7411 = this.loadPackage(currentFile, this.targetName, project_7387);
				ignoreArguments(0);
				if (this.targetName != 'default') { console.log(('[Building ' + (input_7411.name) + ' - ' + (this.targetName) + ']')) } else {
					console.log(('[Building ' + (input_7411.name) + ']'));
				};
				console.log(('[Using 1 of ' + (require('os').cpus().length) + ' CPU cores]'));
			} else if ((Fs.existsSync(currentFile)) && (Fs.lstatSync(currentFile).isDirectory())) {
				ignoreArguments(3);
				input_7411 = this.loadPackage(currentFile + path.sep + 'hexa.json', this.targetName);
				packageFolder = currentFile;
			} else if (currentParsedFile.ext == '.hexa') {
				try { eval(this.simplyCompileToJs(Fs.readFileSync(currentFile), currentFile)) } catch (temp_7420) {
					if (true) {
					const e = temp_7420
					{
						console.error('' + e);
					} } else

					throw temp_7420;
				};
				process_850.exit(0);
				return;
			} else {
				console.error(('Unknown command: ' + (process_850.argv[0]) + ''));
				console.error(quote('Try `hexa help`'));
				process_850.exit(1);
				return;
			};
			let files_7422 = [];
			if ((false) && (input_7411.files != null)) {
				const relativePath_7424 = packageFolder + path.sep;
				const loaded_7426 = new Map();
				const fileList = input_7411.files.map((file_7429) => {
					if (file_7429.startsWith('/') || file_7429.charAt(1) == ':') { return path.resolve(file_7429) };
					const resolved_7431 = path.resolve(relativePath_7424 + file_7429);
					loaded_7426.set(resolved_7431, true);
					return resolved_7431;
				});
				{
					files_7422 = this.processFiles(fileList, relativePath_7424 + '/' + input_7411.root + '/', loaded_7426, project_7387);
				};
			};
			{
				let step_7433 = 0;
				const global_7435 = input_7411.global;
				if (step_7433 == 0 && global_7435 != null) { step_7433 = 1 };
				if (step_7433 == 1) { for (const path of $toIterator(global_7435)) {
					this.lines += Main.processModule(project_7387, path, true);
				} };
			};
			Main.processModule(project_7387, input_7411.entry, false);
			const typer_7437 = new Typer(project_7387);
			try { typer_7437.fillModules() } catch (temp_7439) {
				if (true) {
				const e = temp_7439
				{
					console.log('\x1b[31m' + e.toString() + '\x1b[0m');
					process_850.exit(1);
				} } else

				throw temp_7439;
			};
			const normalizer_7441 = new Normalizer(project_7387);
			const generators = new Map();
			const registerTarget = (name_7445, generator_7447) => {
				{
					let step_7449 = 0;
					const generator_7451 = generators.get(name_7445);
					if (step_7449 == 0 && generator_7451 != null) { step_7449 = 1 };
					if (step_7449 == 1) { console.log(('Note: generator `' + (name_7445) + '` was overridden')) };
				};
				generators.set(name_7445, generator_7447);
			};
			registerTarget('js', GenJs.spawn);
			registerTarget('native', GenCxx.spawn);
			{
				let step_7453 = 0;
				const generatorName = input_7411.targets[this.targetIndex].generator;
				if (step_7453 == 0 && generatorName != null) { step_7453 = 1 };
				if (step_7453 == 1) {
					let step_7456 = 0;
					const generatorSpawner = generators.get(generatorName);
					if (step_7456 == 0 && generatorSpawner != null) { step_7456 = 1 };
					if (step_7456 == 1) {
						const generator_7459 = generatorSpawner();
						const target_7461 = packageFolder + path.sep + path.parse(input_7411.targets[this.targetIndex].output).name + generator_7459.extension;
						const target_7463 = path.join(packageFolder, input_7411.targets[this.targetIndex].output);
						normalizer_7441.keywords = generator_7459.reserved;
						normalizer_7441.collected = files_7422;
						normalizer_7441.nativeEnums = generator_7459.nativeEnums;
						normalizer_7441.reservedGlobals = (() => {
							const result_7465 = generator_7459.reservedGlobals;
							if (result_7465 != null) { return result_7465 };
							return normalizer_7441.reservedGlobals;
						})();
						normalizer_7441.package = input_7411;
						{
							let step_7467 = 0;
							const randomSeed_7469 = input_7411.randomSeed;
							if (step_7467 == 0 && randomSeed_7469 != null) { step_7467 = 1 };
							if (step_7467 == 1) { normalizer_7441.id = randomSeed_7469 };
						};
						{
							let step_7471 = 0;
							const globalAccessor_7473 = generator_7459.globalAccessor;
							if (step_7471 == 0 && globalAccessor_7473 != null) { step_7471 = 1 };
							if (step_7471 == 1) { normalizer_7441.globalAccessor = globalAccessor_7473 };
						};
						normalizer_7441.typer = typer_7437;
						const normal_7475 = normalizer_7441.normalize();
						for (const hint of $toIterator(project_7387.hints)) {
							console.log(hint.toString());
						};
						const outs = generator_7459.perform(normal_7475);
						Fs.writeFileSync(target_7463, outs);
					} else {
						console.log(('Generator for `' + (generatorName) + '` is not registered.'));
						process_850.exit(1);
					};
				} else {
					console.log('Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?');
					process_850.exit(1);
				};
			};
			const delta = Date.now() - begin;
			const lps = Math.round(this.lines / (delta / 1000));
			console.log(('[Finished in ' + (delta) + ' ms, ' + (this.lines) + ' lines, ' + (lps) + ' lines per second]'));
			process_850.stdout.once('drain', () => { process_850.exit(0) });
			process_850.stdout.write('');
		} };
	}
	Main.processGlobals = (project_7279, path_7281) => {
			const index = project_7279.moduleName.indexOf(path_7281);
			{
				let step_7284 = 0;
				const info = project_7279.moduleInfo[index];
				if (step_7284 == 0 && info != null) { step_7284 = 1 };
				if (step_7284 == 1) {
					const nodes = info.nodes;
					for (const e of $toIterator(nodes)) {
						let named = true;
						{
							const temp_7289 = (e);
							switch (temp_7289&&temp_7289[0]) {
							case 24: {
								{
								}
							} break;

							case 39: {
								{
								}
							} break;

							case 22: {
								{
								}
							} break;

							case 26: {
								{
								}
							} break;

							default:
							named = false
							};
						};
						if (named) {
							const name_7291 = DataHelper.nameOf(e);
							if (project_7279.globals.has(name_7291)) {
								process_850.stdout.write(('Global node `' + (name_7291) + '` declared in `' + (path_7281) + '` already defined somewhere\n'));
								process_850.exit(502);
							} else {
								project_7279.globals.set(name_7291, e);
							};
						};
					};
				};
			};
		};
	Main.processModule = (project_7293, path_7295, global) => {
			const index_7298 = project_7293.moduleName.indexOf(path_7295);
			let lines = 0;
			if (index_7298 > (-1)) {
				if (global == true) { Main.processGlobals(project_7293, path_7295) };
				return lines;
			};
			for (const root of $toIterator(project_7293.roots)) {
				const file = path.join(root, path_7295 + '.hexa');
				if (Fs.existsSync(file)) {
					const content_7302 = Fs.readFileSync(file);
					const tokens_7304 = Lexer.tokenize(content_7302, file);
					if (tokens_7304.length > 0) { lines += tokens_7304.line[tokens_7304.length - 1] };
					const parsed_7306 = Parser.parseNodes(tokens_7304, project_7293);
					project_7293.moduleName.push(path_7295);
					const info_7308 = new Module();
					info_7308.nodes = parsed_7306;
					info_7308.file = file;
					info_7308.path = path_7295;
					project_7293.moduleInfo.push(info_7308);
					for (const e of $toIterator(parsed_7306)) {
						const temp_7310 = (e);
						switch (temp_7310&&temp_7310[0]) {
						case 37: {
							const path_7312 = temp_7310[2];
							Main.processModule(project_7293, path_7312, false)
						} break;
						};
					};
					if (global == true) { Main.processGlobals(project_7293, path_7295) };
					return lines;
				};
			};
			process_850.stdout.write(('Cannot find file `' + (path_7295) + '` in any of the roots\n'));
			if (path_7295.endsWith('.hexa')) { process_850.stdout.write(('Do not write `.hexa` extension in imports, just use `import ... in \'' + (path_7295.replace('.hexa', '')) + '\'`\n')) };
			for (const root of $toIterator(project_7293.roots)) {
				const file_7314 = path.join(root, path_7295 + '.hexa');
				process_850.stdout.write(('Checked here: `' + (file_7314) + '`\n'));
			};
			process_850.exit(404);
		};
	var Server = class {
		constructor(port) {
		{
			this.port = /*?*/(port == null)? (3978) : parseInt(port);
			const port_7483 = this.port;
			console.log('Requested language server at localhost:' + port_7483);
			Lexer.init();
			const http = require('http');
			const fs = require('fs');
			const path_7487 = require('path');
			const url = require('url');
			const project = new Project();
			const handleRequest = (project_7492, req, res) => {
				const chunks = [];
				req.on('data', (chunk) => (chunks.push(chunk)));
				req.on('end', () => {
					const data = Buffer.concat(chunks);
					const text = data.toString().trim();
					if (text.length > 0) {
						const json = JSON.parse(data.toString());
						const commands = json;
						if (commands.length == 0) {
							res.writeHead(404, {});
							res.write('{}');
							res.end();
						} else {
							for (const command of $toIterator(commands)) {
								const temp = (command.kind);
								switch (temp) {
								case 'GetWholeFileSyntaxErrors': {
									{
										res.writeHead(200, {});
										const file = 'hexa.hexa';
										const content = Buffer.from(command.payload);
										try {
											const tokens = Lexer.tokenize(content, 'hexa.hexa');
											try { const parser = Parser.parseNodes(tokens, new Project(), true) } catch (temp_7508) {
												if (true) {
												const e = temp_7508
												{
													res.write(JSON.stringify(e.errors));
												} } else

												throw temp_7508;
											};
										} catch (temp_7505) {
											if (true) {
											const e = temp_7505
											{
												res.write(JSON.stringify(e.errors));
											} } else

											throw temp_7505;
										};
										res.end();
									}
								} break;

								default:
								{
									res.writeHead(502, {});
									res.write('{}');
									res.end();
								}
								};
							};
						};
					} else {
						res.writeHead(400, {});
						res.write('{}');
						res.end();
					};
				});
			};
			const server = http.createServer((req_7512, res_7514) => (handleRequest(project, req_7512, res_7514)));
			server.listen(port_7483, () => ((() => {
				console.log('Compiler version:', '0.0.5');
				return console.log('Ready to Hexa!');
			})()));
		} };
	}
	function hasOwnProperty(object, name) { return object.hasOwnProperty(name) };
	function btoa(text_892) { return new Buffer(text_892, 'binary').toString('base64') };
	function atob(base64) { return new Buffer(base64, 'base64').toString('binary') };
	function availableGenerators(name) {
			const temp = (name);
			switch (temp) {
			case 'js': {
				return 'JavaScript'
			} break;

			case 'native': {
				return 'Native'
			} break;

			default:
			return null
			};
		};
	function setLibrary(target, options, defines) {
			const files = [];
			{
				const temp_7176 = (target);
				switch (temp_7176) {
				case 'JavaScript': {
					{
						defines.js = (() => {
							const result = defines.js;
							if (result != null) { return result };
							return true;
						})();
						files.push('/js/js');
						if (options.includes('nodejs')) { files.unshift('/nodejs/nodejs') };
						if (options.includes('browser')) { files.unshift('/browser/html') };
					}
				} break;

				case 'Native': {
					{
						defines.native = (() => {
							const result_7179 = defines.native;
							if (result_7179 != null) { return result_7179 };
							return true;
						})();
						files.push('/c/c');
					}
				} break;
				};
			};
			return files;
		};
	function indigo(text) { return '\x1b[35m' + text + '\x1b[0m' };
	function blue(text_7182) { return '\x1b[34m' + text_7182 + '\x1b[0m' };
	function ignoreRestArguments() { if (process.argv.length > 0) {
			const args = process.argv;
			console.log('Argument' + (/*?*/(args.length > 1)? ('s') : '') + ' \x1b[34m`' + args.join('`\x1b[0m, \x1b[34m`') + '`\x1b[0m ignored');
		} };
	function quote(text_7185) {
			const result = [];
			let even = false;
			for (const string of $toIterator(text_7185.split('`'))) {
				if (even == false) { result.push(string) } else {
					result.push('\x1b[33m');
					result.push('`');
					result.push(string);
					result.push('`');
					result.push('\x1b[0m');
				};
				even = (!even);
			};
			return result.join('');
		};
	function printVersion() {
			console.log(indigo(('Hexa ' + (version) + ' on node.js ') + process_850.versions.node));
			process.argv.shift();
			ignoreRestArguments();
			process.exit(0);
		};
	function printHelp() {
			console.log(indigo(('Hexa ' + (version) + ' on node.js ') + process_850.versions.node));
			console.log(blue('Use `hexa hexa.json` to simply build `default` target'));
			console.log(quote('`hexa init` creates new project by asking some questions'));
			console.log(quote('`hexa hexa.json targets` show available targets for the project'));
			console.log(quote('`hexa help` shows this help'));
			console.log(quote('`hexa version` shows compiler version'));
			console.log(quote('`hexa listen` or `hexa listen 3978` starts language server on the selected port'));
			process.argv.shift();
			ignoreRestArguments();
			process.exit(0);
		};
	function question(query) {
			process_850.stdout.write(query);
			let bufsize = 256;
			let buf = new Buffer(bufsize);
			let bytesRead = 0;
			const stdin = /*?*/((process.platform == 'win32'))? (process_850.stdin.fd) : Fs.openSync('/dev/stdin', 'rs');
			try { bytesRead = Fs.readSync(stdin, buf, 0, bufsize) } catch (temp) {
				if (true) {
				const e = temp
				{
					const e = e;
					if (e.code == 'EAGAIN') { return 'ERROR: interactive stdin input not supported.' };
					if (e.code == 'EOF') { return '' };
					throw e;
				} } else

				throw temp;
			};
			if (bytesRead == 0) { return '' };
			const answer = buf.toString('utf8', 0, bytesRead).trim();
			return answer;
		};
	var colorIndigo = '\x1b[35m'
	var colorBlue = '\x1b[34m'
	var colorYellow = '\x1b[33m'
	var colorDefault = '\x1b[0m'
	var version = '0.0.5'
	{
		{
			if (process.argv[0].endsWith('node.exe') || process.argv[0].endsWith('node')) {
				process.argv.shift();
				process.argv.shift();
			} else if (process.argv[0].endsWith('.exe')) { process.argv.shift() };
			{
				const temp = (process.argv[0]);
				switch (temp) {
				case 'listen': {
					const temp_7517 = new Server(process.argv[1])
				} break;

				case 'help': {
					printHelp()
				} break;

				case 'version': {
					printVersion()
				} break;

				default:
				const temp_7519 = new Main()
				};
			};
		}
	}
})();
