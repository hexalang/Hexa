// The Hexa Compiler
// Copyright (C) 2018-2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

module
	/// List of all codegen targets
	enum Generators: String {
		// primary
		JavaScript
		Native
		// third-party/experimental
		CSharp
		Haxe
		Nasm
		Llvm
	}

	/// Get target by name
	function availableGenerators(name: String): Generators? {
		switch (name) {
		// primary
		case "js": return Generators.JavaScript
		case "native": return Generators.Native

		// third-party/experimental
		case "haxe": return Generators.Haxe
		case "nasm": return Generators.Nasm
		case "llvm": return Generators.Llvm

		// none
		case _:
			return null
	}}

	/// Get standard library for target
	function setLibrary(target: Generators, options: [String], files: [String], defines: Any) {
		switch (target) {
		// primary
		case Generators.JavaScript:
			defines.js = defines.js ?? true
			files.unshift(Path.resolve(__dirname + '/library/js/js.hexa'))
			if (options.includes('nodejs')) {
				files.unshift(Path.resolve(__dirname + '/library/nodejs/nodejs.hexa'))
			}
			if (options.includes('browser')) {
				files.unshift(Path.resolve(__dirname + '/library/browser/html.hexa'))
			}

		case Generators.Native:
			defines.native = defines.native ?? true
			files.unshift(Path.resolve(__dirname + '/library/c/c.hexa'))

		// third-party/experimental
		case Generators.Haxe:
			defines.haxe = defines.haxe ?? true
			files.unshift(Path.resolve(__dirname + '/library/haxe/haxe.hexa'))

		case Generators.Nasm:
			defines.native = defines.native ?? true
			files.unshift(Path.resolve(__dirname + '/library/c/c.hexa'))

		case Generators.Llvm:
			defines.native = defines.native ?? true
			files.unshift(Path.resolve(__dirname + '/library/c/c.hexa'))
	}}
