// Generated by Hexa https://hexalang.github.io
// normalizer
// LICENSE LGPL-3.0-only
;(() => {
	"use strict"
	const $global = typeof(window) === "undefined"? global : window
	if (typeof($global.require) === "undefined") { $global.require = () => {} };
	const selfVersion="1.0.0";
	var Expose = {
		DDD: (i_143)=>[3,i_143],
	}
	Object.defineProperty(Expose, "AAA", { get: () => { return [0] }})
	Object.defineProperty(Expose, "BBB", { get: () => { return [1] }})
	Object.defineProperty(Expose, "CCC", { get: () => { return [2] }})
	var NoExpose = {
	}
	var NiceExpression = {
	}
	var console_46 = $global.console
	var EasE = class {
		constructor(value_135) {};
	}
	var AutoKeep = class {
		constructor() {};
	}
	var $Renamed = class {
		constructor() { 
			this.$renames = '123'
		{
		} };
		$ren() { return '123' };
	}
	$Renamed.$rename = '123'
	$Renamed.$renamed = () => { return '123' };
	function hasOwnProperty(object, name) { return object.hasOwnProperty(name) };
	function btoa(text_113) { return Buffer.from(text_113, 'binary').toString('base64') };
	function atob(base64) { return Buffer.from(base64, 'base64').toString('binary') };
	function $renamed() { return '123' };
	var value = 'hello'
	var another = 'hello'
	var boolean = true
	var $rename = 123
	{
		{
			console.log('Thank you for choosing Hexa');
			console.log('abcdce');
			console.log('abcdcefff');
			console.log('abc123');
			console.log('3');
			console.log('2');
			console.log('0.7');
			console.log('hello');
			console.log('xhelloy');
			console.log('xhelloy');
			{
				const nested = 'hi';
				console.log('xhiy');
			};
			{
				const bool = true;
				const bool_114 = true;
				const bool_115 = false;
				const bool_116 = false;
				const bool_117 = true;
				const bool_118 = true;
				console.log('xtruey');
				console.log('x' + true + 'y');
				const bool_119 = true;
				console.log('xtrue');
				const bool_120 = false;
				const bool_121 = false;
				console.log('false == false');
				const bool_122 = true;
				const bool_123 = true;
				console.log('true == true');
				const bool_124 = false;
				const bool_125 = false;
				console.log('false == false');
				const bool_126 = true;
				const bool_127 = true;
				console.log('true == true');
				console.log('true == true');
				console.log('true == true');
				const preValue = false;
				const preValue_128 = true;
				const preValue_129 = true;
				const preValue_130 = false;
				const preValue_131 = true;
				const preValue_132 = false;
				const t = true;
				const f = false;
				console.log('keep');
				console.log('keep');
				console.log('keep');
				if (Math.random() > 0) { Math.random() };
				if (Math.random() > 0) { Math.random() };
				if (Math.random() > 0) { Math.random() };
			};
			{
				try {} catch (temp) {
					if (true) { 
					const e = temp
					{
					} } else
					
					throw temp;
				};
				try {
					console.log('keep');
					throw 123;
				} catch (temp_133) {
					if (true) { 
					const e = temp_133
					{
					} } else
					
					throw temp_133;
				};
				for (const i of [1, 2, 3]) {
					{
						console.log('keep');
						break;
					};
					console.log('keep');
					continue;
				};
				const test = () => {
					console.log('keep');
					return 123;
				};
			};
			{
				let i = 0;
				i++;
				i++;
				i--;
				i--;
				const bool_134 = () => { return false };
			};
			{
				const temp_136 = new EasE();
				const temp_137 = new EasE(123);
			};
			{
				{
					const temp_138 = 123;
					switch (temp_138) {
					default: 
					console.log('hi')
					};
				};
				{
					const temp_139 = 123;
					switch (temp_139) {
					case 123: {
						console.log('123')
					} break;
					
					default: 
					console.log('case _: is ok at any position')
					};
				};
				{
					const temp_140 = 123;
					switch (temp_140) {
					case 123: {
						console.log('123')
					} break;
					
					default: 
					console.log('case _: is ok at any position')
					};
				};
			};
			{
				const temp_141 = new AutoKeep();
			};
			{
				const r = new $Renamed();
				console.log(r.$renames);
				console.log(r.$ren());
				console.log($Renamed.$rename);
				console.log($Renamed.$renamed());
				console.log($rename);
				console.log($renamed());
				const $local = () => { return '123' };
				console.log($local());
			};
			{
				const x = 3;
				const x_142 = true;
			};
			{
				const expression = /*Other*/[0];
				{
					const temp_145 = expression;
					switch (temp_145&&temp_145[0]) {
					case 0: {
						console.log('Other')
					} break;
					};
				};
				{
					const temp_146 = (expression);
					switch (temp_146&&temp_146[0]) {
					case 0: {
						console.log('Other')
					} break;
					};
				};
			};
		}
	}
})();
