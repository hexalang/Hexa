// The Hexa Compiler
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

	// Generates C with C++ compatibility
	class GenC {
			return new GenC()
		static fun spawn() {
		}
		new () {}
		fun perform(normalizer): String {
			project = normalizer
			return stringify()
		}

		var project: NiceProject
		var declarationsOfFunctions: [String] = []
		var declarationsOfOpaqueTypes: [String] = []
		var declarationsOfFullTypes: [String] = []

			let header = [
				'// Generated by Hexa \(version) https://hexalang.github.io',
				'#include <stdint.h>',
				'#include <stdarg.h>',
				'#ifdef __cplusplus',
				'extern "C" {',
				'#endif'
			]
			var out = ''
		fun stringify() {

			// Types
			for (e in project.enumsSimple) {
				// No need to output simple enum values
				out += '\n' + 'struct _x' + e.name + ' {}' // typedef
				for (v in e.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						out += '\nauto _x' + e.name + '_' + name
						if (expr != null) out += ' = ' + printExpression(expr) + ';'
					case NiceStatement.Const(name, expr):
						out += '\nauto _x' + e.name + '_' + name
						out += ' = ' + printExpression(expr) + ';'
				}
				for (v in e.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						out += '\nauto _x' + e.name + '_' + name
						out += printFunctionArguments(args, defaults) + ' { ' + printStatement(expr) + ' };'
				}
			}

			for (e in project.enumsComplex) {
				out += '\n' + 'struct _x' + e.name + ' {\n uint16_t _xindex;\n'
				declarationsOfOpaqueTypes.push('typedef struct _x\(e.name)* \(e.name)')
				var i = 0
				if (e.names.length > 0) {
					out += '\n union {'
					for (name in e.names) {
						if (e.constructors[i] != null) {
							out += '\n  struct { '
							out += 'auto ' + e.constructors[i].join('; auto ') + '; '
							out += '} _x' + name + ';'
						}
						i++
					}
				}
				out += '\n};'
			}

			for (i in project.interfaces) {
				throw i
			}

			for (c in project.classes) {
				if (c.external) {
					if (c.jsRequire != null) {
						out += '\n ' + 'var ' + c.name + ' = require("' + c.jsRequire + '")'
						continue
					}
					declarationsOfOpaqueTypes.push('#define _x' + c.name + ' ' + (c.jsNative ?? c.name))
					continue
				}

				let renamed = '_x' + c.name
				let t = ['struct ', renamed, ' {']
				declarationsOfOpaqueTypes.push('typedef struct \(renamed)* \(renamed)')
				for (v in c.methods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults): // Class method
					let returns = null
					let types = null
					var declaration = printType(returns) + ' '
					let constructor = (name == null || name == 'new')
					if (constructor) declaration = renamed + ' '
					declaration += renamed + '_' + name

					if (constructor) {
						if (args.length > 0) declaration += '(auto _x' + args.join(', auto _x') + ')'
						else declaration += '()'
					} else {
						if (args.length > 0) declaration += '(\(renamed) _xthis, auto _x' + args.join(', auto _x') + ')'
						else declaration += '(\(renamed) _xthis)'
					}

					declarationsOfFunctions.push(declaration)
					out += '\n' + declaration
					out += ' { '

					if (constructor) {
						out += '\n \(renamed) _xthis = (\(renamed))malloc(sizeof(struct \(renamed)));'
						// Init fields
						for (v in c.vars) switch (v) {
							case NiceStatement.Var(name, expr):
							if (expr != null)
							out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
							case NiceStatement.Const(name, expr):
							out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
						}
						out += '\n '
						out += printStatement(expr) + '\n return _xthis;\n};'
					} else

					out += printStatement(expr) + '\n};'
				}
				t.push('\n}')
				declarationsOfFullTypes.push(t.join(''))

				for (v in c.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						out += '\nauto ' + renamed + '_' + name
						if (expr != null) out += ' = ' + printExpression(expr)
						out += ';'
					case NiceStatement.Const(name, expr):
						out += '\nauto ' + renamed + '_' + name
						out += ' = ' + printExpression(expr) + ';'
				}
				for (v in c.staticMethods) switch (v) {
				}
			}

			for (g in project.globalFuncs) {
				throw g
			}

			for (g in project.globalVars) {
				throw g
			}

			// Init
			for (init in project.init) {
				out += '\n {\n  '
				out += printStatement(init)
				out += '\n }'
			}

			out += '\n#ifdef __cplusplus'
			out += '\n}'
			out += '\n#endif\n'

			if (declarationsOfOpaqueTypes.length > 0) declarationsOfOpaqueTypes.push('\n')
			if (declarationsOfFunctions.length > 0) declarationsOfFunctions.push('\n')
			if (declarationsOfFullTypes.length > 0) declarationsOfFullTypes.push('\n')

			return header.join('\n') + '\n'
			+ declarationsOfOpaqueTypes.join(';\n')
			+ declarationsOfFunctions.join(';\n')
			+ declarationsOfFullTypes.join(';\n')
			+ out
		}

		var tabs = ''
		@inline function pushTab() tabs += ' '
		@inline function popTab() tabs = tabs.substring(0, tabs.length - 1)

		// All names are prefixed with `_x`, so reserved words are not required
		var reserved = []

		// Surrounds with { brackets } single statement
		fun printBlock(s: NiceStatement): String {
			switch (s) {
				case NiceStatement.Block(el):
				if (el.length == 1) return '{ ' + printStatement(el[0]) + '; }'
				if (el.length == 0) return '{}'
				return printStatement(s)
				case _: return '{ ' + printStatement(s) + '; }'
			}
		}

		var last = ''
			last = s ?? last
		fun printStatement(s: NiceStatement) {
			switch (s) {
				case NiceStatement.Statements(els):
					var r = ''
					for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
					return r

				case NiceStatement.Break: return 'break'
				case NiceStatement.Continue: return 'continue'
				case NiceStatement.Block(el):
					pushTab()
					var r = '{'

					for (e in el) switch (e) {
						case null:
						case NiceStatement.Statements(els):
							for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
						case _:
							r += '\n' + tabs + printStatement(e) + ';'
					}

					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.New(e, args): return '' + printExpression(e) + '_new' + printCallArguments(args)
				case NiceStatement.Const(name, expr): return 'const auto _x' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Var(name, expr): return 'auto _x' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Return(e):
					if (e == null) return 'return'
					return 'return ' + printExpression(e)
				case NiceStatement.If(econd, eif, eelse):
					var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
					if (eelse != null) r += ' else ' + printStatement(eelse)
					return r
				case NiceStatement.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceStatement.Try(expr, t, v, catches):
					pushTab()
					var r = 'try {\n' + tabs
					r += printStatement(expr)
					popTab()
					r += '\n' + tabs + '} catch(' + v[0] + ') {\n' + tabs + ' '
					pushTab()
					r += printStatement(catches[0])
					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.Assign(a, v):
					return printExpression(a) + ' = ' + printExpression(v)
				case NiceStatement.Throw(e):
					return '_xthrow(' + printExpression(e) + ')'
				case NiceStatement.For(name, over, by):
					return 'for (const auto _x' + name + ' of ' + printExpression(over) + ') ' + printStatement(by)
				case NiceStatement.Increment(e): return printExpression(e) + '++'
				case NiceStatement.Decrement(e): return printExpression(e) + '--'
				case NiceStatement.While(econd, e, pre):
					if (pre) return 'while (' + printExpression(econd) + ') ' + printStatement(e)
					return 'do {' + printStatement(e) + '} while (' + printExpression(econd) + ')'
				case NiceStatement.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceStatement.Dot(expr, name): return printExpression(expr) + '.' + name

				case NiceStatement.Switch(expr, cases, statements):
					var r = 'switch (' + printExpression(expr) + ') {'

					// case 1: case 2: case 3:
					for (i in cases.length) if (cases[i].length > 0) {
						r += '\n' + tabs
						for (cc in cases[i]) r += 'case ' + printExpression(cc) + ': '
						pushTab()
						r += '{\n' + tabs
						r += printStatement(statements[i])
						popTab()
						r += '\n' + tabs + '}break;\n' + tabs
					}

					// default:
					for (i in cases.length) if (cases[i].length == 0) {
						r += '\n' + tabs + 'default:'
						r += '\n' + tabs
						r += printStatement(statements[i])
						r += '\n' + tabs
					}

					return r + '}'

				case _: console.error("Unknown statement kind:", (s??[])[0])
			}
		}

		function printCallArguments(args: [NiceExpression]) {
			return '(' + [for (a in args) printExpression(a)].join(', ') + ')'
		}

		function printFunctionArguments(args: [String], defaults: [NiceExpression]) {
			return '(' + [for (a in args.length)
				args[a] + ((defaults != null && defaults[a] != null)? ' = ' + printExpression(defaults[a]) : '')
			].join(', ') + ')'
		}

		function printExpression(e: NiceExpression) {
			last = e ?? last
			switch (e) {
				case NiceExpression.This: return '_xthis'
				case NiceExpression.Ident(name): return '_x' + name
				case NiceExpression.Null: return '0'
				case NiceExpression.Int(v): return '' + v
				case NiceExpression.Float(v): return '' + v
				case NiceExpression.String(s):

					let s = s.split('')
					let charsOut = []
					while (s.length > 0) {
						switch (s[0]) {
							case "'":
							charsOut.push("\\'")
							s.shift()
							case '"':
							charsOut.push('\\"')
							s.shift()
							case "\n":
							charsOut.push("\\n")
							s.shift()
							case "\r":
							charsOut.push("\\r")
							s.shift()
							case "\\":
							s.shift()
							if (s[0] == "'") {
								charsOut.push("\\'")
								s.shift()
							} else if (s[0] == '"') {
								charsOut.push('\\"')
								s.shift()
							} else if (s[0] == '\\') {
								charsOut.push("\\\\")
								s.shift()
							} else {
								charsOut.push('\\')
							}
							case _:
							charsOut.push(s[0])
							s.shift()
						}
					}

					return '_xString_fromUTF8z("' + charsOut.join('') + '")'
				case NiceExpression.True: return '1'
				case NiceExpression.False: return '0'
				case NiceExpression.Dot(expr, name): switch (expr) {
					case NiceExpression.This: return '_xthis->_x' + name
					case _: return printExpression(expr) + '->_x' + name
				}
				case NiceExpression.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceExpression.Function(name, expr, args, defaults, types, returns):
					return '((() => { void* _x' + name + ' = ' + printFunctionArguments(args, defaults, types) + ' => '
					+ printBlock(expr) + ';return _x' + name + ';})())'
					return printFunctionArguments(args, defaults) + ' => (' + printExpression(expr) + ')'
				case NiceExpression.Arrow(expr, args, defaults, types, returns):
				case NiceExpression.New(e, args): return '' + printExpression(e) + '_new' + printCallArguments(args)
				case NiceExpression.Array(el): return '[' + [for (a in el) printExpression(a)].join(', ') + ']'
				case NiceExpression.Unop(op, postfix, e):
					if (postfix) return printExpression(e) + Token.stringify(op)
					return Token.stringify(op) + printExpression(e)
				case NiceExpression.Elvis(nullable, othewise):
					return '((' + printExpression(nullable) + ')||(' + printExpression(othewise) + '))'
				case NiceExpression.Parenthesis(e): return '(' + printExpression(e) + ')'
				case NiceExpression.Binop(a, op, b):
					return printExpression(a) + ' ' + Token.stringify(op) + ' ' + printExpression(b)
				case NiceExpression.Index(expr, index):
					return printExpression(expr) + '[' + printExpression(index) + ']'
				case NiceExpression.If(econd, eif, eelse):
					var r = ''
					try {
						r += '(' + printExpression(econd) + ')?'
						r += '(' + printExpression(eif) + ')'
						r += ':' + printExpression(eelse)
						return r
					} catch (error: Any) {
						console.log('If =>', e, error)
						return r + '<!-- If => error -->'
					}
				case NiceExpression.Object(names, el):
					return '{' + [for (i in el.length) ((names[i]) + ':' + printExpression(el[i]))].join(', ') + '}'
				case NiceExpression.Map(keys, values):
					if (keys.length == 0) return '_xMap_new()'
					return '_xMap_new([' +
					[for (i in keys.length) '[' + printExpression(keys[i]) + ', ' + printExpression(values[i]) + ']'].join(', ')
					+ '])'
				case NiceExpression.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceExpression.NativeOperator(kind, args, s): switch (kind) {
					case NativeOperatorKind.Infix: return '((' + printExpression(args[0]) + ')' + s + '(' + printExpression(args[1]) + '))'
					case NativeOperatorKind.Function: return s + printCallArguments(args)
					case NativeOperatorKind.Prefix: return '(' + s + '(' + printExpression(args[0]) + '))'
					case NativeOperatorKind.Postfix: return '((' + printExpression(args[1]) + ')' + s + ')'
				}
				case _: console.error("Unknown expression kind:", (e??[])[0], e, last) return '<!-- ' + (e??[])[0] + ' -->'
			}
		}
	}
